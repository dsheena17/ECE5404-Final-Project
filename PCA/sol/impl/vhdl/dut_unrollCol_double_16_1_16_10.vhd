-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_unrollCol_double_16_1_16_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    lda : IN STD_LOGIC_VECTOR (31 downto 0);
    Order_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Order_ce0 : OUT STD_LOGIC;
    Order_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Order_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Order_ce1 : OUT STD_LOGIC;
    Order_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_c_right_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_c_right_ce0 : OUT STD_LOGIC;
    m_c_right_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_s_right_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_s_right_ce0 : OUT STD_LOGIC;
    m_s_right_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    dataA16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataA16_ce0 : OUT STD_LOGIC;
    dataA16_we0 : OUT STD_LOGIC;
    dataA16_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataA16_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    dataA16_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataA16_ce1 : OUT STD_LOGIC;
    dataA16_we1 : OUT STD_LOGIC;
    dataA16_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataA16_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_759_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_759_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_759_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_759_p_ce : OUT STD_LOGIC;
    grp_fu_763_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_763_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_763_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_763_p_ce : OUT STD_LOGIC );
end;


architecture behav of dut_unrollCol_double_16_1_16_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln236_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_226 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln236_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln236_reg_567_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln236_reg_567_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln236_reg_567_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln236_reg_567_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln236_reg_567_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln236_fu_270_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln236_reg_576 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_332_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_591 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal empty_81_fu_346_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_81_reg_597 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln256_fu_361_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln256_reg_603 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln256_1_fu_365_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln256_1_reg_609 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln267_5_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_5_reg_615 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_5_reg_615_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_5_reg_615_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_5_reg_615_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_5_reg_615_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_5_reg_615_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cl_reg_629 : STD_LOGIC_VECTOR (63 downto 0);
    signal sl_reg_635 : STD_LOGIC_VECTOR (63 downto 0);
    signal sl_reg_635_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal dataA16_addr_reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_reg_643_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_reg_643_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_reg_643_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_reg_643_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_4_reg_648 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_4_reg_648_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_4_reg_648_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_4_reg_648_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_4_reg_648_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal m00_reg_653 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal m01_reg_659 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataA16_addr_5_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_5_reg_665_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_5_reg_665_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_5_reg_665_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_5_reg_665_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_6_reg_670 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_6_reg_670_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_6_reg_670_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_6_reg_670_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_6_reg_670_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA16_addr_6_reg_670_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal m10_reg_675 : STD_LOGIC_VECTOR (63 downto 0);
    signal m11_reg_680 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_neg_fu_515_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_neg_reg_685 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_4_neg_fu_524_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_4_neg_reg_690 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_4_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmpMul0_reg_705 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmpMul0_5_reg_710 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmpMul1_reg_715 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmpMul1_5_reg_720 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmpMul0_4_reg_725 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmpMul0_6_reg_730 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmpMul1_4_reg_735 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmpMul1_6_reg_740 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_5_reg_745 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_6_reg_750 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln264_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln266_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln238_1_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln280_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln281_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln329_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln330_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmpSumCS_fu_104 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln238_fu_300_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_tmpSumCS_load : STD_LOGIC_VECTOR (3 downto 0);
    signal l_fu_108 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln236_1_fu_325_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_112 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln236_1_fu_255_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_214_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_218_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_222_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln260_fu_278_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln266_fu_289_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln236_fu_319_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_80_fu_336_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_374_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_388_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln238_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln267_1_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_2_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln268_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln267_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_3_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln267_1_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_3_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_2_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_4_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_464_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_477_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_488_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_501_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal m1_to_int_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_4_to_int_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter5_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to6 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op102_load_state3 : BOOLEAN;
    signal ap_enable_operation_102 : BOOLEAN;
    signal ap_enable_state3_pp0_iter0_stage2 : BOOLEAN;
    signal ap_predicate_op104_load_state4 : BOOLEAN;
    signal ap_enable_operation_104 : BOOLEAN;
    signal ap_enable_state4_pp0_iter0_stage3 : BOOLEAN;
    signal ap_enable_operation_220 : BOOLEAN;
    signal ap_enable_state21_pp0_iter5_stage0 : BOOLEAN;
    signal ap_enable_operation_224 : BOOLEAN;
    signal ap_enable_state22_pp0_iter5_stage1 : BOOLEAN;
    signal ap_predicate_op103_load_state3 : BOOLEAN;
    signal ap_enable_operation_103 : BOOLEAN;
    signal ap_predicate_op105_load_state4 : BOOLEAN;
    signal ap_enable_operation_105 : BOOLEAN;
    signal ap_enable_operation_221 : BOOLEAN;
    signal ap_enable_operation_249 : BOOLEAN;
    signal ap_enable_state26_pp0_iter6_stage1 : BOOLEAN;
    signal ap_predicate_op112_load_state4 : BOOLEAN;
    signal ap_enable_operation_112 : BOOLEAN;
    signal ap_enable_operation_114 : BOOLEAN;
    signal ap_enable_state5_pp0_iter1_stage0 : BOOLEAN;
    signal ap_predicate_op113_load_state4 : BOOLEAN;
    signal ap_enable_operation_113 : BOOLEAN;
    signal ap_enable_operation_115 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_dadd_64ns_64ns_64_6_no_dsp_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_dmul_64ns_64ns_64_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dadd_64ns_64ns_64_6_no_dsp_0_U188 : component dut_dadd_64ns_64ns_64_6_no_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_214_p0,
        din1 => grp_fu_214_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_214_p2);

    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln236_fu_249_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_112 <= add_ln236_1_fu_255_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_112 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    l_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                l_fu_108 <= ap_const_lv4_0;
            elsif (((icmp_ln236_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                l_fu_108 <= select_ln236_1_fu_325_p3;
            end if; 
        end if;
    end process;

    tmpSumCS_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln236_fu_249_p2 = ap_const_lv1_0))) then 
                    tmpSumCS_fu_104 <= add_ln238_fu_300_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    tmpSumCS_fu_104 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                and_ln267_5_reg_615 <= and_ln267_5_fu_453_p2;
                and_ln267_5_reg_615_pp0_iter1_reg <= and_ln267_5_reg_615;
                and_ln267_5_reg_615_pp0_iter2_reg <= and_ln267_5_reg_615_pp0_iter1_reg;
                and_ln267_5_reg_615_pp0_iter3_reg <= and_ln267_5_reg_615_pp0_iter2_reg;
                and_ln267_5_reg_615_pp0_iter4_reg <= and_ln267_5_reg_615_pp0_iter3_reg;
                and_ln267_5_reg_615_pp0_iter5_reg <= and_ln267_5_reg_615_pp0_iter4_reg;
                    empty_81_reg_597(3 downto 1) <= empty_81_fu_346_p2(3 downto 1);
                empty_reg_591 <= empty_fu_332_p1;
                trunc_ln256_1_reg_609 <= trunc_ln256_1_fu_365_p1;
                trunc_ln256_reg_603 <= trunc_ln256_fu_361_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                cl_reg_629 <= m_c_right_q0;
                    dataA16_addr_4_reg_648(7 downto 1) <= zext_ln281_fu_483_p1(8 - 1 downto 0)(7 downto 1);
                    dataA16_addr_4_reg_648_pp0_iter1_reg(7 downto 1) <= dataA16_addr_4_reg_648(7 downto 1);
                    dataA16_addr_4_reg_648_pp0_iter2_reg(7 downto 1) <= dataA16_addr_4_reg_648_pp0_iter1_reg(7 downto 1);
                    dataA16_addr_4_reg_648_pp0_iter3_reg(7 downto 1) <= dataA16_addr_4_reg_648_pp0_iter2_reg(7 downto 1);
                    dataA16_addr_4_reg_648_pp0_iter4_reg(7 downto 1) <= dataA16_addr_4_reg_648_pp0_iter3_reg(7 downto 1);
                    dataA16_addr_reg_643(7 downto 1) <= zext_ln280_fu_472_p1(8 - 1 downto 0)(7 downto 1);
                    dataA16_addr_reg_643_pp0_iter1_reg(7 downto 1) <= dataA16_addr_reg_643(7 downto 1);
                    dataA16_addr_reg_643_pp0_iter2_reg(7 downto 1) <= dataA16_addr_reg_643_pp0_iter1_reg(7 downto 1);
                    dataA16_addr_reg_643_pp0_iter3_reg(7 downto 1) <= dataA16_addr_reg_643_pp0_iter2_reg(7 downto 1);
                    dataA16_addr_reg_643_pp0_iter4_reg(7 downto 1) <= dataA16_addr_reg_643_pp0_iter3_reg(7 downto 1);
                m1_4_neg_reg_690 <= m1_4_neg_fu_524_p2;
                m1_neg_reg_685 <= m1_neg_fu_515_p2;
                sl_reg_635 <= m_s_right_q0;
                sl_reg_635_pp0_iter1_reg <= sl_reg_635;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    dataA16_addr_5_reg_665(7 downto 1) <= zext_ln329_fu_496_p1(8 - 1 downto 0)(7 downto 1);
                    dataA16_addr_5_reg_665_pp0_iter1_reg(7 downto 1) <= dataA16_addr_5_reg_665(7 downto 1);
                    dataA16_addr_5_reg_665_pp0_iter2_reg(7 downto 1) <= dataA16_addr_5_reg_665_pp0_iter1_reg(7 downto 1);
                    dataA16_addr_5_reg_665_pp0_iter3_reg(7 downto 1) <= dataA16_addr_5_reg_665_pp0_iter2_reg(7 downto 1);
                    dataA16_addr_5_reg_665_pp0_iter4_reg(7 downto 1) <= dataA16_addr_5_reg_665_pp0_iter3_reg(7 downto 1);
                    dataA16_addr_6_reg_670(7 downto 1) <= zext_ln330_fu_507_p1(8 - 1 downto 0)(7 downto 1);
                    dataA16_addr_6_reg_670_pp0_iter1_reg(7 downto 1) <= dataA16_addr_6_reg_670(7 downto 1);
                    dataA16_addr_6_reg_670_pp0_iter2_reg(7 downto 1) <= dataA16_addr_6_reg_670_pp0_iter1_reg(7 downto 1);
                    dataA16_addr_6_reg_670_pp0_iter3_reg(7 downto 1) <= dataA16_addr_6_reg_670_pp0_iter2_reg(7 downto 1);
                    dataA16_addr_6_reg_670_pp0_iter4_reg(7 downto 1) <= dataA16_addr_6_reg_670_pp0_iter3_reg(7 downto 1);
                    dataA16_addr_6_reg_670_pp0_iter5_reg(7 downto 1) <= dataA16_addr_6_reg_670_pp0_iter4_reg(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln236_reg_567 <= icmp_ln236_fu_249_p2;
                icmp_ln236_reg_567_pp0_iter1_reg <= icmp_ln236_reg_567;
                icmp_ln236_reg_567_pp0_iter2_reg <= icmp_ln236_reg_567_pp0_iter1_reg;
                icmp_ln236_reg_567_pp0_iter3_reg <= icmp_ln236_reg_567_pp0_iter2_reg;
                icmp_ln236_reg_567_pp0_iter4_reg <= icmp_ln236_reg_567_pp0_iter3_reg;
                icmp_ln236_reg_567_pp0_iter5_reg <= icmp_ln236_reg_567_pp0_iter4_reg;
                icmp_ln238_reg_571 <= icmp_ln238_fu_264_p2;
                select_ln236_reg_576 <= select_ln236_fu_270_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                m00_reg_653 <= dataA16_q1;
                m01_reg_659 <= dataA16_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                m10_reg_675 <= dataA16_q1;
                m11_reg_680 <= dataA16_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then
                reg_226 <= grp_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                sum_5_reg_745 <= grp_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sum_6_reg_750 <= grp_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmpMul0_4_reg_725 <= grp_fu_759_p_dout0;
                tmpMul0_6_reg_730 <= grp_fu_763_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmpMul0_5_reg_710 <= grp_fu_763_p_dout0;
                tmpMul0_reg_705 <= grp_fu_759_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmpMul1_4_reg_735 <= grp_fu_759_p_dout0;
                tmpMul1_6_reg_740 <= grp_fu_763_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmpMul1_5_reg_720 <= grp_fu_763_p_dout0;
                tmpMul1_reg_715 <= grp_fu_759_p_dout0;
            end if;
        end if;
    end process;
    empty_81_reg_597(0) <= '1';
    dataA16_addr_reg_643(0) <= '0';
    dataA16_addr_reg_643_pp0_iter1_reg(0) <= '0';
    dataA16_addr_reg_643_pp0_iter2_reg(0) <= '0';
    dataA16_addr_reg_643_pp0_iter3_reg(0) <= '0';
    dataA16_addr_reg_643_pp0_iter4_reg(0) <= '0';
    dataA16_addr_4_reg_648(0) <= '1';
    dataA16_addr_4_reg_648_pp0_iter1_reg(0) <= '1';
    dataA16_addr_4_reg_648_pp0_iter2_reg(0) <= '1';
    dataA16_addr_4_reg_648_pp0_iter3_reg(0) <= '1';
    dataA16_addr_4_reg_648_pp0_iter4_reg(0) <= '1';
    dataA16_addr_5_reg_665(0) <= '0';
    dataA16_addr_5_reg_665_pp0_iter1_reg(0) <= '0';
    dataA16_addr_5_reg_665_pp0_iter2_reg(0) <= '0';
    dataA16_addr_5_reg_665_pp0_iter3_reg(0) <= '0';
    dataA16_addr_5_reg_665_pp0_iter4_reg(0) <= '0';
    dataA16_addr_6_reg_670(0) <= '1';
    dataA16_addr_6_reg_670_pp0_iter1_reg(0) <= '1';
    dataA16_addr_6_reg_670_pp0_iter2_reg(0) <= '1';
    dataA16_addr_6_reg_670_pp0_iter3_reg(0) <= '1';
    dataA16_addr_6_reg_670_pp0_iter4_reg(0) <= '1';
    dataA16_addr_6_reg_670_pp0_iter5_reg(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter5_stage1, ap_idle_pp0_0to4, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to6, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to6 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    Order_address0 <= zext_ln266_fu_295_p1(4 - 1 downto 0);
    Order_address1 <= zext_ln264_fu_284_p1(4 - 1 downto 0);

    Order_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Order_ce0 <= ap_const_logic_1;
        else 
            Order_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Order_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Order_ce1 <= ap_const_logic_1;
        else 
            Order_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln236_1_fu_255_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln236_fu_319_p2 <= std_logic_vector(unsigned(l_fu_108) + unsigned(ap_const_lv4_1));
    add_ln238_fu_300_p2 <= std_logic_vector(unsigned(select_ln236_fu_270_p3) + unsigned(ap_const_lv4_1));
    and_ln267_1_fu_429_p2 <= (icmp_ln267_2_fu_413_p2 and and_ln267_fu_423_p2);
    and_ln267_2_fu_441_p2 <= (xor_ln267_1_fu_396_p2 and and_ln267_3_fu_435_p2);
    and_ln267_3_fu_435_p2 <= (xor_ln267_fu_382_p2 and icmp_ln268_fu_402_p2);
    and_ln267_4_fu_447_p2 <= (icmp_ln267_3_fu_418_p2 and and_ln267_2_fu_441_p2);
    and_ln267_5_fu_453_p2 <= (and_ln267_4_fu_447_p2 and and_ln267_1_fu_429_p2);
    and_ln267_fu_423_p2 <= (icmp_ln267_fu_369_p2 and icmp_ln267_1_fu_408_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage3_subdone)) or ((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)) or ((ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage2_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln236_reg_567)
    begin
        if (((icmp_ln236_reg_567 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter5_stage1_assign_proc : process(ap_enable_reg_pp0_iter5, icmp_ln236_reg_567_pp0_iter5_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln236_reg_567_pp0_iter5_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter5_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter5_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_102_assign_proc : process(ap_predicate_op102_load_state3)
    begin
                ap_enable_operation_102 <= (ap_predicate_op102_load_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_103_assign_proc : process(ap_predicate_op103_load_state3)
    begin
                ap_enable_operation_103 <= (ap_predicate_op103_load_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_104_assign_proc : process(ap_predicate_op104_load_state4)
    begin
                ap_enable_operation_104 <= (ap_predicate_op104_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_105_assign_proc : process(ap_predicate_op105_load_state4)
    begin
                ap_enable_operation_105 <= (ap_predicate_op105_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_112_assign_proc : process(ap_predicate_op112_load_state4)
    begin
                ap_enable_operation_112 <= (ap_predicate_op112_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_113_assign_proc : process(ap_predicate_op113_load_state4)
    begin
                ap_enable_operation_113 <= (ap_predicate_op113_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_114_assign_proc : process(and_ln267_5_reg_615)
    begin
                ap_enable_operation_114 <= (ap_const_lv1_1 = and_ln267_5_reg_615);
    end process;


    ap_enable_operation_115_assign_proc : process(and_ln267_5_reg_615)
    begin
                ap_enable_operation_115 <= (ap_const_lv1_1 = and_ln267_5_reg_615);
    end process;


    ap_enable_operation_220_assign_proc : process(and_ln267_5_reg_615_pp0_iter4_reg)
    begin
                ap_enable_operation_220 <= (ap_const_lv1_1 = and_ln267_5_reg_615_pp0_iter4_reg);
    end process;


    ap_enable_operation_221_assign_proc : process(and_ln267_5_reg_615_pp0_iter4_reg)
    begin
                ap_enable_operation_221 <= (ap_const_lv1_1 = and_ln267_5_reg_615_pp0_iter4_reg);
    end process;


    ap_enable_operation_224_assign_proc : process(and_ln267_5_reg_615_pp0_iter4_reg)
    begin
                ap_enable_operation_224 <= (ap_const_lv1_1 = and_ln267_5_reg_615_pp0_iter4_reg);
    end process;


    ap_enable_operation_249_assign_proc : process(and_ln267_5_reg_615_pp0_iter5_reg)
    begin
                ap_enable_operation_249 <= (ap_const_lv1_1 = and_ln267_5_reg_615_pp0_iter5_reg);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_enable_state21_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
                ap_enable_state21_pp0_iter5_stage0 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state22_pp0_iter5_stage1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state22_pp0_iter5_stage1 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state26_pp0_iter6_stage1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state26_pp0_iter6_stage1 <= ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state3_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
                ap_enable_state3_pp0_iter0_stage2 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_enable_state4_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3)
    begin
                ap_enable_state4_pp0_iter0_stage3 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_enable_state5_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state5_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to6 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_predicate_op102_load_state3_assign_proc : process(icmp_ln236_reg_567, and_ln267_5_reg_615)
    begin
                ap_predicate_op102_load_state3 <= ((ap_const_lv1_1 = and_ln267_5_reg_615) and (icmp_ln236_reg_567 = ap_const_lv1_0));
    end process;


    ap_predicate_op103_load_state3_assign_proc : process(icmp_ln236_reg_567, and_ln267_5_reg_615)
    begin
                ap_predicate_op103_load_state3 <= ((ap_const_lv1_1 = and_ln267_5_reg_615) and (icmp_ln236_reg_567 = ap_const_lv1_0));
    end process;


    ap_predicate_op104_load_state4_assign_proc : process(icmp_ln236_reg_567, and_ln267_5_reg_615)
    begin
                ap_predicate_op104_load_state4 <= ((ap_const_lv1_1 = and_ln267_5_reg_615) and (icmp_ln236_reg_567 = ap_const_lv1_0));
    end process;


    ap_predicate_op105_load_state4_assign_proc : process(icmp_ln236_reg_567, and_ln267_5_reg_615)
    begin
                ap_predicate_op105_load_state4 <= ((ap_const_lv1_1 = and_ln267_5_reg_615) and (icmp_ln236_reg_567 = ap_const_lv1_0));
    end process;


    ap_predicate_op112_load_state4_assign_proc : process(icmp_ln236_reg_567, and_ln267_5_reg_615)
    begin
                ap_predicate_op112_load_state4 <= ((ap_const_lv1_1 = and_ln267_5_reg_615) and (icmp_ln236_reg_567 = ap_const_lv1_0));
    end process;


    ap_predicate_op113_load_state4_assign_proc : process(icmp_ln236_reg_567, and_ln267_5_reg_615)
    begin
                ap_predicate_op113_load_state4 <= ((ap_const_lv1_1 = and_ln267_5_reg_615) and (icmp_ln236_reg_567 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_tmpSumCS_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmpSumCS_fu_104, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_tmpSumCS_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_tmpSumCS_load <= tmpSumCS_fu_104;
        end if; 
    end process;


    dataA16_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, dataA16_addr_4_reg_648_pp0_iter4_reg, dataA16_addr_6_reg_670_pp0_iter5_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln281_fu_483_p1, ap_block_pp0_stage3, zext_ln330_fu_507_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dataA16_address0 <= dataA16_addr_6_reg_670_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dataA16_address0 <= dataA16_addr_4_reg_648_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dataA16_address0 <= zext_ln330_fu_507_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dataA16_address0 <= zext_ln281_fu_483_p1(8 - 1 downto 0);
        else 
            dataA16_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dataA16_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, dataA16_addr_reg_643_pp0_iter4_reg, dataA16_addr_5_reg_665_pp0_iter4_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln280_fu_472_p1, ap_block_pp0_stage2, zext_ln329_fu_496_p1, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dataA16_address1 <= dataA16_addr_5_reg_665_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dataA16_address1 <= dataA16_addr_reg_643_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dataA16_address1 <= zext_ln329_fu_496_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dataA16_address1 <= zext_ln280_fu_472_p1(8 - 1 downto 0);
        else 
            dataA16_address1 <= "XXXXXXXX";
        end if; 
    end process;


    dataA16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            dataA16_ce0 <= ap_const_logic_1;
        else 
            dataA16_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dataA16_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            dataA16_ce1 <= ap_const_logic_1;
        else 
            dataA16_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dataA16_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, sum_5_reg_745, sum_6_reg_750, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dataA16_d0 <= sum_6_reg_750;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dataA16_d0 <= sum_5_reg_745;
        else 
            dataA16_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dataA16_d1 <= reg_226;

    dataA16_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, and_ln267_5_reg_615_pp0_iter4_reg, and_ln267_5_reg_615_pp0_iter5_reg)
    begin
        if ((((ap_const_lv1_1 = and_ln267_5_reg_615_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_lv1_1 = and_ln267_5_reg_615_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dataA16_we0 <= ap_const_logic_1;
        else 
            dataA16_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dataA16_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, and_ln267_5_reg_615_pp0_iter4_reg)
    begin
        if ((((ap_const_lv1_1 = and_ln267_5_reg_615_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_lv1_1 = and_ln267_5_reg_615_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dataA16_we1 <= ap_const_logic_1;
        else 
            dataA16_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_80_fu_336_p2 <= std_logic_vector(shift_left(unsigned(select_ln236_1_fu_325_p3),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    empty_81_fu_346_p2 <= (empty_80_fu_336_p2 or ap_const_lv4_1);
    empty_fu_332_p1 <= select_ln236_1_fu_325_p3(3 - 1 downto 0);

    grp_fu_214_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, tmpMul0_reg_705, tmpMul0_5_reg_710, tmpMul0_4_reg_725, tmpMul0_6_reg_730, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_214_p0 <= tmpMul0_6_reg_730;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_214_p0 <= tmpMul0_4_reg_725;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_214_p0 <= tmpMul0_5_reg_710;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_214_p0 <= tmpMul0_reg_705;
        else 
            grp_fu_214_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_214_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, tmpMul1_reg_715, tmpMul1_5_reg_720, tmpMul1_4_reg_735, tmpMul1_6_reg_740, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_214_p1 <= tmpMul1_6_reg_740;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_214_p1 <= tmpMul1_4_reg_735;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_214_p1 <= tmpMul1_5_reg_720;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_214_p1 <= tmpMul1_reg_715;
        else 
            grp_fu_214_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_218_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, sl_reg_635_pp0_iter1_reg, m00_reg_653, m10_reg_675, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_218_p0 <= sl_reg_635_pp0_iter1_reg;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_218_p0 <= m10_reg_675;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_218_p0 <= m00_reg_653;
        else 
            grp_fu_218_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_218_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, cl_reg_629, sl_reg_635, m1_fu_530_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_218_p1 <= m1_fu_530_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_218_p1 <= sl_reg_635;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_218_p1 <= cl_reg_629;
        else 
            grp_fu_218_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, sl_reg_635_pp0_iter1_reg, m01_reg_659, m11_reg_680, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_222_p0 <= sl_reg_635_pp0_iter1_reg;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_222_p0 <= m11_reg_680;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_222_p0 <= m01_reg_659;
        else 
            grp_fu_222_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, cl_reg_629, sl_reg_635, m1_4_fu_534_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_222_p1 <= m1_4_fu_534_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_222_p1 <= sl_reg_635;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_222_p1 <= cl_reg_629;
        else 
            grp_fu_222_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_759_p_ce <= ap_const_logic_1;
    grp_fu_759_p_din0 <= grp_fu_218_p0;
    grp_fu_759_p_din1 <= grp_fu_218_p1;
    grp_fu_763_p_ce <= ap_const_logic_1;
    grp_fu_763_p_din0 <= grp_fu_222_p0;
    grp_fu_763_p_din1 <= grp_fu_222_p1;
    icmp_ln236_fu_249_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_40) else "0";
    icmp_ln238_fu_264_p2 <= "1" when (ap_sig_allocacmp_tmpSumCS_load = ap_const_lv4_8) else "0";
    icmp_ln267_1_fu_408_p2 <= "1" when (signed(Order_q1) < signed(lda)) else "0";
    icmp_ln267_2_fu_413_p2 <= "1" when (signed(p_cast_fu_342_p1) < signed(lda)) else "0";
    icmp_ln267_3_fu_418_p2 <= "1" when (signed(zext_ln238_fu_352_p1) < signed(lda)) else "0";
    icmp_ln267_fu_369_p2 <= "1" when (signed(Order_q0) < signed(lda)) else "0";
    icmp_ln268_fu_402_p2 <= "0" when (Order_q1 = Order_q0) else "1";
    m1_4_fu_534_p1 <= m1_4_neg_reg_690;
    m1_4_neg_fu_524_p2 <= (m1_4_to_int_fu_521_p1 xor ap_const_lv64_8000000000000000);
    m1_4_to_int_fu_521_p1 <= m01_reg_659;
    m1_fu_530_p1 <= m1_neg_reg_685;
    m1_neg_fu_515_p2 <= (m1_to_int_fu_512_p1 xor ap_const_lv64_8000000000000000);
    m1_to_int_fu_512_p1 <= m00_reg_653;
    m_c_right_address0 <= zext_ln238_1_fu_356_p1(4 - 1 downto 0);

    m_c_right_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_c_right_ce0 <= ap_const_logic_1;
        else 
            m_c_right_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_s_right_address0 <= zext_ln238_1_fu_356_p1(4 - 1 downto 0);

    m_s_right_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_s_right_ce0 <= ap_const_logic_1;
        else 
            m_s_right_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln266_fu_289_p2 <= (shl_ln260_fu_278_p2 or ap_const_lv4_1);
    p_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_80_fu_336_p2),32));
    select_ln236_1_fu_325_p3 <= 
        add_ln236_fu_319_p2 when (icmp_ln238_reg_571(0) = '1') else 
        l_fu_108;
    select_ln236_fu_270_p3 <= 
        ap_const_lv4_0 when (icmp_ln238_fu_264_p2(0) = '1') else 
        ap_sig_allocacmp_tmpSumCS_load;
    shl_ln260_fu_278_p2 <= std_logic_vector(shift_left(unsigned(select_ln236_fu_270_p3),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    tmp_2_fu_388_p3 <= Order_q0(31 downto 31);
    tmp_7_fu_464_p4 <= ((trunc_ln256_reg_603 & empty_reg_591) & ap_const_lv1_0);
    tmp_8_fu_477_p3 <= (trunc_ln256_reg_603 & empty_81_reg_597);
    tmp_9_fu_488_p4 <= ((trunc_ln256_1_reg_609 & empty_reg_591) & ap_const_lv1_0);
    tmp_fu_374_p3 <= Order_q1(31 downto 31);
    tmp_s_fu_501_p3 <= (trunc_ln256_1_reg_609 & empty_81_reg_597);
    trunc_ln256_1_fu_365_p1 <= Order_q0(4 - 1 downto 0);
    trunc_ln256_fu_361_p1 <= Order_q1(4 - 1 downto 0);
    xor_ln267_1_fu_396_p2 <= (tmp_2_fu_388_p3 xor ap_const_lv1_1);
    xor_ln267_fu_382_p2 <= (tmp_fu_374_p3 xor ap_const_lv1_1);
    zext_ln238_1_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln236_reg_576),64));
    zext_ln238_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_81_fu_346_p2),32));
    zext_ln264_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln260_fu_278_p2),64));
    zext_ln266_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln266_fu_289_p2),64));
    zext_ln280_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_464_p4),64));
    zext_ln281_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_477_p3),64));
    zext_ln329_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_488_p4),64));
    zext_ln330_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_501_p3),64));
end behav;

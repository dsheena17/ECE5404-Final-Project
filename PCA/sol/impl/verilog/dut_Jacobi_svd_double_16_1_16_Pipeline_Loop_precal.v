// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dut_Jacobi_svd_double_16_1_16_Pipeline_Loop_precal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_2,
        Order_address0,
        Order_ce0,
        Order_we0,
        Order_d0,
        Order_address1,
        Order_ce1,
        Order_we1,
        Order_d1,
        lshr_ln,
        tmpOrder_address0,
        tmpOrder_ce0,
        tmpOrder_q0,
        tmpOrder_address1,
        tmpOrder_ce1,
        tmpOrder_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] i_2;
output  [7:0] Order_address0;
output   Order_ce0;
output   Order_we0;
output  [31:0] Order_d0;
output  [7:0] Order_address1;
output   Order_ce1;
output   Order_we1;
output  [31:0] Order_d1;
input  [30:0] lshr_ln;
output  [3:0] tmpOrder_address0;
output   tmpOrder_ce0;
input  [31:0] tmpOrder_q0;
output  [3:0] tmpOrder_address1;
output   tmpOrder_ce1;
input  [31:0] tmpOrder_q1;

reg ap_idle;
reg Order_ce0;
reg Order_we0;
reg Order_ce1;
reg Order_we1;
reg tmpOrder_ce0;
reg tmpOrder_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln151_fu_126_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln154_fu_142_p1;
reg   [2:0] trunc_ln154_reg_234;
reg   [2:0] trunc_ln154_reg_234_pp0_iter1_reg;
wire   [3:0] or_ln155_fu_157_p2;
reg   [3:0] or_ln155_reg_239;
reg   [3:0] or_ln155_reg_239_pp0_iter1_reg;
wire   [0:0] icmp_ln156_fu_168_p2;
reg   [0:0] icmp_ln156_reg_244;
wire   [31:0] select_ln156_fu_179_p3;
reg   [31:0] select_ln156_reg_260;
wire   [31:0] select_ln156_1_fu_186_p3;
reg   [31:0] select_ln156_1_reg_265;
wire   [63:0] zext_ln155_fu_152_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln156_fu_163_p1;
wire   [63:0] zext_ln161_fu_201_p1;
wire   [63:0] zext_ln162_fu_212_p1;
reg   [3:0] j_fu_52;
wire   [3:0] add_ln151_fu_132_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_5;
wire   [3:0] shl_ln154_fu_146_p2;
wire   [30:0] zext_ln151_fu_138_p1;
wire   [7:0] tmp_s_fu_193_p4;
wire   [7:0] tmp_28_fu_206_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_fu_52 = 4'd0;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln151_fu_126_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_52 <= add_ln151_fu_132_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_52 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln156_reg_244 <= icmp_ln156_fu_168_p2;
        or_ln155_reg_239[3 : 1] <= or_ln155_fu_157_p2[3 : 1];
        or_ln155_reg_239_pp0_iter1_reg[3 : 1] <= or_ln155_reg_239[3 : 1];
        select_ln156_1_reg_265 <= select_ln156_1_fu_186_p3;
        select_ln156_reg_260 <= select_ln156_fu_179_p3;
        trunc_ln154_reg_234 <= trunc_ln154_fu_142_p1;
        trunc_ln154_reg_234_pp0_iter1_reg <= trunc_ln154_reg_234;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Order_ce0 = 1'b1;
    end else begin
        Order_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Order_ce1 = 1'b1;
    end else begin
        Order_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Order_we0 = 1'b1;
    end else begin
        Order_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Order_we1 = 1'b1;
    end else begin
        Order_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_126_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_5 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_5 = j_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmpOrder_ce0 = 1'b1;
    end else begin
        tmpOrder_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmpOrder_ce1 = 1'b1;
    end else begin
        tmpOrder_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Order_address0 = zext_ln162_fu_212_p1;

assign Order_address1 = zext_ln161_fu_201_p1;

assign Order_d0 = select_ln156_1_reg_265;

assign Order_d1 = select_ln156_reg_260;

assign add_ln151_fu_132_p2 = (ap_sig_allocacmp_j_5 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln151_fu_126_p2 = ((ap_sig_allocacmp_j_5 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln156_fu_168_p2 = (($signed(zext_ln151_fu_138_p1) < $signed(lshr_ln)) ? 1'b1 : 1'b0);

assign or_ln155_fu_157_p2 = (shl_ln154_fu_146_p2 | 4'd1);

assign select_ln156_1_fu_186_p3 = ((icmp_ln156_reg_244[0:0] == 1'b1) ? tmpOrder_q0 : 32'd16);

assign select_ln156_fu_179_p3 = ((icmp_ln156_reg_244[0:0] == 1'b1) ? tmpOrder_q1 : 32'd16);

assign shl_ln154_fu_146_p2 = ap_sig_allocacmp_j_5 << 4'd1;

assign tmpOrder_address0 = zext_ln156_fu_163_p1;

assign tmpOrder_address1 = zext_ln155_fu_152_p1;

assign tmp_28_fu_206_p3 = {{i_2}, {or_ln155_reg_239_pp0_iter1_reg}};

assign tmp_s_fu_193_p4 = {{{i_2}, {trunc_ln154_reg_234_pp0_iter1_reg}}, {1'd0}};

assign trunc_ln154_fu_142_p1 = ap_sig_allocacmp_j_5[2:0];

assign zext_ln151_fu_138_p1 = ap_sig_allocacmp_j_5;

assign zext_ln155_fu_152_p1 = shl_ln154_fu_146_p2;

assign zext_ln156_fu_163_p1 = or_ln155_fu_157_p2;

assign zext_ln161_fu_201_p1 = tmp_s_fu_193_p4;

assign zext_ln162_fu_212_p1 = tmp_28_fu_206_p3;

always @ (posedge ap_clk) begin
    or_ln155_reg_239[0] <= 1'b1;
    or_ln155_reg_239_pp0_iter1_reg[0] <= 1'b1;
end

endmodule //dut_Jacobi_svd_double_16_1_16_Pipeline_Loop_precal

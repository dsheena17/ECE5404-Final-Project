// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dut_Jacobi_svd_double_16_1_16_Pipeline_VITIS_LOOP_1005_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        div,
        cmp5,
        i_3,
        Order_address0,
        Order_ce0,
        Order_q0,
        Order_address1,
        Order_ce1,
        Order_q1,
        dataA_address0,
        dataA_ce0,
        dataA_q0,
        flag_out,
        flag_out_ap_vld,
        grp_fu_1227_p_din0,
        grp_fu_1227_p_din1,
        grp_fu_1227_p_opcode,
        grp_fu_1227_p_dout0,
        grp_fu_1227_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] div;
input  [0:0] cmp5;
input  [3:0] i_3;
output  [7:0] Order_address0;
output   Order_ce0;
input  [31:0] Order_q0;
output  [7:0] Order_address1;
output   Order_ce1;
input  [31:0] Order_q1;
output  [7:0] dataA_address0;
output   dataA_ce0;
input  [63:0] dataA_q0;
output  [31:0] flag_out;
output   flag_out_ap_vld;
output  [63:0] grp_fu_1227_p_din0;
output  [63:0] grp_fu_1227_p_din1;
output  [4:0] grp_fu_1227_p_opcode;
input  [0:0] grp_fu_1227_p_dout0;
output   grp_fu_1227_p_ce;

reg ap_idle;
reg Order_ce0;
reg Order_ce1;
reg dataA_ce0;
reg flag_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1005_fu_165_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1005_reg_369;
reg   [0:0] icmp_ln1005_reg_369_pp0_iter1_reg;
reg   [0:0] icmp_ln1005_reg_369_pp0_iter2_reg;
reg   [0:0] icmp_ln1005_reg_369_pp0_iter3_reg;
reg   [0:0] icmp_ln1005_reg_369_pp0_iter4_reg;
wire   [0:0] icmp_ln1008_fu_181_p2;
reg   [0:0] icmp_ln1008_reg_373;
reg   [0:0] icmp_ln1008_reg_373_pp0_iter1_reg;
reg   [0:0] icmp_ln1008_reg_373_pp0_iter2_reg;
reg   [0:0] icmp_ln1008_reg_373_pp0_iter3_reg;
reg   [0:0] icmp_ln1008_reg_373_pp0_iter4_reg;
reg   [0:0] icmp_ln1008_reg_373_pp0_iter5_reg;
wire   [7:0] add_ln1017_fu_252_p2;
reg   [7:0] add_ln1017_reg_388;
reg   [63:0] dc_reg_398;
wire   [63:0] bitcast_ln497_fu_281_p1;
wire   [0:0] icmp_ln1017_fu_296_p2;
reg   [0:0] icmp_ln1017_reg_408;
reg   [0:0] icmp_ln1017_reg_408_pp0_iter5_reg;
wire   [0:0] icmp_ln1017_1_fu_302_p2;
reg   [0:0] icmp_ln1017_1_reg_413;
reg   [0:0] icmp_ln1017_1_reg_413_pp0_iter5_reg;
reg   [0:0] tmp_16_reg_418;
wire   [63:0] zext_ln1010_fu_207_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1011_fu_226_p1;
wire   [63:0] zext_ln1017_fu_258_p1;
reg   [31:0] flag_fu_76;
wire   [31:0] flag_2_fu_332_p3;
wire    ap_loop_init;
reg   [3:0] j_2_fu_80;
wire   [3:0] add_ln1005_fu_171_p2;
reg   [3:0] ap_sig_allocacmp_j;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln1005_fu_177_p1;
wire   [2:0] trunc_ln1010_fu_187_p1;
wire   [7:0] tmp_s_fu_197_p4;
wire   [3:0] shl_ln1010_fu_191_p2;
wire   [3:0] or_ln1011_fu_212_p2;
wire   [7:0] tmp_26_fu_218_p3;
wire   [3:0] trunc_ln1009_fu_236_p1;
wire   [7:0] tmp_27_fu_240_p3;
wire   [7:0] trunc_ln1017_fu_248_p1;
wire   [63:0] data_fu_262_p1;
wire   [62:0] trunc_ln479_fu_265_p1;
wire   [63:0] t_fu_273_p3;
wire   [10:0] tmp_15_fu_286_p4;
wire   [51:0] trunc_ln1017_1_fu_269_p1;
wire   [0:0] or_ln1017_fu_315_p2;
wire   [0:0] and_ln1017_fu_319_p2;
wire   [0:0] and_ln1008_fu_311_p2;
wire   [31:0] flag_1_fu_324_p3;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 flag_fu_76 = 32'd0;
#0 j_2_fu_80 = 4'd0;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            flag_fu_76 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            flag_fu_76 <= flag_2_fu_332_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1005_fu_165_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_2_fu_80 <= add_ln1005_fu_171_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_2_fu_80 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln1017_reg_388 <= add_ln1017_fu_252_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln1005_reg_369 <= icmp_ln1005_fu_165_p2;
        icmp_ln1005_reg_369_pp0_iter1_reg <= icmp_ln1005_reg_369;
        icmp_ln1008_reg_373 <= icmp_ln1008_fu_181_p2;
        icmp_ln1008_reg_373_pp0_iter1_reg <= icmp_ln1008_reg_373;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        dc_reg_398 <= dataA_q0;
        icmp_ln1005_reg_369_pp0_iter2_reg <= icmp_ln1005_reg_369_pp0_iter1_reg;
        icmp_ln1005_reg_369_pp0_iter3_reg <= icmp_ln1005_reg_369_pp0_iter2_reg;
        icmp_ln1005_reg_369_pp0_iter4_reg <= icmp_ln1005_reg_369_pp0_iter3_reg;
        icmp_ln1008_reg_373_pp0_iter2_reg <= icmp_ln1008_reg_373_pp0_iter1_reg;
        icmp_ln1008_reg_373_pp0_iter3_reg <= icmp_ln1008_reg_373_pp0_iter2_reg;
        icmp_ln1008_reg_373_pp0_iter4_reg <= icmp_ln1008_reg_373_pp0_iter3_reg;
        icmp_ln1008_reg_373_pp0_iter5_reg <= icmp_ln1008_reg_373_pp0_iter4_reg;
        icmp_ln1017_1_reg_413 <= icmp_ln1017_1_fu_302_p2;
        icmp_ln1017_1_reg_413_pp0_iter5_reg <= icmp_ln1017_1_reg_413;
        icmp_ln1017_reg_408 <= icmp_ln1017_fu_296_p2;
        icmp_ln1017_reg_408_pp0_iter5_reg <= icmp_ln1017_reg_408;
        tmp_16_reg_418 <= grp_fu_1227_p_dout0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Order_ce0 = 1'b1;
    end else begin
        Order_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Order_ce1 = 1'b1;
    end else begin
        Order_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1005_fu_165_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j = 4'd0;
    end else begin
        ap_sig_allocacmp_j = j_2_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dataA_ce0 = 1'b1;
    end else begin
        dataA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1005_reg_369_pp0_iter4_reg == 1'd1))) begin
        flag_out_ap_vld = 1'b1;
    end else begin
        flag_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Order_address0 = zext_ln1011_fu_226_p1;

assign Order_address1 = zext_ln1010_fu_207_p1;

assign add_ln1005_fu_171_p2 = (ap_sig_allocacmp_j + 4'd1);

assign add_ln1017_fu_252_p2 = (tmp_27_fu_240_p3 + trunc_ln1017_fu_248_p1);

assign and_ln1008_fu_311_p2 = (icmp_ln1008_reg_373_pp0_iter5_reg & cmp5);

assign and_ln1017_fu_319_p2 = (tmp_16_reg_418 & or_ln1017_fu_315_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln497_fu_281_p1 = t_fu_273_p3;

assign dataA_address0 = zext_ln1017_fu_258_p1;

assign data_fu_262_p1 = dc_reg_398;

assign flag_1_fu_324_p3 = ((and_ln1017_fu_319_p2[0:0] == 1'b1) ? 32'd1 : flag_fu_76);

assign flag_2_fu_332_p3 = ((and_ln1008_fu_311_p2[0:0] == 1'b1) ? flag_1_fu_324_p3 : flag_fu_76);

assign flag_out = flag_fu_76;

assign grp_fu_1227_p_ce = 1'b1;

assign grp_fu_1227_p_din0 = bitcast_ln497_fu_281_p1;

assign grp_fu_1227_p_din1 = 64'd4366153660655693663;

assign grp_fu_1227_p_opcode = 5'd2;

assign icmp_ln1005_fu_165_p2 = ((ap_sig_allocacmp_j == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln1008_fu_181_p2 = (($signed(zext_ln1005_fu_177_p1) < $signed(div)) ? 1'b1 : 1'b0);

assign icmp_ln1017_1_fu_302_p2 = ((trunc_ln1017_1_fu_269_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1017_fu_296_p2 = ((tmp_15_fu_286_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln1011_fu_212_p2 = (shl_ln1010_fu_191_p2 | 4'd1);

assign or_ln1017_fu_315_p2 = (icmp_ln1017_reg_408_pp0_iter5_reg | icmp_ln1017_1_reg_413_pp0_iter5_reg);

assign shl_ln1010_fu_191_p2 = ap_sig_allocacmp_j << 4'd1;

assign t_fu_273_p3 = {{1'd0}, {trunc_ln479_fu_265_p1}};

assign tmp_15_fu_286_p4 = {{data_fu_262_p1[62:52]}};

assign tmp_26_fu_218_p3 = {{i_3}, {or_ln1011_fu_212_p2}};

assign tmp_27_fu_240_p3 = {{trunc_ln1009_fu_236_p1}, {4'd0}};

assign tmp_s_fu_197_p4 = {{{i_3}, {trunc_ln1010_fu_187_p1}}, {1'd0}};

assign trunc_ln1009_fu_236_p1 = Order_q1[3:0];

assign trunc_ln1010_fu_187_p1 = ap_sig_allocacmp_j[2:0];

assign trunc_ln1017_1_fu_269_p1 = data_fu_262_p1[51:0];

assign trunc_ln1017_fu_248_p1 = Order_q0[7:0];

assign trunc_ln479_fu_265_p1 = data_fu_262_p1[62:0];

assign zext_ln1005_fu_177_p1 = ap_sig_allocacmp_j;

assign zext_ln1010_fu_207_p1 = tmp_s_fu_197_p4;

assign zext_ln1011_fu_226_p1 = tmp_26_fu_218_p3;

assign zext_ln1017_fu_258_p1 = add_ln1017_reg_388;

endmodule //dut_Jacobi_svd_double_16_1_16_Pipeline_VITIS_LOOP_1005_1

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dut_implement_Pipeline_Loop_init_A_VITIS_LOOP_91_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        standarisedData_address0,
        standarisedData_ce0,
        standarisedData_q0,
        dataA_2D_address0,
        dataA_2D_ce0,
        dataA_2D_we0,
        dataA_2D_d0,
        noVars,
        empty,
        eigVals_address0,
        eigVals_ce0,
        eigVals_we0,
        eigVals_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] standarisedData_address0;
output   standarisedData_ce0;
input  [63:0] standarisedData_q0;
output  [7:0] dataA_2D_address0;
output   dataA_2D_ce0;
output   dataA_2D_we0;
output  [63:0] dataA_2D_d0;
input  [31:0] noVars;
input  [7:0] empty;
output  [3:0] eigVals_address0;
output   eigVals_ce0;
output   eigVals_we0;
output  [63:0] eigVals_d0;

reg ap_idle;
reg standarisedData_ce0;
reg[7:0] dataA_2D_address0;
reg dataA_2D_ce0;
reg dataA_2D_we0;
reg[63:0] dataA_2D_d0;
reg eigVals_ce0;
reg eigVals_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln89_fu_152_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln89_fu_182_p3;
reg   [4:0] select_ln89_reg_337;
wire   [4:0] select_ln89_1_fu_190_p3;
reg   [4:0] select_ln89_1_reg_343;
wire   [3:0] trunc_ln89_fu_198_p1;
reg   [3:0] trunc_ln89_reg_350;
wire   [0:0] and_ln94_fu_222_p2;
reg   [0:0] and_ln94_reg_355;
reg   [0:0] and_ln94_reg_355_pp0_iter1_reg;
reg   [0:0] and_ln94_reg_355_pp0_iter2_reg;
reg   [0:0] and_ln94_reg_355_pp0_iter3_reg;
reg   [7:0] dataA_2D_addr_reg_359;
reg   [7:0] dataA_2D_addr_reg_359_pp0_iter2_reg;
reg   [7:0] dataA_2D_addr_reg_359_pp0_iter3_reg;
reg   [7:0] dataA_2D_addr_1_reg_364;
reg   [7:0] dataA_2D_addr_1_reg_364_pp0_iter2_reg;
reg   [7:0] dataA_2D_addr_1_reg_364_pp0_iter3_reg;
wire   [0:0] icmp_ln96_fu_293_p2;
reg   [0:0] icmp_ln96_reg_369;
reg   [0:0] icmp_ln96_reg_369_pp0_iter2_reg;
reg   [0:0] icmp_ln96_reg_369_pp0_iter3_reg;
wire   [7:0] add_ln95_fu_297_p2;
reg   [7:0] add_ln95_reg_373;
reg   [63:0] standarisedData_load_reg_383;
wire   [63:0] p_cast_fu_269_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln89_fu_249_p1;
wire   [63:0] zext_ln95_2_fu_288_p1;
wire   [63:0] zext_ln95_fu_303_p1;
reg   [4:0] j_fu_62;
wire   [4:0] add_ln91_fu_228_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [4:0] i_fu_66;
reg   [4:0] ap_sig_allocacmp_i_load;
reg   [8:0] indvar_flatten_fu_70;
wire   [8:0] add_ln89_1_fu_158_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln91_fu_176_p2;
wire   [4:0] add_ln89_fu_170_p2;
wire   [31:0] zext_ln89_1_fu_202_p1;
wire   [31:0] zext_ln91_fu_212_p1;
wire   [0:0] cmp6_i_fu_206_p2;
wire   [0:0] icmp_ln94_fu_216_p2;
wire   [7:0] tmp_11_fu_256_p3;
wire   [7:0] select_ln89_1_cast1_fu_253_p1;
wire   [7:0] empty_83_fu_263_p2;
wire   [4:0] empty_84_fu_274_p1;
wire   [7:0] zext_ln95_1_fu_279_p1;
wire   [7:0] add_ln95_1_fu_282_p2;
wire   [7:0] empty_84_fu_274_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 j_fu_62 = 5'd0;
#0 i_fu_66 = 5'd0;
#0 indvar_flatten_fu_70 = 9'd0;
#0 ap_done_reg = 1'b0;
end

dut_mul_8s_5ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mul_8s_5ns_8_1_1_U95(
    .din0(empty),
    .din1(empty_84_fu_274_p1),
    .dout(empty_84_fu_274_p2)
);

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln89_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_66 <= select_ln89_1_fu_190_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln89_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_70 <= add_ln89_1_fu_158_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln89_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_62 <= add_ln91_fu_228_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_62 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln95_reg_373 <= add_ln95_fu_297_p2;
        and_ln94_reg_355 <= and_ln94_fu_222_p2;
        and_ln94_reg_355_pp0_iter1_reg <= and_ln94_reg_355;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        dataA_2D_addr_1_reg_364 <= zext_ln95_2_fu_288_p1;
        dataA_2D_addr_reg_359 <= p_cast_fu_269_p1;
        icmp_ln96_reg_369 <= icmp_ln96_fu_293_p2;
        select_ln89_1_reg_343 <= select_ln89_1_fu_190_p3;
        select_ln89_reg_337 <= select_ln89_fu_182_p3;
        trunc_ln89_reg_350 <= trunc_ln89_fu_198_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln94_reg_355_pp0_iter2_reg <= and_ln94_reg_355_pp0_iter1_reg;
        and_ln94_reg_355_pp0_iter3_reg <= and_ln94_reg_355_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        dataA_2D_addr_1_reg_364_pp0_iter2_reg <= dataA_2D_addr_1_reg_364;
        dataA_2D_addr_1_reg_364_pp0_iter3_reg <= dataA_2D_addr_1_reg_364_pp0_iter2_reg;
        dataA_2D_addr_reg_359_pp0_iter2_reg <= dataA_2D_addr_reg_359;
        dataA_2D_addr_reg_359_pp0_iter3_reg <= dataA_2D_addr_reg_359_pp0_iter2_reg;
        icmp_ln96_reg_369_pp0_iter2_reg <= icmp_ln96_reg_369;
        icmp_ln96_reg_369_pp0_iter3_reg <= icmp_ln96_reg_369_pp0_iter2_reg;
        standarisedData_load_reg_383 <= standarisedData_q0;
    end
end

always @ (*) begin
    if (((icmp_ln89_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'd0 == and_ln94_reg_355_pp0_iter3_reg) & (icmp_ln96_reg_369_pp0_iter3_reg == 1'd1))) begin
        dataA_2D_address0 = dataA_2D_addr_reg_359_pp0_iter3_reg;
    end else if ((((1'd1 == and_ln94_reg_355_pp0_iter3_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'd0 == and_ln94_reg_355_pp0_iter3_reg) & (icmp_ln96_reg_369_pp0_iter3_reg == 1'd0)))) begin
        dataA_2D_address0 = dataA_2D_addr_1_reg_364_pp0_iter3_reg;
    end else begin
        dataA_2D_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'd0 == and_ln94_reg_355_pp0_iter3_reg) & (icmp_ln96_reg_369_pp0_iter3_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'd0 == and_ln94_reg_355_pp0_iter3_reg) & (icmp_ln96_reg_369_pp0_iter3_reg == 1'd0)) | ((1'd1 == and_ln94_reg_355_pp0_iter3_reg) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        dataA_2D_ce0 = 1'b1;
    end else begin
        dataA_2D_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        if ((1'd1 == and_ln94_reg_355_pp0_iter3_reg)) begin
            dataA_2D_d0 = standarisedData_load_reg_383;
        end else if (((1'd0 == and_ln94_reg_355_pp0_iter3_reg) & (icmp_ln96_reg_369_pp0_iter3_reg == 1'd1))) begin
            dataA_2D_d0 = 64'd4607182418800017408;
        end else if (((1'd0 == and_ln94_reg_355_pp0_iter3_reg) & (icmp_ln96_reg_369_pp0_iter3_reg == 1'd0))) begin
            dataA_2D_d0 = 64'd0;
        end else begin
            dataA_2D_d0 = 'bx;
        end
    end else begin
        dataA_2D_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'd0 == and_ln94_reg_355_pp0_iter3_reg) & (icmp_ln96_reg_369_pp0_iter3_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'd0 == and_ln94_reg_355_pp0_iter3_reg) & (icmp_ln96_reg_369_pp0_iter3_reg == 1'd0)) | ((1'd1 == and_ln94_reg_355_pp0_iter3_reg) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        dataA_2D_we0 = 1'b1;
    end else begin
        dataA_2D_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        eigVals_ce0 = 1'b1;
    end else begin
        eigVals_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln94_reg_355) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_293_p2 == 1'd1))) begin
        eigVals_we0 = 1'b1;
    end else begin
        eigVals_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        standarisedData_ce0 = 1'b1;
    end else begin
        standarisedData_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln89_1_fu_158_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln89_fu_170_p2 = (ap_sig_allocacmp_i_load + 5'd1);

assign add_ln91_fu_228_p2 = (select_ln89_fu_182_p3 + 5'd1);

assign add_ln95_1_fu_282_p2 = (tmp_11_fu_256_p3 + zext_ln95_1_fu_279_p1);

assign add_ln95_fu_297_p2 = (empty_84_fu_274_p2 + zext_ln95_1_fu_279_p1);

assign and_ln94_fu_222_p2 = (icmp_ln94_fu_216_p2 & cmp6_i_fu_206_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cmp6_i_fu_206_p2 = (($signed(zext_ln89_1_fu_202_p1) < $signed(noVars)) ? 1'b1 : 1'b0);

assign eigVals_address0 = zext_ln89_fu_249_p1;

assign eigVals_d0 = 64'd0;

assign empty_83_fu_263_p2 = (tmp_11_fu_256_p3 + select_ln89_1_cast1_fu_253_p1);

assign empty_84_fu_274_p1 = select_ln89_1_cast1_fu_253_p1;

assign icmp_ln89_fu_152_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_176_p2 = ((ap_sig_allocacmp_j_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_216_p2 = (($signed(zext_ln91_fu_212_p1) < $signed(noVars)) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_293_p2 = ((select_ln89_1_reg_343 == select_ln89_reg_337) ? 1'b1 : 1'b0);

assign p_cast_fu_269_p1 = empty_83_fu_263_p2;

assign select_ln89_1_cast1_fu_253_p1 = select_ln89_1_reg_343;

assign select_ln89_1_fu_190_p3 = ((icmp_ln91_fu_176_p2[0:0] == 1'b1) ? add_ln89_fu_170_p2 : ap_sig_allocacmp_i_load);

assign select_ln89_fu_182_p3 = ((icmp_ln91_fu_176_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign standarisedData_address0 = zext_ln95_fu_303_p1;

assign tmp_11_fu_256_p3 = {{trunc_ln89_reg_350}, {4'd0}};

assign trunc_ln89_fu_198_p1 = select_ln89_1_fu_190_p3[3:0];

assign zext_ln89_1_fu_202_p1 = select_ln89_1_fu_190_p3;

assign zext_ln89_fu_249_p1 = select_ln89_1_reg_343;

assign zext_ln91_fu_212_p1 = select_ln89_fu_182_p3;

assign zext_ln95_1_fu_279_p1 = select_ln89_reg_337;

assign zext_ln95_2_fu_288_p1 = add_ln95_1_fu_282_p2;

assign zext_ln95_fu_303_p1 = add_ln95_reg_373;

endmodule //dut_implement_Pipeline_Loop_init_A_VITIS_LOOP_91_1

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dut_dut_Pipeline_VITIS_LOOP_350_2_VITIS_LOOP_351_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sub_ln298,
        outputLoadings_2_address0,
        outputLoadings_2_ce0,
        outputLoadings_2_we0,
        outputLoadings_2_d0,
        outputLoadings_0_address0,
        outputLoadings_0_ce0,
        outputLoadings_0_we0,
        outputLoadings_0_d0,
        outputLoadings_1_address0,
        outputLoadings_1_ce0,
        outputLoadings_1_we0,
        outputLoadings_1_d0,
        sqrtVals,
        sqrtVals_1,
        sqrtVals_2,
        pca_m_pcVecs_address0,
        pca_m_pcVecs_ce0,
        pca_m_pcVecs_q0,
        grp_fu_302_p_din0,
        grp_fu_302_p_din1,
        grp_fu_302_p_dout0,
        grp_fu_302_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [33:0] sub_ln298;
output  [3:0] outputLoadings_2_address0;
output   outputLoadings_2_ce0;
output   outputLoadings_2_we0;
output  [63:0] outputLoadings_2_d0;
output  [3:0] outputLoadings_0_address0;
output   outputLoadings_0_ce0;
output   outputLoadings_0_we0;
output  [63:0] outputLoadings_0_d0;
output  [3:0] outputLoadings_1_address0;
output   outputLoadings_1_ce0;
output   outputLoadings_1_we0;
output  [63:0] outputLoadings_1_d0;
input  [63:0] sqrtVals;
input  [63:0] sqrtVals_1;
input  [63:0] sqrtVals_2;
output  [6:0] pca_m_pcVecs_address0;
output   pca_m_pcVecs_ce0;
input  [63:0] pca_m_pcVecs_q0;
output  [63:0] grp_fu_302_p_din0;
output  [63:0] grp_fu_302_p_din1;
input  [63:0] grp_fu_302_p_dout0;
output   grp_fu_302_p_ce;

reg ap_idle;
reg outputLoadings_2_ce0;
reg outputLoadings_2_we0;
reg outputLoadings_0_ce0;
reg outputLoadings_0_we0;
reg outputLoadings_1_ce0;
reg outputLoadings_1_we0;
reg pca_m_pcVecs_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln350_fu_167_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] select_ln350_fu_196_p3;
reg   [1:0] select_ln350_reg_346;
reg   [1:0] select_ln350_reg_346_pp0_iter2_reg;
reg   [1:0] select_ln350_reg_346_pp0_iter3_reg;
reg   [1:0] select_ln350_reg_346_pp0_iter4_reg;
reg   [1:0] select_ln350_reg_346_pp0_iter5_reg;
reg   [1:0] select_ln350_reg_346_pp0_iter6_reg;
reg   [1:0] select_ln350_reg_346_pp0_iter7_reg;
reg   [1:0] select_ln350_reg_346_pp0_iter8_reg;
reg   [1:0] select_ln350_reg_346_pp0_iter9_reg;
reg   [1:0] select_ln350_reg_346_pp0_iter10_reg;
reg   [1:0] select_ln350_reg_346_pp0_iter11_reg;
wire   [6:0] mul_i1_fu_235_p2;
reg   [6:0] mul_i1_reg_352;
reg   [3:0] outputLoadings_2_addr_reg_357;
reg   [3:0] outputLoadings_2_addr_reg_357_pp0_iter2_reg;
reg   [3:0] outputLoadings_2_addr_reg_357_pp0_iter3_reg;
reg   [3:0] outputLoadings_2_addr_reg_357_pp0_iter4_reg;
reg   [3:0] outputLoadings_2_addr_reg_357_pp0_iter5_reg;
reg   [3:0] outputLoadings_2_addr_reg_357_pp0_iter6_reg;
reg   [3:0] outputLoadings_2_addr_reg_357_pp0_iter7_reg;
reg   [3:0] outputLoadings_2_addr_reg_357_pp0_iter8_reg;
reg   [3:0] outputLoadings_2_addr_reg_357_pp0_iter9_reg;
reg   [3:0] outputLoadings_2_addr_reg_357_pp0_iter10_reg;
reg   [3:0] outputLoadings_2_addr_reg_357_pp0_iter11_reg;
reg   [3:0] outputLoadings_0_addr_reg_362;
reg   [3:0] outputLoadings_0_addr_reg_362_pp0_iter2_reg;
reg   [3:0] outputLoadings_0_addr_reg_362_pp0_iter3_reg;
reg   [3:0] outputLoadings_0_addr_reg_362_pp0_iter4_reg;
reg   [3:0] outputLoadings_0_addr_reg_362_pp0_iter5_reg;
reg   [3:0] outputLoadings_0_addr_reg_362_pp0_iter6_reg;
reg   [3:0] outputLoadings_0_addr_reg_362_pp0_iter7_reg;
reg   [3:0] outputLoadings_0_addr_reg_362_pp0_iter8_reg;
reg   [3:0] outputLoadings_0_addr_reg_362_pp0_iter9_reg;
reg   [3:0] outputLoadings_0_addr_reg_362_pp0_iter10_reg;
reg   [3:0] outputLoadings_0_addr_reg_362_pp0_iter11_reg;
reg   [3:0] outputLoadings_1_addr_reg_367;
reg   [3:0] outputLoadings_1_addr_reg_367_pp0_iter2_reg;
reg   [3:0] outputLoadings_1_addr_reg_367_pp0_iter3_reg;
reg   [3:0] outputLoadings_1_addr_reg_367_pp0_iter4_reg;
reg   [3:0] outputLoadings_1_addr_reg_367_pp0_iter5_reg;
reg   [3:0] outputLoadings_1_addr_reg_367_pp0_iter6_reg;
reg   [3:0] outputLoadings_1_addr_reg_367_pp0_iter7_reg;
reg   [3:0] outputLoadings_1_addr_reg_367_pp0_iter8_reg;
reg   [3:0] outputLoadings_1_addr_reg_367_pp0_iter9_reg;
reg   [3:0] outputLoadings_1_addr_reg_367_pp0_iter10_reg;
reg   [3:0] outputLoadings_1_addr_reg_367_pp0_iter11_reg;
wire   [63:0] tmp_fu_281_p9;
reg   [63:0] tmp_reg_377;
reg   [63:0] pca_m_pcVecs_load_reg_382;
wire   [63:0] bitcast_ln353_fu_297_p1;
reg   [63:0] bitcast_ln353_reg_387;
wire   [63:0] zext_ln350_fu_212_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln353_1_fu_276_p1;
reg   [1:0] j_fu_60;
wire   [1:0] add_ln351_fu_241_p2;
wire    ap_loop_init;
reg   [31:0] i_fu_64;
wire   [31:0] select_ln350_1_fu_204_p3;
reg   [33:0] indvar_flatten6_fu_68;
wire   [33:0] add_ln350_1_fu_172_p2;
wire   [0:0] icmp_ln351_fu_190_p2;
wire   [31:0] add_ln350_fu_184_p2;
wire   [4:0] empty_88_fu_223_p1;
wire   [6:0] p_shl_fu_227_p3;
wire   [6:0] empty_fu_219_p1;
wire   [6:0] zext_ln353_fu_262_p1;
wire   [6:0] add_ln353_fu_265_p2;
wire   [6:0] add_ln353_1_fu_270_p2;
wire   [63:0] tmp_fu_281_p7;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [1:0] tmp_fu_281_p1;
wire   [1:0] tmp_fu_281_p3;
wire  signed [1:0] tmp_fu_281_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 j_fu_60 = 2'd0;
#0 i_fu_64 = 32'd0;
#0 indvar_flatten6_fu_68 = 34'd0;
#0 ap_done_reg = 1'b0;
end

dut_sparsemux_7_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_7_2_64_1_1_U319(
    .din0(sqrtVals),
    .din1(sqrtVals_1),
    .din2(sqrtVals_2),
    .def(tmp_fu_281_p7),
    .sel(select_ln350_reg_346_pp0_iter2_reg),
    .dout(tmp_fu_281_p9)
);

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 32'd0;
        end else if (((icmp_ln350_fu_167_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_64 <= select_ln350_1_fu_204_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_68 <= 34'd0;
        end else if (((icmp_ln350_fu_167_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten6_fu_68 <= add_ln350_1_fu_172_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_60 <= 2'd0;
        end else if (((icmp_ln350_fu_167_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_60 <= add_ln351_fu_241_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        bitcast_ln353_reg_387 <= bitcast_ln353_fu_297_p1;
        outputLoadings_0_addr_reg_362_pp0_iter10_reg <= outputLoadings_0_addr_reg_362_pp0_iter9_reg;
        outputLoadings_0_addr_reg_362_pp0_iter11_reg <= outputLoadings_0_addr_reg_362_pp0_iter10_reg;
        outputLoadings_0_addr_reg_362_pp0_iter2_reg <= outputLoadings_0_addr_reg_362;
        outputLoadings_0_addr_reg_362_pp0_iter3_reg <= outputLoadings_0_addr_reg_362_pp0_iter2_reg;
        outputLoadings_0_addr_reg_362_pp0_iter4_reg <= outputLoadings_0_addr_reg_362_pp0_iter3_reg;
        outputLoadings_0_addr_reg_362_pp0_iter5_reg <= outputLoadings_0_addr_reg_362_pp0_iter4_reg;
        outputLoadings_0_addr_reg_362_pp0_iter6_reg <= outputLoadings_0_addr_reg_362_pp0_iter5_reg;
        outputLoadings_0_addr_reg_362_pp0_iter7_reg <= outputLoadings_0_addr_reg_362_pp0_iter6_reg;
        outputLoadings_0_addr_reg_362_pp0_iter8_reg <= outputLoadings_0_addr_reg_362_pp0_iter7_reg;
        outputLoadings_0_addr_reg_362_pp0_iter9_reg <= outputLoadings_0_addr_reg_362_pp0_iter8_reg;
        outputLoadings_1_addr_reg_367_pp0_iter10_reg <= outputLoadings_1_addr_reg_367_pp0_iter9_reg;
        outputLoadings_1_addr_reg_367_pp0_iter11_reg <= outputLoadings_1_addr_reg_367_pp0_iter10_reg;
        outputLoadings_1_addr_reg_367_pp0_iter2_reg <= outputLoadings_1_addr_reg_367;
        outputLoadings_1_addr_reg_367_pp0_iter3_reg <= outputLoadings_1_addr_reg_367_pp0_iter2_reg;
        outputLoadings_1_addr_reg_367_pp0_iter4_reg <= outputLoadings_1_addr_reg_367_pp0_iter3_reg;
        outputLoadings_1_addr_reg_367_pp0_iter5_reg <= outputLoadings_1_addr_reg_367_pp0_iter4_reg;
        outputLoadings_1_addr_reg_367_pp0_iter6_reg <= outputLoadings_1_addr_reg_367_pp0_iter5_reg;
        outputLoadings_1_addr_reg_367_pp0_iter7_reg <= outputLoadings_1_addr_reg_367_pp0_iter6_reg;
        outputLoadings_1_addr_reg_367_pp0_iter8_reg <= outputLoadings_1_addr_reg_367_pp0_iter7_reg;
        outputLoadings_1_addr_reg_367_pp0_iter9_reg <= outputLoadings_1_addr_reg_367_pp0_iter8_reg;
        outputLoadings_2_addr_reg_357_pp0_iter10_reg <= outputLoadings_2_addr_reg_357_pp0_iter9_reg;
        outputLoadings_2_addr_reg_357_pp0_iter11_reg <= outputLoadings_2_addr_reg_357_pp0_iter10_reg;
        outputLoadings_2_addr_reg_357_pp0_iter2_reg <= outputLoadings_2_addr_reg_357;
        outputLoadings_2_addr_reg_357_pp0_iter3_reg <= outputLoadings_2_addr_reg_357_pp0_iter2_reg;
        outputLoadings_2_addr_reg_357_pp0_iter4_reg <= outputLoadings_2_addr_reg_357_pp0_iter3_reg;
        outputLoadings_2_addr_reg_357_pp0_iter5_reg <= outputLoadings_2_addr_reg_357_pp0_iter4_reg;
        outputLoadings_2_addr_reg_357_pp0_iter6_reg <= outputLoadings_2_addr_reg_357_pp0_iter5_reg;
        outputLoadings_2_addr_reg_357_pp0_iter7_reg <= outputLoadings_2_addr_reg_357_pp0_iter6_reg;
        outputLoadings_2_addr_reg_357_pp0_iter8_reg <= outputLoadings_2_addr_reg_357_pp0_iter7_reg;
        outputLoadings_2_addr_reg_357_pp0_iter9_reg <= outputLoadings_2_addr_reg_357_pp0_iter8_reg;
        pca_m_pcVecs_load_reg_382 <= pca_m_pcVecs_q0;
        select_ln350_reg_346_pp0_iter10_reg <= select_ln350_reg_346_pp0_iter9_reg;
        select_ln350_reg_346_pp0_iter11_reg <= select_ln350_reg_346_pp0_iter10_reg;
        select_ln350_reg_346_pp0_iter2_reg <= select_ln350_reg_346;
        select_ln350_reg_346_pp0_iter3_reg <= select_ln350_reg_346_pp0_iter2_reg;
        select_ln350_reg_346_pp0_iter4_reg <= select_ln350_reg_346_pp0_iter3_reg;
        select_ln350_reg_346_pp0_iter5_reg <= select_ln350_reg_346_pp0_iter4_reg;
        select_ln350_reg_346_pp0_iter6_reg <= select_ln350_reg_346_pp0_iter5_reg;
        select_ln350_reg_346_pp0_iter7_reg <= select_ln350_reg_346_pp0_iter6_reg;
        select_ln350_reg_346_pp0_iter8_reg <= select_ln350_reg_346_pp0_iter7_reg;
        select_ln350_reg_346_pp0_iter9_reg <= select_ln350_reg_346_pp0_iter8_reg;
        tmp_reg_377 <= tmp_fu_281_p9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        mul_i1_reg_352 <= mul_i1_fu_235_p2;
        outputLoadings_0_addr_reg_362 <= zext_ln350_fu_212_p1;
        outputLoadings_1_addr_reg_367 <= zext_ln350_fu_212_p1;
        outputLoadings_2_addr_reg_357 <= zext_ln350_fu_212_p1;
        select_ln350_reg_346 <= select_ln350_fu_196_p3;
    end
end

always @ (*) begin
    if (((icmp_ln350_fu_167_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        outputLoadings_0_ce0 = 1'b1;
    end else begin
        outputLoadings_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1) & (select_ln350_reg_346_pp0_iter11_reg == 2'd0))) begin
        outputLoadings_0_we0 = 1'b1;
    end else begin
        outputLoadings_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        outputLoadings_1_ce0 = 1'b1;
    end else begin
        outputLoadings_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1) & (select_ln350_reg_346_pp0_iter11_reg == 2'd1))) begin
        outputLoadings_1_we0 = 1'b1;
    end else begin
        outputLoadings_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        outputLoadings_2_ce0 = 1'b1;
    end else begin
        outputLoadings_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln350_reg_346_pp0_iter11_reg == 2'd0) & ~(select_ln350_reg_346_pp0_iter11_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        outputLoadings_2_we0 = 1'b1;
    end else begin
        outputLoadings_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pca_m_pcVecs_ce0 = 1'b1;
    end else begin
        pca_m_pcVecs_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln350_1_fu_172_p2 = (indvar_flatten6_fu_68 + 34'd1);

assign add_ln350_fu_184_p2 = (i_fu_64 + 32'd1);

assign add_ln351_fu_241_p2 = (select_ln350_fu_196_p3 + 2'd1);

assign add_ln353_1_fu_270_p2 = (add_ln353_fu_265_p2 + 7'd45);

assign add_ln353_fu_265_p2 = (mul_i1_reg_352 + zext_ln353_fu_262_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln353_fu_297_p1 = grp_fu_302_p_dout0;

assign empty_88_fu_223_p1 = select_ln350_1_fu_204_p3[4:0];

assign empty_fu_219_p1 = select_ln350_1_fu_204_p3[6:0];

assign grp_fu_302_p_ce = 1'b1;

assign grp_fu_302_p_din0 = tmp_reg_377;

assign grp_fu_302_p_din1 = pca_m_pcVecs_load_reg_382;

assign icmp_ln350_fu_167_p2 = ((indvar_flatten6_fu_68 == sub_ln298) ? 1'b1 : 1'b0);

assign icmp_ln351_fu_190_p2 = ((j_fu_60 == 2'd3) ? 1'b1 : 1'b0);

assign mul_i1_fu_235_p2 = (p_shl_fu_227_p3 - empty_fu_219_p1);

assign outputLoadings_0_address0 = outputLoadings_0_addr_reg_362_pp0_iter11_reg;

assign outputLoadings_0_d0 = bitcast_ln353_reg_387;

assign outputLoadings_1_address0 = outputLoadings_1_addr_reg_367_pp0_iter11_reg;

assign outputLoadings_1_d0 = bitcast_ln353_reg_387;

assign outputLoadings_2_address0 = outputLoadings_2_addr_reg_357_pp0_iter11_reg;

assign outputLoadings_2_d0 = bitcast_ln353_reg_387;

assign p_shl_fu_227_p3 = {{empty_88_fu_223_p1}, {2'd0}};

assign pca_m_pcVecs_address0 = zext_ln353_1_fu_276_p1;

assign select_ln350_1_fu_204_p3 = ((icmp_ln351_fu_190_p2[0:0] == 1'b1) ? add_ln350_fu_184_p2 : i_fu_64);

assign select_ln350_fu_196_p3 = ((icmp_ln351_fu_190_p2[0:0] == 1'b1) ? 2'd0 : j_fu_60);

assign tmp_fu_281_p7 = 'bx;

assign zext_ln350_fu_212_p1 = select_ln350_1_fu_204_p3;

assign zext_ln353_1_fu_276_p1 = add_ln353_1_fu_270_p2;

assign zext_ln353_fu_262_p1 = select_ln350_reg_346;

endmodule //dut_dut_Pipeline_VITIS_LOOP_350_2_VITIS_LOOP_351_3

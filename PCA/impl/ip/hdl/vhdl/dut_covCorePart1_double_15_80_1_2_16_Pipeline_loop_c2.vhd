-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_covCorePart1_double_15_80_1_2_16_Pipeline_loop_c2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    values2Strm_0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    values2Strm_0_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    values2Strm_0_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    values2Strm_0_full_n : IN STD_LOGIC;
    values2Strm_0_write : OUT STD_LOGIC;
    values2Strm_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    values2Strm_1_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    values2Strm_1_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    values2Strm_1_full_n : IN STD_LOGIC;
    values2Strm_1_write : OUT STD_LOGIC;
    smax : IN STD_LOGIC_VECTOR (30 downto 0);
    add_ln206 : IN STD_LOGIC_VECTOR (10 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln210 : IN STD_LOGIC_VECTOR (10 downto 0);
    add_ln210_1 : IN STD_LOGIC_VECTOR (10 downto 0);
    values2_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    values2_1_ce0 : OUT STD_LOGIC;
    values2_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    values2_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    values2_1_ce1 : OUT STD_LOGIC;
    values2_1_we1 : OUT STD_LOGIC;
    values2_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    values2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    values2_ce0 : OUT STD_LOGIC;
    values2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    values2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    values2_ce1 : OUT STD_LOGIC;
    values2_we1 : OUT STD_LOGIC;
    values2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    cmp18_not : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp30_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp30 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp79 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_covCorePart1_double_15_80_1_2_16_Pipeline_loop_c2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln201_reg_456 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_486 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp79_read_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op82_write_state2 : BOOLEAN;
    signal ap_predicate_op85_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal values2Strm_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal values2Strm_1_blk_n : STD_LOGIC;
    signal reg_261 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_266 : STD_LOGIC_VECTOR (63 downto 0);
    signal cmp79_read_read_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_reg_456_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_reg_456_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_reg_456_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_reg_456_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_reg_456_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_reg_456_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_reg_456_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_reg_456_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_reg_456_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln201_fu_284_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln201_reg_460 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln210_3_fu_322_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln210_3_reg_475 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln205_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln205_reg_480 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln205_reg_480_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln205_reg_480_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln205_reg_480_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln205_reg_480_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln205_reg_480_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_486_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_486_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_486_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_486_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_486_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_486_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_486_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_486_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_486_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal values2_addr_reg_490 : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_addr_reg_490_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_addr_reg_490_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_addr_reg_490_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_addr_reg_490_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_addr_reg_490_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_addr_reg_490_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_addr_reg_490_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_addr_reg_490_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_addr_reg_490_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_1_addr_reg_496 : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_1_addr_reg_496_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_1_addr_reg_496_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_1_addr_reg_496_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_1_addr_reg_496_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_1_addr_reg_496_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_1_addr_reg_496_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_1_addr_reg_496_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_1_addr_reg_496_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values2_1_addr_reg_496_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal input_r_load_1_reg_517 : STD_LOGIC_VECTOR (63 downto 0);
    signal values2_load_reg_522 : STD_LOGIC_VECTOR (63 downto 0);
    signal values2_load_reg_522_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values2_load_reg_522_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values2_load_reg_522_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values2_load_reg_522_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values2_1_load_reg_527 : STD_LOGIC_VECTOR (63 downto 0);
    signal values2_1_load_reg_527_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values2_1_load_reg_527_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values2_1_load_reg_527_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values2_1_load_reg_527_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal matValue_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal matValue_reg_532 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln210_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln210_1_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_412_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_426_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_reg_558 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_storemerge_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter5_storemerge_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter6_storemerge_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter7_storemerge_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter8_storemerge_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter9_storemerge_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln206_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln210_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom1001_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_1_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_88 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal grp_fu_253_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_257_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln206_fu_296_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln206_1_fu_300_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln210_2_fu_311_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln201_1_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln205_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln205_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_350_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal empty_fu_366_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln205_1_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_253_ce : STD_LOGIC;
    signal grp_fu_257_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to9 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_343 : BOOLEAN;
    signal ap_condition_370 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component dut_dadd_64ns_64ns_64_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_dmul_64ns_64ns_64_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dadd_64ns_64ns_64_8_full_dsp_1_U37 : component dut_dadd_64ns_64ns_64_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_253_p0,
        din1 => grp_fu_253_p1,
        ce => grp_fu_253_ce,
        dout => grp_fu_253_p2);

    dmul_64ns_64ns_64_8_max_dsp_1_U38 : component dut_dmul_64ns_64ns_64_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_257_p0,
        din1 => grp_fu_257_p1,
        ce => grp_fu_257_ce,
        dout => grp_fu_257_p2);

    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter6_storemerge_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_343)) then
                if (((icmp_reg_486_pp0_iter5_reg = ap_const_lv1_1) and (icmp_ln201_reg_456_pp0_iter5_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter6_storemerge_reg_243 <= tmp_2_fu_426_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter6_storemerge_reg_243 <= ap_phi_reg_pp0_iter5_storemerge_reg_243;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter9_storemerge_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_reg_486_pp0_iter8_reg = ap_const_lv1_0) and (icmp_ln201_reg_456_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter9_storemerge_reg_243 <= grp_fu_253_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter9_storemerge_reg_243 <= ap_phi_reg_pp0_iter8_storemerge_reg_243;
            end if; 
        end if;
    end process;

    k_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_fu_88 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln201_reg_456 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                k_fu_88 <= add_ln201_reg_460;
            end if; 
        end if;
    end process;

    reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_261 <= input_r_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_261 <= input_r_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln201_reg_460 <= add_ln201_fu_284_p2;
                add_ln210_3_reg_475 <= add_ln210_3_fu_322_p2;
                icmp_ln201_reg_456 <= icmp_ln201_fu_278_p2;
                icmp_ln201_reg_456_pp0_iter1_reg <= icmp_ln201_reg_456;
                icmp_ln201_reg_456_pp0_iter2_reg <= icmp_ln201_reg_456_pp0_iter1_reg;
                icmp_ln201_reg_456_pp0_iter3_reg <= icmp_ln201_reg_456_pp0_iter2_reg;
                icmp_ln201_reg_456_pp0_iter4_reg <= icmp_ln201_reg_456_pp0_iter3_reg;
                icmp_ln201_reg_456_pp0_iter5_reg <= icmp_ln201_reg_456_pp0_iter4_reg;
                icmp_ln201_reg_456_pp0_iter6_reg <= icmp_ln201_reg_456_pp0_iter5_reg;
                icmp_ln201_reg_456_pp0_iter7_reg <= icmp_ln201_reg_456_pp0_iter6_reg;
                icmp_ln201_reg_456_pp0_iter8_reg <= icmp_ln201_reg_456_pp0_iter7_reg;
                icmp_ln201_reg_456_pp0_iter9_reg <= icmp_ln201_reg_456_pp0_iter8_reg;
                icmp_reg_486 <= icmp_fu_360_p2;
                icmp_reg_486_pp0_iter1_reg <= icmp_reg_486;
                icmp_reg_486_pp0_iter2_reg <= icmp_reg_486_pp0_iter1_reg;
                icmp_reg_486_pp0_iter3_reg <= icmp_reg_486_pp0_iter2_reg;
                icmp_reg_486_pp0_iter4_reg <= icmp_reg_486_pp0_iter3_reg;
                icmp_reg_486_pp0_iter5_reg <= icmp_reg_486_pp0_iter4_reg;
                icmp_reg_486_pp0_iter6_reg <= icmp_reg_486_pp0_iter5_reg;
                icmp_reg_486_pp0_iter7_reg <= icmp_reg_486_pp0_iter6_reg;
                icmp_reg_486_pp0_iter8_reg <= icmp_reg_486_pp0_iter7_reg;
                icmp_reg_486_pp0_iter9_reg <= icmp_reg_486_pp0_iter8_reg;
                matValue_reg_532 <= matValue_fu_394_p1;
                or_ln205_reg_480 <= or_ln205_fu_344_p2;
                or_ln205_reg_480_pp0_iter1_reg <= or_ln205_reg_480;
                or_ln205_reg_480_pp0_iter2_reg <= or_ln205_reg_480_pp0_iter1_reg;
                or_ln205_reg_480_pp0_iter3_reg <= or_ln205_reg_480_pp0_iter2_reg;
                or_ln205_reg_480_pp0_iter4_reg <= or_ln205_reg_480_pp0_iter3_reg;
                or_ln205_reg_480_pp0_iter5_reg <= or_ln205_reg_480_pp0_iter4_reg;
                values2_1_addr_reg_496 <= idxprom1001_fu_370_p1(4 - 1 downto 0);
                values2_1_addr_reg_496_pp0_iter1_reg <= values2_1_addr_reg_496;
                values2_1_addr_reg_496_pp0_iter2_reg <= values2_1_addr_reg_496_pp0_iter1_reg;
                values2_1_addr_reg_496_pp0_iter3_reg <= values2_1_addr_reg_496_pp0_iter2_reg;
                values2_1_addr_reg_496_pp0_iter4_reg <= values2_1_addr_reg_496_pp0_iter3_reg;
                values2_1_addr_reg_496_pp0_iter5_reg <= values2_1_addr_reg_496_pp0_iter4_reg;
                values2_1_addr_reg_496_pp0_iter6_reg <= values2_1_addr_reg_496_pp0_iter5_reg;
                values2_1_addr_reg_496_pp0_iter7_reg <= values2_1_addr_reg_496_pp0_iter6_reg;
                values2_1_addr_reg_496_pp0_iter8_reg <= values2_1_addr_reg_496_pp0_iter7_reg;
                values2_1_addr_reg_496_pp0_iter9_reg <= values2_1_addr_reg_496_pp0_iter8_reg;
                values2_addr_reg_490 <= idxprom1001_fu_370_p1(4 - 1 downto 0);
                values2_addr_reg_490_pp0_iter1_reg <= values2_addr_reg_490;
                values2_addr_reg_490_pp0_iter2_reg <= values2_addr_reg_490_pp0_iter1_reg;
                values2_addr_reg_490_pp0_iter3_reg <= values2_addr_reg_490_pp0_iter2_reg;
                values2_addr_reg_490_pp0_iter4_reg <= values2_addr_reg_490_pp0_iter3_reg;
                values2_addr_reg_490_pp0_iter5_reg <= values2_addr_reg_490_pp0_iter4_reg;
                values2_addr_reg_490_pp0_iter6_reg <= values2_addr_reg_490_pp0_iter5_reg;
                values2_addr_reg_490_pp0_iter7_reg <= values2_addr_reg_490_pp0_iter6_reg;
                values2_addr_reg_490_pp0_iter8_reg <= values2_addr_reg_490_pp0_iter7_reg;
                values2_addr_reg_490_pp0_iter9_reg <= values2_addr_reg_490_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_reg_558 <= grp_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                values2_1_load_reg_527_pp0_iter1_reg <= values2_1_load_reg_527;
                values2_1_load_reg_527_pp0_iter2_reg <= values2_1_load_reg_527_pp0_iter1_reg;
                values2_1_load_reg_527_pp0_iter3_reg <= values2_1_load_reg_527_pp0_iter2_reg;
                values2_1_load_reg_527_pp0_iter4_reg <= values2_1_load_reg_527_pp0_iter3_reg;
                values2_load_reg_522_pp0_iter1_reg <= values2_load_reg_522;
                values2_load_reg_522_pp0_iter2_reg <= values2_load_reg_522_pp0_iter1_reg;
                values2_load_reg_522_pp0_iter3_reg <= values2_load_reg_522_pp0_iter2_reg;
                values2_load_reg_522_pp0_iter4_reg <= values2_load_reg_522_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter1_storemerge_reg_243 <= ap_phi_reg_pp0_iter0_storemerge_reg_243;
                input_r_load_1_reg_517 <= input_r_q0;
                values2_1_load_reg_527 <= values2_1_q0;
                values2_load_reg_522 <= values2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter2_storemerge_reg_243 <= ap_phi_reg_pp0_iter1_storemerge_reg_243;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter3_storemerge_reg_243 <= ap_phi_reg_pp0_iter2_storemerge_reg_243;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter4_storemerge_reg_243 <= ap_phi_reg_pp0_iter3_storemerge_reg_243;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter5_storemerge_reg_243 <= ap_phi_reg_pp0_iter4_storemerge_reg_243;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter7_storemerge_reg_243 <= ap_phi_reg_pp0_iter6_storemerge_reg_243;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter8_storemerge_reg_243 <= ap_phi_reg_pp0_iter7_storemerge_reg_243;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_266 <= grp_fu_257_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to9, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to9 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln201_fu_284_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_1) + unsigned(ap_const_lv31_1));
    add_ln206_1_fu_300_p2 <= std_logic_vector(unsigned(add_ln206) + unsigned(trunc_ln206_fu_296_p1));
    add_ln210_2_fu_311_p2 <= std_logic_vector(unsigned(add_ln210) + unsigned(trunc_ln206_fu_296_p1));
    add_ln210_3_fu_322_p2 <= std_logic_vector(unsigned(add_ln210_1) + unsigned(trunc_ln206_fu_296_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(values2Strm_0_full_n, ap_predicate_op82_write_state2, values2Strm_1_full_n, ap_predicate_op85_write_state2)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (((ap_predicate_op85_write_state2 = ap_const_boolean_1) and (values2Strm_1_full_n = ap_const_logic_0)) or ((ap_predicate_op82_write_state2 = ap_const_boolean_1) and (values2Strm_0_full_n = ap_const_logic_0)));
    end process;


    ap_condition_343_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_343 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_370_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln201_fu_278_p2, ap_block_pp0_stage0)
    begin
                ap_condition_370 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln201_fu_278_p2 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln201_reg_456, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln201_reg_456 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to9_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to9 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_phi_reg_pp0_iter0_storemerge_reg_243 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op82_write_state2_assign_proc : process(icmp_ln201_reg_456, icmp_reg_486, cmp79)
    begin
                ap_predicate_op82_write_state2 <= ((cmp79 = ap_const_lv1_0) and (icmp_reg_486 = ap_const_lv1_1) and (icmp_ln201_reg_456 = ap_const_lv1_0));
    end process;


    ap_predicate_op85_write_state2_assign_proc : process(icmp_ln201_reg_456, icmp_reg_486, cmp79)
    begin
                ap_predicate_op85_write_state2 <= ((cmp79 = ap_const_lv1_0) and (icmp_reg_486 = ap_const_lv1_1) and (icmp_ln201_reg_456 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_fu_88, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k_1 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_k_1 <= k_fu_88;
        end if; 
    end process;

    bitcast_ln210_1_fu_403_p1 <= reg_261;
    bitcast_ln210_fu_399_p1 <= input_r_load_1_reg_517;
    cmp79_read_read_fu_92_p2 <= cmp79;
    cmp79_read_reg_442 <= cmp79;
    empty_fu_366_p1 <= ap_sig_allocacmp_k_1(4 - 1 downto 0);

    grp_fu_253_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_253_ce <= ap_const_logic_1;
        else 
            grp_fu_253_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_253_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, values2_load_reg_522_pp0_iter4_reg, values2_1_load_reg_527_pp0_iter4_reg, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_253_p0 <= values2_1_load_reg_527_pp0_iter4_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_253_p0 <= values2_load_reg_522_pp0_iter4_reg;
            else 
                grp_fu_253_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_253_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_253_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, tmp_7_fu_412_p3, tmp_2_fu_426_p3, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_253_p1 <= tmp_2_fu_426_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_253_p1 <= tmp_7_fu_412_p3;
            else 
                grp_fu_253_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_253_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_257_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_257_ce <= ap_const_logic_1;
        else 
            grp_fu_257_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_257_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, matValue_fu_394_p1, matValue_reg_532, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_257_p0 <= matValue_reg_532;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_257_p0 <= matValue_fu_394_p1;
            else 
                grp_fu_257_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_257_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_257_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, bitcast_ln210_fu_399_p1, bitcast_ln210_1_fu_403_p1, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_257_p1 <= bitcast_ln210_1_fu_403_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_257_p1 <= bitcast_ln210_fu_399_p1;
            else 
                grp_fu_257_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_257_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_fu_360_p2 <= "1" when (tmp_fu_350_p4 = ap_const_lv27_0) else "0";
    icmp_ln201_fu_278_p2 <= "1" when (ap_sig_allocacmp_k_1 = smax) else "0";
    icmp_ln205_fu_332_p2 <= "1" when (signed(zext_ln201_1_fu_328_p1) < signed(cols)) else "0";
    idxprom1001_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_366_p1),64));

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln210_fu_317_p1, zext_ln210_1_fu_376_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address0 <= zext_ln210_1_fu_376_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address0 <= zext_ln210_fu_317_p1(11 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    input_r_address1 <= zext_ln206_fu_306_p1(11 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    matValue_fu_394_p1 <= reg_261;
    or_ln205_1_fu_408_p2 <= (or_ln205_reg_480_pp0_iter4_reg or cmp30);
    or_ln205_fu_344_p2 <= (xor_ln205_fu_338_p2 or cmp18_not);
    sel_tmp_fu_422_p2 <= (or_ln205_reg_480_pp0_iter5_reg or cmp30_1);
    tmp_2_fu_426_p3 <= 
        ap_const_lv64_0 when (sel_tmp_fu_422_p2(0) = '1') else 
        reg_266;
    tmp_7_fu_412_p3 <= 
        ap_const_lv64_0 when (or_ln205_1_fu_408_p2(0) = '1') else 
        reg_266;
    tmp_fu_350_p4 <= ap_sig_allocacmp_k_1(30 downto 4);
    trunc_ln206_fu_296_p1 <= ap_sig_allocacmp_k_1(11 - 1 downto 0);

    values2Strm_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, values2Strm_0_full_n, ap_predicate_op82_write_state2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op82_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            values2Strm_0_blk_n <= values2Strm_0_full_n;
        else 
            values2Strm_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    values2Strm_0_din <= values2_q0;

    values2Strm_0_write_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op82_write_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op82_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            values2Strm_0_write <= ap_const_logic_1;
        else 
            values2Strm_0_write <= ap_const_logic_0;
        end if; 
    end process;


    values2Strm_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, values2Strm_1_full_n, ap_predicate_op85_write_state2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op85_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            values2Strm_1_blk_n <= values2Strm_1_full_n;
        else 
            values2Strm_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    values2Strm_1_din <= values2_1_q0;

    values2Strm_1_write_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op85_write_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op85_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            values2Strm_1_write <= ap_const_logic_1;
        else 
            values2Strm_1_write <= ap_const_logic_0;
        end if; 
    end process;


    values2_1_address0_assign_proc : process(cmp79_read_read_fu_92_p2, icmp_fu_360_p2, idxprom1001_fu_370_p1, zext_ln201_fu_290_p1, ap_condition_370)
    begin
        if ((ap_const_boolean_1 = ap_condition_370)) then
            if (((icmp_fu_360_p2 = ap_const_lv1_1) and (cmp79_read_read_fu_92_p2 = ap_const_lv1_0))) then 
                values2_1_address0 <= zext_ln201_fu_290_p1(4 - 1 downto 0);
            elsif ((icmp_fu_360_p2 = ap_const_lv1_0)) then 
                values2_1_address0 <= idxprom1001_fu_370_p1(4 - 1 downto 0);
            else 
                values2_1_address0 <= "XXXX";
            end if;
        else 
            values2_1_address0 <= "XXXX";
        end if; 
    end process;

    values2_1_address1 <= values2_1_addr_reg_496_pp0_iter9_reg;

    values2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, cmp79_read_read_fu_92_p2, icmp_ln201_fu_278_p2, icmp_fu_360_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_fu_360_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln201_fu_278_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_fu_360_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln201_fu_278_p2 = ap_const_lv1_0) and (cmp79_read_read_fu_92_p2 = ap_const_lv1_0)))) then 
            values2_1_ce0 <= ap_const_logic_1;
        else 
            values2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    values2_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            values2_1_ce1 <= ap_const_logic_1;
        else 
            values2_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    values2_1_d1 <= ap_phi_reg_pp0_iter9_storemerge_reg_243;

    values2_1_we1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            values2_1_we1 <= ap_const_logic_1;
        else 
            values2_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    values2_address0_assign_proc : process(cmp79_read_read_fu_92_p2, icmp_fu_360_p2, idxprom1001_fu_370_p1, zext_ln201_fu_290_p1, ap_condition_370)
    begin
        if ((ap_const_boolean_1 = ap_condition_370)) then
            if (((icmp_fu_360_p2 = ap_const_lv1_1) and (cmp79_read_read_fu_92_p2 = ap_const_lv1_0))) then 
                values2_address0 <= zext_ln201_fu_290_p1(4 - 1 downto 0);
            elsif ((icmp_fu_360_p2 = ap_const_lv1_0)) then 
                values2_address0 <= idxprom1001_fu_370_p1(4 - 1 downto 0);
            else 
                values2_address0 <= "XXXX";
            end if;
        else 
            values2_address0 <= "XXXX";
        end if; 
    end process;


    values2_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, cmp79_read_reg_442, cmp79, ap_block_pp0_stage1, icmp_reg_486_pp0_iter4_reg, values2_addr_reg_490_pp0_iter4_reg, values2_addr_reg_490_pp0_iter9_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            values2_address1 <= values2_addr_reg_490_pp0_iter9_reg;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (cmp79 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_reg_486_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (cmp79_read_reg_442 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_reg_486_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            values2_address1 <= values2_addr_reg_490_pp0_iter4_reg;
        else 
            values2_address1 <= "XXXX";
        end if; 
    end process;


    values2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, cmp79_read_read_fu_92_p2, icmp_ln201_fu_278_p2, icmp_fu_360_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_fu_360_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln201_fu_278_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_fu_360_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln201_fu_278_p2 = ap_const_lv1_0) and (cmp79_read_read_fu_92_p2 = ap_const_lv1_0)))) then 
            values2_ce0 <= ap_const_logic_1;
        else 
            values2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    values2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, cmp79_read_reg_442, cmp79, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, icmp_reg_486_pp0_iter4_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp79 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_reg_486_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp79_read_reg_442 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_reg_486_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            values2_ce1 <= ap_const_logic_1;
        else 
            values2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    values2_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, cmp79_read_reg_442, cmp79, ap_block_pp0_stage1, icmp_reg_486_pp0_iter4_reg, tmp_7_fu_412_p3, add_reg_558, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            values2_d1 <= add_reg_558;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (cmp79 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_reg_486_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (cmp79_read_reg_442 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_reg_486_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            values2_d1 <= tmp_7_fu_412_p3;
        else 
            values2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    values2_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, cmp79_read_reg_442, cmp79, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, icmp_ln201_reg_456_pp0_iter9_reg, icmp_reg_486_pp0_iter4_reg, icmp_reg_486_pp0_iter9_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp79 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_reg_486_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp79_read_reg_442 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_reg_486_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_reg_486_pp0_iter9_reg = ap_const_lv1_0) and (icmp_ln201_reg_456_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            values2_we1 <= ap_const_logic_1;
        else 
            values2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln205_fu_338_p2 <= (icmp_ln205_fu_332_p2 xor ap_const_lv1_1);
    zext_ln201_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_1),32));
    zext_ln201_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_1),64));
    zext_ln206_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln206_1_fu_300_p2),64));
    zext_ln210_1_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln210_3_reg_475),64));
    zext_ln210_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln210_2_fu_311_p2),64));
end behav;

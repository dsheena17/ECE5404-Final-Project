-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_implement_Pipeline_Loop_postcal_VITIS_LOOP_113_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dataA_2D_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataA_2D_ce0 : OUT STD_LOGIC;
    dataA_2D_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    eigVals_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    eigVals_ce0 : OUT STD_LOGIC;
    eigVals_we0 : OUT STD_LOGIC;
    eigVals_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    noVars : IN STD_LOGIC_VECTOR (31 downto 0);
    dataU_2D_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataU_2D_ce0 : OUT STD_LOGIC;
    dataU_2D_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    empty : IN STD_LOGIC_VECTOR (7 downto 0);
    eigVecs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    eigVecs_ce0 : OUT STD_LOGIC;
    eigVecs_we0 : OUT STD_LOGIC;
    eigVecs_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of dut_implement_Pipeline_Loop_postcal_VITIS_LOOP_113_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln112_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln112_1_fu_198_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln112_1_reg_365 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln112_1_reg_365_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln112_1_reg_365_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln112_1_cast1_fu_210_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln112_1_cast1_reg_370 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln112_1_cast1_reg_370_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_82_fu_222_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_82_reg_375 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln119_1_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln119_1_reg_380 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln118_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln118_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln118_reg_390_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln118_reg_390_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_394 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_394_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_394_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dataA_2D_load_reg_408 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataU_2D_load_reg_413 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln119_2_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_1_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_fu_62 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln113_fu_290_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1_load : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_fu_66 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_sig_allocacmp_i_1_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten7_fu_70 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln112_1_fu_162_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten7_load : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln113_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln112_fu_186_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln112_fu_174_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln112_1_fu_206_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_214_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln112_1_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln112_fu_194_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_244_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln113_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln118_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln118_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln119_1_fu_323_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_327_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_327_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component dut_mac_muladd_8s_5ns_5ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_8s_5ns_5ns_8_4_1_U239 : component dut_mac_muladd_8s_5ns_5ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty,
        din1 => grp_fu_327_p1,
        din2 => grp_fu_327_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p3);

    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln112_fu_156_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_66 <= select_ln112_1_fu_198_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_66 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten7_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln112_fu_156_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten7_fu_70 <= add_ln112_1_fu_162_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten7_fu_70 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    j_1_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln112_fu_156_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_1_fu_62 <= add_ln113_fu_290_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_1_fu_62 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln119_1_reg_380 <= add_ln119_1_fu_252_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_82_reg_375 <= empty_82_fu_222_p2;
                icmp_ln120_reg_394 <= icmp_ln120_fu_284_p2;
                icmp_ln120_reg_394_pp0_iter1_reg <= icmp_ln120_reg_394;
                or_ln118_reg_390 <= or_ln118_fu_278_p2;
                or_ln118_reg_390_pp0_iter1_reg <= or_ln118_reg_390;
                    select_ln112_1_cast1_reg_370(4 downto 0) <= select_ln112_1_cast1_fu_210_p1(4 downto 0);
                    select_ln112_1_cast1_reg_370_pp0_iter1_reg(4 downto 0) <= select_ln112_1_cast1_reg_370(4 downto 0);
                select_ln112_1_reg_365 <= select_ln112_1_fu_198_p3;
                select_ln112_1_reg_365_pp0_iter1_reg <= select_ln112_1_reg_365;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                dataA_2D_load_reg_408 <= dataA_2D_q0;
                dataU_2D_load_reg_413 <= dataU_2D_q0;
                icmp_ln120_reg_394_pp0_iter2_reg <= icmp_ln120_reg_394_pp0_iter1_reg;
                or_ln118_reg_390_pp0_iter2_reg <= or_ln118_reg_390_pp0_iter1_reg;
                select_ln112_1_reg_365_pp0_iter2_reg <= select_ln112_1_reg_365_pp0_iter1_reg;
            end if;
        end if;
    end process;
    select_ln112_1_cast1_reg_370(7 downto 5) <= "000";
    select_ln112_1_cast1_reg_370_pp0_iter1_reg(7 downto 5) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln112_1_fu_162_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten7_load) + unsigned(ap_const_lv9_1));
    add_ln112_fu_174_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1_load) + unsigned(ap_const_lv5_1));
    add_ln113_fu_290_p2 <= std_logic_vector(unsigned(select_ln112_fu_186_p3) + unsigned(ap_const_lv5_1));
    add_ln119_1_fu_252_p2 <= std_logic_vector(unsigned(tmp_13_fu_244_p3) + unsigned(select_ln112_1_cast1_fu_210_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln112_fu_156_p2)
    begin
        if (((icmp_ln112_fu_156_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_1_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_1_load <= i_1_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten7_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten7_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten7_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten7_load <= indvar_flatten7_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_1_fu_62, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_1_load <= j_1_fu_62;
        end if; 
    end process;

    dataA_2D_address0 <= p_cast_fu_311_p1(8 - 1 downto 0);

    dataA_2D_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dataA_2D_ce0 <= ap_const_logic_1;
        else 
            dataA_2D_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataU_2D_address0 <= zext_ln119_2_fu_315_p1(8 - 1 downto 0);

    dataU_2D_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dataU_2D_ce0 <= ap_const_logic_1;
        else 
            dataU_2D_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    eigVals_address0 <= zext_ln112_fu_319_p1(4 - 1 downto 0);

    eigVals_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            eigVals_ce0 <= ap_const_logic_1;
        else 
            eigVals_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    eigVals_d0 <= dataA_2D_load_reg_408;

    eigVals_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln118_reg_390_pp0_iter2_reg, icmp_ln120_reg_394_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln120_reg_394_pp0_iter2_reg = ap_const_lv1_1) and (or_ln118_reg_390_pp0_iter2_reg = ap_const_lv1_0))) then 
            eigVals_we0 <= ap_const_logic_1;
        else 
            eigVals_we0 <= ap_const_logic_0;
        end if; 
    end process;

    eigVecs_address0 <= zext_ln119_1_fu_323_p1(8 - 1 downto 0);

    eigVecs_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            eigVecs_ce0 <= ap_const_logic_1;
        else 
            eigVecs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    eigVecs_d0 <= dataU_2D_load_reg_413;

    eigVecs_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln118_reg_390_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (or_ln118_reg_390_pp0_iter2_reg = ap_const_lv1_0))) then 
            eigVecs_we0 <= ap_const_logic_1;
        else 
            eigVecs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_82_fu_222_p2 <= std_logic_vector(unsigned(tmp_12_fu_214_p3) + unsigned(select_ln112_1_cast1_fu_210_p1));
    grp_fu_327_p1 <= grp_fu_327_p10(5 - 1 downto 0);
    grp_fu_327_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln112_fu_186_p3),8));
    grp_fu_327_p2 <= select_ln112_1_cast1_reg_370_pp0_iter1_reg(5 - 1 downto 0);
    icmp_ln112_fu_156_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten7_load = ap_const_lv9_100) else "0";
    icmp_ln113_fu_180_p2 <= "1" when (ap_sig_allocacmp_j_1_load = ap_const_lv5_10) else "0";
    icmp_ln118_fu_266_p2 <= "1" when (signed(zext_ln113_fu_262_p1) < signed(noVars)) else "0";
    icmp_ln120_fu_284_p2 <= "1" when (select_ln112_fu_186_p3 = select_ln112_1_fu_198_p3) else "0";
    or_ln118_fu_278_p2 <= (xor_ln118_fu_272_p2 or rev_fu_238_p2);
    p_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_82_reg_375),64));
    rev_fu_238_p2 <= (slt_fu_232_p2 xor ap_const_lv1_1);
    select_ln112_1_cast1_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln112_1_fu_198_p3),8));
    select_ln112_1_fu_198_p3 <= 
        add_ln112_fu_174_p2 when (icmp_ln113_fu_180_p2(0) = '1') else 
        ap_sig_allocacmp_i_1_load;
    select_ln112_fu_186_p3 <= 
        ap_const_lv5_0 when (icmp_ln113_fu_180_p2(0) = '1') else 
        ap_sig_allocacmp_j_1_load;
    slt_fu_232_p2 <= "1" when (signed(zext_ln112_1_fu_228_p1) < signed(noVars)) else "0";
    tmp_12_fu_214_p3 <= (trunc_ln112_1_fu_206_p1 & ap_const_lv4_0);
    tmp_13_fu_244_p3 <= (trunc_ln112_fu_194_p1 & ap_const_lv4_0);
    trunc_ln112_1_fu_206_p1 <= select_ln112_1_fu_198_p3(4 - 1 downto 0);
    trunc_ln112_fu_194_p1 <= select_ln112_fu_186_p3(4 - 1 downto 0);
    xor_ln118_fu_272_p2 <= (icmp_ln118_fu_266_p2 xor ap_const_lv1_1);
    zext_ln112_1_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln112_1_fu_198_p3),32));
    zext_ln112_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln112_1_reg_365_pp0_iter2_reg),64));
    zext_ln113_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln112_fu_186_p3),32));
    zext_ln119_1_fu_323_p0 <= grp_fu_327_p3;
    zext_ln119_1_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln119_1_fu_323_p0),64));
    zext_ln119_2_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_1_reg_380),64));
end behav;

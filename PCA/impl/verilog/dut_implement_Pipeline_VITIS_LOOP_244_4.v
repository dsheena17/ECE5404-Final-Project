// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dut_implement_Pipeline_VITIS_LOOP_244_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul56,
        this_m_pcVecs_address0,
        this_m_pcVecs_ce0,
        this_m_pcVecs_we0,
        this_m_pcVecs_d0,
        this_m_pcVecs_address1,
        this_m_pcVecs_ce1,
        this_m_pcVecs_we1,
        this_m_pcVecs_d1,
        pcVecsNorm_address0,
        pcVecsNorm_ce0,
        pcVecsNorm_q0,
        pcVecsNorm_1_address0,
        pcVecsNorm_1_ce0,
        pcVecsNorm_1_q0,
        pcVecsNorm_2_address0,
        pcVecsNorm_2_ce0,
        pcVecsNorm_2_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] mul56;
output  [6:0] this_m_pcVecs_address0;
output   this_m_pcVecs_ce0;
output   this_m_pcVecs_we0;
output  [63:0] this_m_pcVecs_d0;
output  [6:0] this_m_pcVecs_address1;
output   this_m_pcVecs_ce1;
output   this_m_pcVecs_we1;
output  [63:0] this_m_pcVecs_d1;
output  [3:0] pcVecsNorm_address0;
output   pcVecsNorm_ce0;
input  [63:0] pcVecsNorm_q0;
output  [3:0] pcVecsNorm_1_address0;
output   pcVecsNorm_1_ce0;
input  [63:0] pcVecsNorm_1_q0;
output  [3:0] pcVecsNorm_2_address0;
output   pcVecsNorm_2_ce0;
input  [63:0] pcVecsNorm_2_q0;

reg ap_idle;
reg this_m_pcVecs_ce0;
reg this_m_pcVecs_we0;
reg this_m_pcVecs_ce1;
reg this_m_pcVecs_we1;
reg pcVecsNorm_ce0;
reg pcVecsNorm_1_ce0;
reg pcVecsNorm_2_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln244_fu_152_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] i_1_reg_297;
wire   [63:0] zext_ln244_1_fu_182_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln244_fu_222_p1;
wire   [63:0] zext_ln247_fu_235_p1;
reg   [31:0] phi_urem_fu_52;
wire   [31:0] select_ln244_fu_214_p3;
wire    ap_loop_init;
reg   [64:0] phi_mul_fu_56;
wire   [64:0] add_ln244_2_fu_166_p2;
reg   [31:0] i_fu_60;
wire   [31:0] add_ln244_fu_157_p2;
wire   [63:0] tmp_4_fu_244_p9;
wire   [30:0] tmp_fu_172_p4;
wire   [31:0] add_ln244_1_fu_202_p2;
wire   [0:0] icmp_ln244_1_fu_208_p2;
wire   [6:0] trunc_ln247_fu_226_p1;
wire   [6:0] add_ln247_fu_229_p2;
wire   [63:0] tmp_4_fu_244_p7;
wire   [1:0] tmp_4_fu_244_p8;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [1:0] tmp_4_fu_244_p1;
wire   [1:0] tmp_4_fu_244_p3;
wire  signed [1:0] tmp_4_fu_244_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 phi_urem_fu_52 = 32'd0;
#0 phi_mul_fu_56 = 65'd0;
#0 i_fu_60 = 32'd0;
#0 ap_done_reg = 1'b0;
end

dut_sparsemux_7_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_7_2_64_1_1_U296(
    .din0(pcVecsNorm_q0),
    .din1(pcVecsNorm_1_q0),
    .din2(pcVecsNorm_2_q0),
    .def(tmp_4_fu_244_p7),
    .sel(tmp_4_fu_244_p8),
    .dout(tmp_4_fu_244_p9)
);

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 32'd0;
        end else if (((icmp_ln244_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_60 <= add_ln244_fu_157_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            phi_mul_fu_56 <= 65'd0;
        end else if (((icmp_ln244_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            phi_mul_fu_56 <= add_ln244_2_fu_166_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            phi_urem_fu_52 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            phi_urem_fu_52 <= select_ln244_fu_214_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_297 <= i_fu_60;
    end
end

always @ (*) begin
    if (((icmp_ln244_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pcVecsNorm_1_ce0 = 1'b1;
    end else begin
        pcVecsNorm_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pcVecsNorm_2_ce0 = 1'b1;
    end else begin
        pcVecsNorm_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pcVecsNorm_ce0 = 1'b1;
    end else begin
        pcVecsNorm_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        this_m_pcVecs_ce0 = 1'b1;
    end else begin
        this_m_pcVecs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        this_m_pcVecs_ce1 = 1'b1;
    end else begin
        this_m_pcVecs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        this_m_pcVecs_we0 = 1'b1;
    end else begin
        this_m_pcVecs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        this_m_pcVecs_we1 = 1'b1;
    end else begin
        this_m_pcVecs_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln244_1_fu_202_p2 = (phi_urem_fu_52 + 32'd1);

assign add_ln244_2_fu_166_p2 = (phi_mul_fu_56 + 65'd5726623062);

assign add_ln244_fu_157_p2 = (i_fu_60 + 32'd1);

assign add_ln247_fu_229_p2 = (trunc_ln247_fu_226_p1 + 7'd45);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln244_1_fu_208_p2 = ((add_ln244_1_fu_202_p2 < 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln244_fu_152_p2 = ((i_fu_60 == mul56) ? 1'b1 : 1'b0);

assign pcVecsNorm_1_address0 = zext_ln244_1_fu_182_p1;

assign pcVecsNorm_2_address0 = zext_ln244_1_fu_182_p1;

assign pcVecsNorm_address0 = zext_ln244_1_fu_182_p1;

assign select_ln244_fu_214_p3 = ((icmp_ln244_1_fu_208_p2[0:0] == 1'b1) ? add_ln244_1_fu_202_p2 : 32'd0);

assign this_m_pcVecs_address0 = zext_ln247_fu_235_p1;

assign this_m_pcVecs_address1 = zext_ln244_fu_222_p1;

assign this_m_pcVecs_d0 = tmp_4_fu_244_p9;

assign this_m_pcVecs_d1 = tmp_4_fu_244_p9;

assign tmp_4_fu_244_p7 = 'bx;

assign tmp_4_fu_244_p8 = phi_urem_fu_52[1:0];

assign tmp_fu_172_p4 = {{phi_mul_fu_56[64:34]}};

assign trunc_ln247_fu_226_p1 = i_1_reg_297[6:0];

assign zext_ln244_1_fu_182_p1 = tmp_fu_172_p4;

assign zext_ln244_fu_222_p1 = i_1_reg_297;

assign zext_ln247_fu_235_p1 = add_ln247_fu_229_p2;

endmodule //dut_implement_Pipeline_VITIS_LOOP_244_4

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dut_dut_Pipeline_VITIS_LOOP_277_1_VITIS_LOOP_278_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_ln31,
        rows,
        empty,
        covMatrix_address0,
        covMatrix_ce0,
        covMatrix_q0,
        standarisedData_address0,
        standarisedData_ce0,
        standarisedData_we0,
        standarisedData_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] mul_ln31;
input  [31:0] rows;
input  [7:0] empty;
output  [7:0] covMatrix_address0;
output   covMatrix_ce0;
input  [63:0] covMatrix_q0;
output  [7:0] standarisedData_address0;
output   standarisedData_ce0;
output   standarisedData_we0;
output  [63:0] standarisedData_d0;

reg ap_idle;
reg covMatrix_ce0;
reg standarisedData_ce0;
reg standarisedData_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln277_fu_111_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [7:0] trunc_ln280_fu_159_p1;
wire   [7:0] trunc_ln280_1_fu_177_p1;
reg   [7:0] trunc_ln280_1_reg_268;
reg   [7:0] trunc_ln280_1_reg_268_pp0_iter2_reg;
wire   [7:0] add_ln280_1_fu_181_p2;
reg   [7:0] add_ln280_1_reg_273;
reg   [7:0] add_ln280_1_reg_273_pp0_iter2_reg;
wire   [63:0] zext_ln280_1_fu_208_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln280_fu_212_p1;
reg   [31:0] j_fu_36;
wire   [31:0] add_ln278_fu_187_p2;
wire    ap_loop_init;
reg   [31:0] i_fu_40;
wire   [31:0] select_ln277_1_fu_147_p3;
reg   [63:0] indvar_flatten_fu_44;
wire   [63:0] add_ln277_1_fu_116_p2;
wire   [0:0] icmp_ln278_fu_134_p2;
wire   [31:0] add_ln277_fu_128_p2;
wire   [3:0] trunc_ln277_fu_155_p1;
wire   [7:0] tmp_s_fu_163_p3;
wire   [31:0] select_ln277_fu_139_p3;
wire   [7:0] sub_ln280_fu_171_p2;
wire  signed [7:0] zext_ln280_fu_212_p0;
wire   [7:0] grp_fu_216_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 j_fu_36 = 32'd0;
#0 i_fu_40 = 32'd0;
#0 indvar_flatten_fu_44 = 64'd0;
#0 ap_done_reg = 1'b0;
end

dut_mac_muladd_8s_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mac_muladd_8s_8s_8ns_8_4_1_U88(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln280_fu_159_p1),
    .din1(empty),
    .din2(trunc_ln280_1_reg_268_pp0_iter2_reg),
    .ce(1'b1),
    .dout(grp_fu_216_p3)
);

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 32'd0;
        end else if (((icmp_ln277_fu_111_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_40 <= select_ln277_1_fu_147_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_44 <= 64'd0;
        end else if (((icmp_ln277_fu_111_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_44 <= add_ln277_1_fu_116_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_36 <= 32'd0;
        end else if (((icmp_ln277_fu_111_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_36 <= add_ln278_fu_187_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln280_1_reg_273 <= add_ln280_1_fu_181_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        trunc_ln280_1_reg_268 <= trunc_ln280_1_fu_177_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln280_1_reg_273_pp0_iter2_reg <= add_ln280_1_reg_273;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        trunc_ln280_1_reg_268_pp0_iter2_reg <= trunc_ln280_1_reg_268;
    end
end

always @ (*) begin
    if (((icmp_ln277_fu_111_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        covMatrix_ce0 = 1'b1;
    end else begin
        covMatrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        standarisedData_ce0 = 1'b1;
    end else begin
        standarisedData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        standarisedData_we0 = 1'b1;
    end else begin
        standarisedData_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln277_1_fu_116_p2 = (indvar_flatten_fu_44 + 64'd1);

assign add_ln277_fu_128_p2 = (i_fu_40 + 32'd1);

assign add_ln278_fu_187_p2 = (select_ln277_fu_139_p3 + 32'd1);

assign add_ln280_1_fu_181_p2 = (sub_ln280_fu_171_p2 + trunc_ln280_1_fu_177_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign covMatrix_address0 = zext_ln280_1_fu_208_p1;

assign icmp_ln277_fu_111_p2 = ((indvar_flatten_fu_44 == mul_ln31) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_134_p2 = ((j_fu_36 == rows) ? 1'b1 : 1'b0);

assign select_ln277_1_fu_147_p3 = ((icmp_ln278_fu_134_p2[0:0] == 1'b1) ? add_ln277_fu_128_p2 : i_fu_40);

assign select_ln277_fu_139_p3 = ((icmp_ln278_fu_134_p2[0:0] == 1'b1) ? 32'd0 : j_fu_36);

assign standarisedData_address0 = zext_ln280_fu_212_p1;

assign standarisedData_d0 = covMatrix_q0;

assign sub_ln280_fu_171_p2 = ($signed(tmp_s_fu_163_p3) - $signed(trunc_ln280_fu_159_p1));

assign tmp_s_fu_163_p3 = {{trunc_ln277_fu_155_p1}, {4'd0}};

assign trunc_ln277_fu_155_p1 = select_ln277_1_fu_147_p3[3:0];

assign trunc_ln280_1_fu_177_p1 = select_ln277_fu_139_p3[7:0];

assign trunc_ln280_fu_159_p1 = select_ln277_1_fu_147_p3[7:0];

assign zext_ln280_1_fu_208_p1 = add_ln280_1_reg_273_pp0_iter2_reg;

assign zext_ln280_fu_212_p0 = grp_fu_216_p3;

assign zext_ln280_fu_212_p1 = $unsigned(zext_ln280_fu_212_p0);

endmodule //dut_dut_Pipeline_VITIS_LOOP_277_1_VITIS_LOOP_278_2

-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_funcDataflow_double_16_1_16_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i : IN STD_LOGIC_VECTOR (3 downto 0);
    Order_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Order_ce0 : OUT STD_LOGIC;
    Order_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_c_right_0_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_c_right_1_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_c_right_2_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_c_right_3_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_c_right_4_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_c_right_5_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_c_right_6_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_c_right_7_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_s_right_0_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_s_right_1_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_s_right_2_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_s_right_3_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_s_right_4_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_s_right_5_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_s_right_6_val : IN STD_LOGIC_VECTOR (63 downto 0);
    m_s_right_7_val : IN STD_LOGIC_VECTOR (63 downto 0);
    dataA_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataA_ce0 : OUT STD_LOGIC;
    dataA_we0 : OUT STD_LOGIC;
    dataA_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataA_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    dataA_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataA_ce1 : OUT STD_LOGIC;
    dataA_we1 : OUT STD_LOGIC;
    dataA_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataA_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    dataU_out_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataU_out_ce0 : OUT STD_LOGIC;
    dataU_out_we0 : OUT STD_LOGIC;
    dataU_out_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataU_out_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    dataU_out_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataU_out_ce1 : OUT STD_LOGIC;
    dataU_out_we1 : OUT STD_LOGIC;
    dataU_out_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataU_out_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    lda : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1231_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1231_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1231_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1231_p_ce : OUT STD_LOGIC;
    grp_fu_1235_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1235_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1235_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1235_p_ce : OUT STD_LOGIC );
end;


architecture behav of dut_funcDataflow_double_16_1_16_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_14_fu_422_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_722 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln883_fu_478_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln883_reg_730 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln883_1_fu_486_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln883_1_reg_735 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln883_1_reg_735_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal Order1_addr_reg_739 : STD_LOGIC_VECTOR (3 downto 0);
    signal Order1_addr_reg_739_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal Order1_1_addr_reg_744 : STD_LOGIC_VECTOR (3 downto 0);
    signal Order1_1_addr_reg_744_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal Order1_2_addr_reg_749 : STD_LOGIC_VECTOR (3 downto 0);
    signal Order1_2_addr_reg_749_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln883_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal Order1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Order1_ce0 : STD_LOGIC;
    signal Order1_we0 : STD_LOGIC;
    signal Order1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Order1_ce1 : STD_LOGIC;
    signal Order1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Order1_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Order1_1_ce0 : STD_LOGIC;
    signal Order1_1_we0 : STD_LOGIC;
    signal Order1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Order1_1_ce1 : STD_LOGIC;
    signal Order1_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Order1_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Order1_2_ce0 : STD_LOGIC;
    signal Order1_2_we0 : STD_LOGIC;
    signal Order1_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Order1_2_ce1 : STD_LOGIC;
    signal Order1_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_c_right1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_c_right1_ce0 : STD_LOGIC;
    signal m_c_right1_we0 : STD_LOGIC;
    signal m_c_right1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_c_right1_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_c_right1_1_ce0 : STD_LOGIC;
    signal m_c_right1_1_we0 : STD_LOGIC;
    signal m_c_right1_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_c_right1_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_c_right1_2_ce0 : STD_LOGIC;
    signal m_c_right1_2_we0 : STD_LOGIC;
    signal m_c_right1_2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_s_right1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s_right1_ce0 : STD_LOGIC;
    signal m_s_right1_we0 : STD_LOGIC;
    signal m_s_right1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_s_right1_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s_right1_1_ce0 : STD_LOGIC;
    signal m_s_right1_1_we0 : STD_LOGIC;
    signal m_s_right1_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_s_right1_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_s_right1_2_ce0 : STD_LOGIC;
    signal m_s_right1_2_we0 : STD_LOGIC;
    signal m_s_right1_2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_ap_start : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_ap_done : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_ap_idle : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_ap_ready : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_Order_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_Order_ce0 : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_Order_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_Order_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_Order_ce1 : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_Order_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_ce0 : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_ce0 : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_dataA16_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_dataA16_ce0 : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_dataA16_we0 : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_dataA16_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_dataA16_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_dataA16_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_dataA16_ce1 : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_dataA16_we1 : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_dataA16_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollRow_double_16_1_16_9_fu_401_dataA16_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_ap_start : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_ap_done : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_ap_idle : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_ap_ready : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_Order_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_Order_ce0 : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_Order_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_Order_ce1 : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_m_c_right_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_m_c_right_ce0 : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_m_s_right_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_m_s_right_ce0 : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_dataA16_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_dataA16_ce0 : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_dataA16_we0 : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_dataA16_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_dataA16_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_dataA16_ce1 : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_dataA16_we1 : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_dataA16_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_759_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_759_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_759_p_ce : STD_LOGIC;
    signal grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_763_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_763_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_763_p_ce : STD_LOGIC;
    signal grp_unrollRow_double_16_1_16_9_fu_401_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_unrollCol_double_16_1_16_10_fu_412_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln887_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln890_1_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_124 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln887_fu_581_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_fu_128 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal indvar_flatten_fu_132 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln883_1_fu_454_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_511_p19 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_546_p19 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln887_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln883_fu_466_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_511_p17 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln887_fu_507_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_546_p17 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln890_fu_602_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln890_fu_605_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_759_ce : STD_LOGIC;
    signal grp_fu_763_ce : STD_LOGIC;
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal tmp_fu_511_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_511_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_511_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_511_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_511_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_511_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_511_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_511_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_546_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_546_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_546_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_546_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_546_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_546_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_546_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_546_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component dut_unrollRow_double_16_1_16_9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lda : IN STD_LOGIC_VECTOR (31 downto 0);
        Order_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Order_ce0 : OUT STD_LOGIC;
        Order_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Order_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Order_ce1 : OUT STD_LOGIC;
        Order_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_c_right_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_c_right_ce0 : OUT STD_LOGIC;
        m_c_right_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_s_right_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_s_right_ce0 : OUT STD_LOGIC;
        m_s_right_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dataA16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dataA16_ce0 : OUT STD_LOGIC;
        dataA16_we0 : OUT STD_LOGIC;
        dataA16_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        dataA16_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dataA16_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dataA16_ce1 : OUT STD_LOGIC;
        dataA16_we1 : OUT STD_LOGIC;
        dataA16_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        dataA16_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_unrollCol_double_16_1_16_10 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lda : IN STD_LOGIC_VECTOR (31 downto 0);
        Order_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Order_ce0 : OUT STD_LOGIC;
        Order_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Order_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Order_ce1 : OUT STD_LOGIC;
        Order_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_c_right_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_c_right_ce0 : OUT STD_LOGIC;
        m_c_right_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_s_right_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_s_right_ce0 : OUT STD_LOGIC;
        m_s_right_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dataA16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dataA16_ce0 : OUT STD_LOGIC;
        dataA16_we0 : OUT STD_LOGIC;
        dataA16_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        dataA16_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dataA16_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dataA16_ce1 : OUT STD_LOGIC;
        dataA16_we1 : OUT STD_LOGIC;
        dataA16_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        dataA16_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_759_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_759_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_759_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_759_p_ce : OUT STD_LOGIC;
        grp_fu_763_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_763_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_763_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_763_p_ce : OUT STD_LOGIC );
    end component;


    component dut_sparsemux_17_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_dmul_64ns_64ns_64_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_funcDataflow_double_16_1_16_8_Order1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_funcDataflow_double_16_1_16_8_m_c_right1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    Order1_U : component dut_funcDataflow_double_16_1_16_8_Order1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Order1_address0,
        ce0 => Order1_ce0,
        we0 => Order1_we0,
        d0 => Order_q0,
        q0 => Order1_q0,
        address1 => grp_unrollRow_double_16_1_16_9_fu_401_Order_address1,
        ce1 => Order1_ce1,
        q1 => Order1_q1);

    Order1_1_U : component dut_funcDataflow_double_16_1_16_8_Order1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Order1_1_address0,
        ce0 => Order1_1_ce0,
        we0 => Order1_1_we0,
        d0 => Order_q0,
        q0 => Order1_1_q0,
        address1 => grp_unrollRow_double_16_1_16_9_fu_401_Order_address1,
        ce1 => Order1_1_ce1,
        q1 => Order1_1_q1);

    Order1_2_U : component dut_funcDataflow_double_16_1_16_8_Order1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Order1_2_address0,
        ce0 => Order1_2_ce0,
        we0 => Order1_2_we0,
        d0 => Order_q0,
        q0 => Order1_2_q0,
        address1 => grp_unrollCol_double_16_1_16_10_fu_412_Order_address1,
        ce1 => Order1_2_ce1,
        q1 => Order1_2_q1);

    m_c_right1_U : component dut_funcDataflow_double_16_1_16_8_m_c_right1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_c_right1_address0,
        ce0 => m_c_right1_ce0,
        we0 => m_c_right1_we0,
        d0 => tmp_fu_511_p19,
        q0 => m_c_right1_q0);

    m_c_right1_1_U : component dut_funcDataflow_double_16_1_16_8_m_c_right1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_c_right1_1_address0,
        ce0 => m_c_right1_1_ce0,
        we0 => m_c_right1_1_we0,
        d0 => tmp_fu_511_p19,
        q0 => m_c_right1_1_q0);

    m_c_right1_2_U : component dut_funcDataflow_double_16_1_16_8_m_c_right1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_c_right1_2_address0,
        ce0 => m_c_right1_2_ce0,
        we0 => m_c_right1_2_we0,
        d0 => tmp_fu_511_p19,
        q0 => m_c_right1_2_q0);

    m_s_right1_U : component dut_funcDataflow_double_16_1_16_8_m_c_right1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_s_right1_address0,
        ce0 => m_s_right1_ce0,
        we0 => m_s_right1_we0,
        d0 => tmp_s_fu_546_p19,
        q0 => m_s_right1_q0);

    m_s_right1_1_U : component dut_funcDataflow_double_16_1_16_8_m_c_right1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_s_right1_1_address0,
        ce0 => m_s_right1_1_ce0,
        we0 => m_s_right1_1_we0,
        d0 => tmp_s_fu_546_p19,
        q0 => m_s_right1_1_q0);

    m_s_right1_2_U : component dut_funcDataflow_double_16_1_16_8_m_c_right1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_s_right1_2_address0,
        ce0 => m_s_right1_2_ce0,
        we0 => m_s_right1_2_we0,
        d0 => tmp_s_fu_546_p19,
        q0 => m_s_right1_2_q0);

    grp_unrollRow_double_16_1_16_9_fu_401 : component dut_unrollRow_double_16_1_16_9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_unrollRow_double_16_1_16_9_fu_401_ap_start,
        ap_done => grp_unrollRow_double_16_1_16_9_fu_401_ap_done,
        ap_idle => grp_unrollRow_double_16_1_16_9_fu_401_ap_idle,
        ap_ready => grp_unrollRow_double_16_1_16_9_fu_401_ap_ready,
        lda => lda,
        Order_address0 => grp_unrollRow_double_16_1_16_9_fu_401_Order_address0,
        Order_ce0 => grp_unrollRow_double_16_1_16_9_fu_401_Order_ce0,
        Order_q0 => grp_unrollRow_double_16_1_16_9_fu_401_Order_q0,
        Order_address1 => grp_unrollRow_double_16_1_16_9_fu_401_Order_address1,
        Order_ce1 => grp_unrollRow_double_16_1_16_9_fu_401_Order_ce1,
        Order_q1 => grp_unrollRow_double_16_1_16_9_fu_401_Order_q1,
        m_c_right_address0 => grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_address0,
        m_c_right_ce0 => grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_ce0,
        m_c_right_q0 => grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_q0,
        m_s_right_address0 => grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_address0,
        m_s_right_ce0 => grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_ce0,
        m_s_right_q0 => grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_q0,
        dataA16_address0 => grp_unrollRow_double_16_1_16_9_fu_401_dataA16_address0,
        dataA16_ce0 => grp_unrollRow_double_16_1_16_9_fu_401_dataA16_ce0,
        dataA16_we0 => grp_unrollRow_double_16_1_16_9_fu_401_dataA16_we0,
        dataA16_d0 => grp_unrollRow_double_16_1_16_9_fu_401_dataA16_d0,
        dataA16_q0 => grp_unrollRow_double_16_1_16_9_fu_401_dataA16_q0,
        dataA16_address1 => grp_unrollRow_double_16_1_16_9_fu_401_dataA16_address1,
        dataA16_ce1 => grp_unrollRow_double_16_1_16_9_fu_401_dataA16_ce1,
        dataA16_we1 => grp_unrollRow_double_16_1_16_9_fu_401_dataA16_we1,
        dataA16_d1 => grp_unrollRow_double_16_1_16_9_fu_401_dataA16_d1,
        dataA16_q1 => grp_unrollRow_double_16_1_16_9_fu_401_dataA16_q1);

    grp_unrollCol_double_16_1_16_10_fu_412 : component dut_unrollCol_double_16_1_16_10
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_unrollCol_double_16_1_16_10_fu_412_ap_start,
        ap_done => grp_unrollCol_double_16_1_16_10_fu_412_ap_done,
        ap_idle => grp_unrollCol_double_16_1_16_10_fu_412_ap_idle,
        ap_ready => grp_unrollCol_double_16_1_16_10_fu_412_ap_ready,
        lda => lda,
        Order_address0 => grp_unrollCol_double_16_1_16_10_fu_412_Order_address0,
        Order_ce0 => grp_unrollCol_double_16_1_16_10_fu_412_Order_ce0,
        Order_q0 => Order1_2_q0,
        Order_address1 => grp_unrollCol_double_16_1_16_10_fu_412_Order_address1,
        Order_ce1 => grp_unrollCol_double_16_1_16_10_fu_412_Order_ce1,
        Order_q1 => Order1_2_q1,
        m_c_right_address0 => grp_unrollCol_double_16_1_16_10_fu_412_m_c_right_address0,
        m_c_right_ce0 => grp_unrollCol_double_16_1_16_10_fu_412_m_c_right_ce0,
        m_c_right_q0 => m_c_right1_2_q0,
        m_s_right_address0 => grp_unrollCol_double_16_1_16_10_fu_412_m_s_right_address0,
        m_s_right_ce0 => grp_unrollCol_double_16_1_16_10_fu_412_m_s_right_ce0,
        m_s_right_q0 => m_s_right1_2_q0,
        dataA16_address0 => grp_unrollCol_double_16_1_16_10_fu_412_dataA16_address0,
        dataA16_ce0 => grp_unrollCol_double_16_1_16_10_fu_412_dataA16_ce0,
        dataA16_we0 => grp_unrollCol_double_16_1_16_10_fu_412_dataA16_we0,
        dataA16_d0 => grp_unrollCol_double_16_1_16_10_fu_412_dataA16_d0,
        dataA16_q0 => dataA_q0,
        dataA16_address1 => grp_unrollCol_double_16_1_16_10_fu_412_dataA16_address1,
        dataA16_ce1 => grp_unrollCol_double_16_1_16_10_fu_412_dataA16_ce1,
        dataA16_we1 => grp_unrollCol_double_16_1_16_10_fu_412_dataA16_we1,
        dataA16_d1 => grp_unrollCol_double_16_1_16_10_fu_412_dataA16_d1,
        dataA16_q1 => dataA_q1,
        grp_fu_759_p_din0 => grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_759_p_din0,
        grp_fu_759_p_din1 => grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_759_p_din1,
        grp_fu_759_p_dout0 => grp_fu_1231_p_dout0,
        grp_fu_759_p_ce => grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_759_p_ce,
        grp_fu_763_p_din0 => grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_763_p_din0,
        grp_fu_763_p_din1 => grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_763_p_din1,
        grp_fu_763_p_dout0 => grp_fu_1235_p_dout0,
        grp_fu_763_p_ce => grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_763_p_ce);

    sparsemux_17_3_64_1_1_U196 : component dut_sparsemux_17_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 64,
        CASE1 => "001",
        din1_WIDTH => 64,
        CASE2 => "010",
        din2_WIDTH => 64,
        CASE3 => "011",
        din3_WIDTH => 64,
        CASE4 => "100",
        din4_WIDTH => 64,
        CASE5 => "101",
        din5_WIDTH => 64,
        CASE6 => "110",
        din6_WIDTH => 64,
        CASE7 => "111",
        din7_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => m_c_right_0_val,
        din1 => m_c_right_1_val,
        din2 => m_c_right_2_val,
        din3 => m_c_right_3_val,
        din4 => m_c_right_4_val,
        din5 => m_c_right_5_val,
        din6 => m_c_right_6_val,
        din7 => m_c_right_7_val,
        def => tmp_fu_511_p17,
        sel => trunc_ln887_fu_507_p1,
        dout => tmp_fu_511_p19);

    sparsemux_17_3_64_1_1_U197 : component dut_sparsemux_17_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 64,
        CASE1 => "001",
        din1_WIDTH => 64,
        CASE2 => "010",
        din2_WIDTH => 64,
        CASE3 => "011",
        din3_WIDTH => 64,
        CASE4 => "100",
        din4_WIDTH => 64,
        CASE5 => "101",
        din5_WIDTH => 64,
        CASE6 => "110",
        din6_WIDTH => 64,
        CASE7 => "111",
        din7_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => m_s_right_0_val,
        din1 => m_s_right_1_val,
        din2 => m_s_right_2_val,
        din3 => m_s_right_3_val,
        din4 => m_s_right_4_val,
        din5 => m_s_right_5_val,
        din6 => m_s_right_6_val,
        din7 => m_s_right_7_val,
        def => tmp_s_fu_546_p17,
        sel => trunc_ln887_fu_507_p1,
        dout => tmp_s_fu_546_p19);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_unrollCol_double_16_1_16_10_fu_412_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_unrollCol_double_16_1_16_10_fu_412_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_unrollCol_double_16_1_16_10_fu_412_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_unrollCol_double_16_1_16_10_fu_412_ap_ready = ap_const_logic_1)) then 
                    grp_unrollCol_double_16_1_16_10_fu_412_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_unrollRow_double_16_1_16_9_fu_401_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_unrollRow_double_16_1_16_9_fu_401_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_unrollRow_double_16_1_16_9_fu_401_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_unrollRow_double_16_1_16_9_fu_401_ap_ready = ap_const_logic_1)) then 
                    grp_unrollRow_double_16_1_16_9_fu_401_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_fu_132 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln883_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_fu_132 <= add_ln883_1_fu_454_p2;
            end if; 
        end if;
    end process;

    j_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_fu_124 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln883_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_fu_124 <= add_ln887_fu_581_p2;
            end if; 
        end if;
    end process;

    k_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_fu_128 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln883_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_fu_128 <= select_ln883_1_fu_486_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Order1_1_addr_reg_744 <= zext_ln887_fu_494_p1(4 - 1 downto 0);
                Order1_1_addr_reg_744_pp0_iter1_reg <= Order1_1_addr_reg_744;
                Order1_2_addr_reg_749 <= zext_ln887_fu_494_p1(4 - 1 downto 0);
                Order1_2_addr_reg_749_pp0_iter1_reg <= Order1_2_addr_reg_749;
                Order1_addr_reg_739 <= zext_ln887_fu_494_p1(4 - 1 downto 0);
                Order1_addr_reg_739_pp0_iter1_reg <= Order1_addr_reg_739;
                select_ln883_1_reg_735 <= select_ln883_1_fu_486_p3;
                select_ln883_1_reg_735_pp0_iter1_reg <= select_ln883_1_reg_735;
                select_ln883_reg_730 <= select_ln883_fu_478_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    tmp_14_reg_722(7 downto 4) <= tmp_14_fu_422_p3(7 downto 4);
            end if;
        end if;
    end process;
    tmp_14_reg_722(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln883_fu_448_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, grp_unrollRow_double_16_1_16_9_fu_401_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_block_state8_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln883_fu_448_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln883_fu_448_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_unrollRow_double_16_1_16_9_fu_401_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    Order1_1_address0_assign_proc : process(Order1_1_addr_reg_744_pp0_iter1_reg, ap_enable_reg_pp0_iter2, grp_unrollRow_double_16_1_16_9_fu_401_Order_address0, ap_CS_fsm_state8, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Order1_1_address0 <= Order1_1_addr_reg_744_pp0_iter1_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Order1_1_address0 <= grp_unrollRow_double_16_1_16_9_fu_401_Order_address0;
        else 
            Order1_1_address0 <= "XXXX";
        end if; 
    end process;


    Order1_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_unrollRow_double_16_1_16_9_fu_401_Order_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Order1_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Order1_1_ce0 <= grp_unrollRow_double_16_1_16_9_fu_401_Order_ce0;
        else 
            Order1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Order1_1_ce1_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_Order_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Order1_1_ce1 <= grp_unrollRow_double_16_1_16_9_fu_401_Order_ce1;
        else 
            Order1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Order1_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln883_1_reg_735_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln883_1_reg_735_pp0_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Order1_1_we0 <= ap_const_logic_1;
        else 
            Order1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Order1_2_address0_assign_proc : process(Order1_2_addr_reg_749_pp0_iter1_reg, ap_enable_reg_pp0_iter2, grp_unrollCol_double_16_1_16_10_fu_412_Order_address0, ap_CS_fsm_state8, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Order1_2_address0 <= Order1_2_addr_reg_749_pp0_iter1_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Order1_2_address0 <= grp_unrollCol_double_16_1_16_10_fu_412_Order_address0;
        else 
            Order1_2_address0 <= "XXXX";
        end if; 
    end process;


    Order1_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_unrollCol_double_16_1_16_10_fu_412_Order_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Order1_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Order1_2_ce0 <= grp_unrollCol_double_16_1_16_10_fu_412_Order_ce0;
        else 
            Order1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Order1_2_ce1_assign_proc : process(grp_unrollCol_double_16_1_16_10_fu_412_Order_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Order1_2_ce1 <= grp_unrollCol_double_16_1_16_10_fu_412_Order_ce1;
        else 
            Order1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Order1_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln883_1_reg_735_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if ((not((select_ln883_1_reg_735_pp0_iter1_reg = ap_const_lv2_0)) and not((select_ln883_1_reg_735_pp0_iter1_reg = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Order1_2_we0 <= ap_const_logic_1;
        else 
            Order1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Order1_address0_assign_proc : process(Order1_addr_reg_739_pp0_iter1_reg, ap_enable_reg_pp0_iter2, grp_unrollRow_double_16_1_16_9_fu_401_Order_address0, ap_CS_fsm_state6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Order1_address0 <= Order1_addr_reg_739_pp0_iter1_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Order1_address0 <= grp_unrollRow_double_16_1_16_9_fu_401_Order_address0;
        else 
            Order1_address0 <= "XXXX";
        end if; 
    end process;


    Order1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_unrollRow_double_16_1_16_9_fu_401_Order_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Order1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Order1_ce0 <= grp_unrollRow_double_16_1_16_9_fu_401_Order_ce0;
        else 
            Order1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Order1_ce1_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_Order_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Order1_ce1 <= grp_unrollRow_double_16_1_16_9_fu_401_Order_ce1;
        else 
            Order1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Order1_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln883_1_reg_735_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln883_1_reg_735_pp0_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Order1_we0 <= ap_const_logic_1;
        else 
            Order1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Order_address0 <= zext_ln890_1_fu_610_p1(8 - 1 downto 0);

    Order_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Order_ce0 <= ap_const_logic_1;
        else 
            Order_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln883_1_fu_454_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_132) + unsigned(ap_const_lv6_1));
    add_ln883_fu_466_p2 <= std_logic_vector(unsigned(k_fu_128) + unsigned(ap_const_lv2_1));
    add_ln887_fu_581_p2 <= std_logic_vector(unsigned(select_ln883_fu_478_p3) + unsigned(ap_const_lv5_1));
    add_ln890_fu_605_p2 <= std_logic_vector(unsigned(tmp_14_reg_722) + unsigned(zext_ln890_fu_602_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_ap_done)
    begin
        if ((grp_unrollRow_double_16_1_16_9_fu_401_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(ap_block_state8_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state8_on_subcall_done)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_on_subcall_done_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_ap_done, grp_unrollCol_double_16_1_16_10_fu_412_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_unrollCol_double_16_1_16_10_fu_412_ap_done = ap_const_logic_0) or (grp_unrollRow_double_16_1_16_9_fu_401_ap_done = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln883_fu_448_p2)
    begin
        if ((icmp_ln883_fu_448_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, ap_block_state8_on_subcall_done)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, ap_block_state8_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dataA_address0_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_dataA16_address0, grp_unrollCol_double_16_1_16_10_fu_412_dataA16_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dataA_address0 <= grp_unrollCol_double_16_1_16_10_fu_412_dataA16_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dataA_address0 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_address0;
        else 
            dataA_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dataA_address1_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_dataA16_address1, grp_unrollCol_double_16_1_16_10_fu_412_dataA16_address1, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dataA_address1 <= grp_unrollCol_double_16_1_16_10_fu_412_dataA16_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dataA_address1 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_address1;
        else 
            dataA_address1 <= "XXXXXXXX";
        end if; 
    end process;


    dataA_ce0_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_dataA16_ce0, grp_unrollCol_double_16_1_16_10_fu_412_dataA16_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dataA_ce0 <= grp_unrollCol_double_16_1_16_10_fu_412_dataA16_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dataA_ce0 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_ce0;
        else 
            dataA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dataA_ce1_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_dataA16_ce1, grp_unrollCol_double_16_1_16_10_fu_412_dataA16_ce1, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dataA_ce1 <= grp_unrollCol_double_16_1_16_10_fu_412_dataA16_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dataA_ce1 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_ce1;
        else 
            dataA_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dataA_d0_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_dataA16_d0, grp_unrollCol_double_16_1_16_10_fu_412_dataA16_d0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dataA_d0 <= grp_unrollCol_double_16_1_16_10_fu_412_dataA16_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dataA_d0 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_d0;
        else 
            dataA_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dataA_d1_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_dataA16_d1, grp_unrollCol_double_16_1_16_10_fu_412_dataA16_d1, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dataA_d1 <= grp_unrollCol_double_16_1_16_10_fu_412_dataA16_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dataA_d1 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_d1;
        else 
            dataA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dataA_we0_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_dataA16_we0, grp_unrollCol_double_16_1_16_10_fu_412_dataA16_we0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dataA_we0 <= grp_unrollCol_double_16_1_16_10_fu_412_dataA16_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dataA_we0 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_we0;
        else 
            dataA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dataA_we1_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_dataA16_we1, grp_unrollCol_double_16_1_16_10_fu_412_dataA16_we1, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dataA_we1 <= grp_unrollCol_double_16_1_16_10_fu_412_dataA16_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dataA_we1 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_we1;
        else 
            dataA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dataU_out_address0 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_address0;
    dataU_out_address1 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_address1;

    dataU_out_ce0_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_dataA16_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dataU_out_ce0 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_ce0;
        else 
            dataU_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dataU_out_ce1_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_dataA16_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dataU_out_ce1 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_ce1;
        else 
            dataU_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dataU_out_d0 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_d0;
    dataU_out_d1 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_d1;

    dataU_out_we0_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_dataA16_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dataU_out_we0 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_we0;
        else 
            dataU_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dataU_out_we1_assign_proc : process(grp_unrollRow_double_16_1_16_9_fu_401_dataA16_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dataU_out_we1 <= grp_unrollRow_double_16_1_16_9_fu_401_dataA16_we1;
        else 
            dataU_out_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1231_p_ce <= grp_fu_759_ce;
    grp_fu_1231_p_din0 <= grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_759_p_din0;
    grp_fu_1231_p_din1 <= grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_759_p_din1;
    grp_fu_1235_p_ce <= grp_fu_763_ce;
    grp_fu_1235_p_din0 <= grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_763_p_din0;
    grp_fu_1235_p_din1 <= grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_763_p_din1;

    grp_fu_759_ce_assign_proc : process(grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_759_p_ce, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_759_ce <= grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_759_p_ce;
        else 
            grp_fu_759_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_763_ce_assign_proc : process(grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_763_p_ce, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_763_ce <= grp_unrollCol_double_16_1_16_10_fu_412_grp_fu_763_p_ce;
        else 
            grp_fu_763_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_unrollCol_double_16_1_16_10_fu_412_ap_start <= grp_unrollCol_double_16_1_16_10_fu_412_ap_start_reg;

    grp_unrollRow_double_16_1_16_9_fu_401_Order_q0_assign_proc : process(Order1_q0, Order1_1_q0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_unrollRow_double_16_1_16_9_fu_401_Order_q0 <= Order1_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_unrollRow_double_16_1_16_9_fu_401_Order_q0 <= Order1_q0;
        else 
            grp_unrollRow_double_16_1_16_9_fu_401_Order_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_unrollRow_double_16_1_16_9_fu_401_Order_q1_assign_proc : process(Order1_q1, Order1_1_q1, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_unrollRow_double_16_1_16_9_fu_401_Order_q1 <= Order1_1_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_unrollRow_double_16_1_16_9_fu_401_Order_q1 <= Order1_q1;
        else 
            grp_unrollRow_double_16_1_16_9_fu_401_Order_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_unrollRow_double_16_1_16_9_fu_401_ap_start <= grp_unrollRow_double_16_1_16_9_fu_401_ap_start_reg;

    grp_unrollRow_double_16_1_16_9_fu_401_dataA16_q0_assign_proc : process(dataA_q0, dataU_out_q0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_unrollRow_double_16_1_16_9_fu_401_dataA16_q0 <= dataU_out_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_unrollRow_double_16_1_16_9_fu_401_dataA16_q0 <= dataA_q0;
        else 
            grp_unrollRow_double_16_1_16_9_fu_401_dataA16_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_unrollRow_double_16_1_16_9_fu_401_dataA16_q1_assign_proc : process(dataA_q1, dataU_out_q1, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_unrollRow_double_16_1_16_9_fu_401_dataA16_q1 <= dataU_out_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_unrollRow_double_16_1_16_9_fu_401_dataA16_q1 <= dataA_q1;
        else 
            grp_unrollRow_double_16_1_16_9_fu_401_dataA16_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_q0_assign_proc : process(m_c_right1_q0, m_c_right1_1_q0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_q0 <= m_c_right1_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_q0 <= m_c_right1_q0;
        else 
            grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_q0_assign_proc : process(m_s_right1_q0, m_s_right1_1_q0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_q0 <= m_s_right1_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_q0 <= m_s_right1_q0;
        else 
            grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln883_fu_448_p2 <= "1" when (indvar_flatten_fu_132 = ap_const_lv6_30) else "0";
    icmp_ln887_fu_472_p2 <= "1" when (j_fu_124 = ap_const_lv5_10) else "0";

    m_c_right1_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_address0, ap_CS_fsm_state8, zext_ln887_fu_494_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            m_c_right1_1_address0 <= zext_ln887_fu_494_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_c_right1_1_address0 <= grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_address0;
        else 
            m_c_right1_1_address0 <= "XXXX";
        end if; 
    end process;


    m_c_right1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_c_right1_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_c_right1_1_ce0 <= grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_ce0;
        else 
            m_c_right1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_c_right1_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln883_1_fu_486_p3, ap_enable_reg_pp0_iter0, icmp_ln883_fu_448_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln883_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (select_ln883_1_fu_486_p3 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_c_right1_1_we0 <= ap_const_logic_1;
        else 
            m_c_right1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_c_right1_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_unrollCol_double_16_1_16_10_fu_412_m_c_right_address0, ap_CS_fsm_state8, zext_ln887_fu_494_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            m_c_right1_2_address0 <= zext_ln887_fu_494_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_c_right1_2_address0 <= grp_unrollCol_double_16_1_16_10_fu_412_m_c_right_address0;
        else 
            m_c_right1_2_address0 <= "XXXX";
        end if; 
    end process;


    m_c_right1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_unrollCol_double_16_1_16_10_fu_412_m_c_right_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_c_right1_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_c_right1_2_ce0 <= grp_unrollCol_double_16_1_16_10_fu_412_m_c_right_ce0;
        else 
            m_c_right1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_c_right1_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln883_1_fu_486_p3, ap_enable_reg_pp0_iter0, icmp_ln883_fu_448_p2)
    begin
        if ((not((select_ln883_1_fu_486_p3 = ap_const_lv2_0)) and not((select_ln883_1_fu_486_p3 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln883_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_c_right1_2_we0 <= ap_const_logic_1;
        else 
            m_c_right1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_c_right1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_address0, ap_CS_fsm_state6, zext_ln887_fu_494_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            m_c_right1_address0 <= zext_ln887_fu_494_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_c_right1_address0 <= grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_address0;
        else 
            m_c_right1_address0 <= "XXXX";
        end if; 
    end process;


    m_c_right1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_c_right1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_c_right1_ce0 <= grp_unrollRow_double_16_1_16_9_fu_401_m_c_right_ce0;
        else 
            m_c_right1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_c_right1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln883_1_fu_486_p3, ap_enable_reg_pp0_iter0, icmp_ln883_fu_448_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln883_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (select_ln883_1_fu_486_p3 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_c_right1_we0 <= ap_const_logic_1;
        else 
            m_c_right1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_s_right1_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_address0, ap_CS_fsm_state8, zext_ln887_fu_494_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            m_s_right1_1_address0 <= zext_ln887_fu_494_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_s_right1_1_address0 <= grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_address0;
        else 
            m_s_right1_1_address0 <= "XXXX";
        end if; 
    end process;


    m_s_right1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_s_right1_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_s_right1_1_ce0 <= grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_ce0;
        else 
            m_s_right1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_s_right1_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln883_1_fu_486_p3, ap_enable_reg_pp0_iter0, icmp_ln883_fu_448_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln883_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (select_ln883_1_fu_486_p3 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_s_right1_1_we0 <= ap_const_logic_1;
        else 
            m_s_right1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_s_right1_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_unrollCol_double_16_1_16_10_fu_412_m_s_right_address0, ap_CS_fsm_state8, zext_ln887_fu_494_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            m_s_right1_2_address0 <= zext_ln887_fu_494_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_s_right1_2_address0 <= grp_unrollCol_double_16_1_16_10_fu_412_m_s_right_address0;
        else 
            m_s_right1_2_address0 <= "XXXX";
        end if; 
    end process;


    m_s_right1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_unrollCol_double_16_1_16_10_fu_412_m_s_right_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_s_right1_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_s_right1_2_ce0 <= grp_unrollCol_double_16_1_16_10_fu_412_m_s_right_ce0;
        else 
            m_s_right1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_s_right1_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln883_1_fu_486_p3, ap_enable_reg_pp0_iter0, icmp_ln883_fu_448_p2)
    begin
        if ((not((select_ln883_1_fu_486_p3 = ap_const_lv2_0)) and not((select_ln883_1_fu_486_p3 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln883_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_s_right1_2_we0 <= ap_const_logic_1;
        else 
            m_s_right1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_s_right1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_address0, ap_CS_fsm_state6, zext_ln887_fu_494_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            m_s_right1_address0 <= zext_ln887_fu_494_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_s_right1_address0 <= grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_address0;
        else 
            m_s_right1_address0 <= "XXXX";
        end if; 
    end process;


    m_s_right1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_s_right1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_s_right1_ce0 <= grp_unrollRow_double_16_1_16_9_fu_401_m_s_right_ce0;
        else 
            m_s_right1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_s_right1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, select_ln883_1_fu_486_p3, ap_enable_reg_pp0_iter0, icmp_ln883_fu_448_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln883_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (select_ln883_1_fu_486_p3 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_s_right1_we0 <= ap_const_logic_1;
        else 
            m_s_right1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln883_1_fu_486_p3 <= 
        add_ln883_fu_466_p2 when (icmp_ln887_fu_472_p2(0) = '1') else 
        k_fu_128;
    select_ln883_fu_478_p3 <= 
        ap_const_lv5_0 when (icmp_ln887_fu_472_p2(0) = '1') else 
        j_fu_124;
    tmp_14_fu_422_p3 <= (i & ap_const_lv4_0);
    tmp_fu_511_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_s_fu_546_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln887_fu_507_p1 <= select_ln883_fu_478_p3(3 - 1 downto 0);
    zext_ln887_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln883_fu_478_p3),64));
    zext_ln890_1_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln890_fu_605_p2),64));
    zext_ln890_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln883_reg_730),8));
end behav;

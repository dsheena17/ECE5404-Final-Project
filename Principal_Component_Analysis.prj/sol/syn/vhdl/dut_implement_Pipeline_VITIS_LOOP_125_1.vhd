-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_implement_Pipeline_VITIS_LOOP_125_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dSortedBuf_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    dSortedBuf_ce0 : OUT STD_LOGIC;
    dSortedBuf_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bitcast_ln126 : IN STD_LOGIC_VECTOR (62 downto 0);
    empty : IN STD_LOGIC_VECTOR (51 downto 0);
    eigVals_load : IN STD_LOGIC_VECTOR (63 downto 0);
    j_2_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    j_2_out_ap_vld : OUT STD_LOGIC;
    zext_ln125_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    zext_ln125_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_709_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_709_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_709_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_709_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_709_p_ce : OUT STD_LOGIC );
end;


architecture behav of dut_implement_Pipeline_VITIS_LOOP_125_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_1_reg_249 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln125_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_1_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_1_reg_270 : STD_LOGIC_VECTOR (0 downto 0);
    signal dSortedBuf_load_reg_275 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln125_fu_169_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln125_reg_281 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln126_2_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_2_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_3_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_3_reg_291 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal and_ln126_1_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_tran5to7_state5 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_UnifiedRetVal_phi_fu_118_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal UnifiedRetVal_reg_114 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln125_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_fu_64 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_s_fu_149_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln126_1_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_177_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln126_fu_187_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal or_ln126_1_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln126_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln126_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_118_p4;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_reg_256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                UnifiedRetVal_reg_114 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                UnifiedRetVal_reg_114 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    j_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_fu_64 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_fu_64 <= add_ln125_reg_281;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln125_reg_281 <= add_ln125_fu_169_p2;
                icmp_ln126_2_reg_286 <= icmp_ln126_2_fu_191_p2;
                icmp_ln126_3_reg_291 <= icmp_ln126_3_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                dSortedBuf_load_reg_275 <= dSortedBuf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln125_reg_256 <= icmp_ln125_fu_138_p2;
                j_1_reg_249 <= ap_sig_allocacmp_j_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln126_1_reg_270 <= icmp_ln126_1_fu_164_p2;
                icmp_ln126_reg_265 <= icmp_ln126_fu_158_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln125_reg_256, ap_block_pp0_stage3_subdone, ap_predicate_tran5to7_state5, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not((((icmp_ln125_reg_256 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_tran5to7_state5 = ap_const_boolean_1)))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln125_reg_256 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_tran5to7_state5 = ap_const_boolean_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln125_fu_169_p2 <= std_logic_vector(unsigned(j_1_reg_249) + unsigned(ap_const_lv2_1));
    and_ln126_1_fu_217_p2 <= (grp_fu_709_p_dout0 and and_ln126_fu_211_p2);
    and_ln126_fu_211_p2 <= (or_ln126_fu_203_p2 and or_ln126_1_fu_207_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln125_reg_256, ap_predicate_tran5to7_state5)
    begin
        if (((icmp_ln125_reg_256 = ap_const_lv1_1) or (ap_predicate_tran5to7_state5 = ap_const_boolean_1))) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_118_p4_assign_proc : process(icmp_ln125_reg_256, UnifiedRetVal_reg_114, ap_CS_fsm_state7)
    begin
        if (((icmp_ln125_reg_256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_118_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_118_p4 <= UnifiedRetVal_reg_114;
        end if; 
    end process;


    ap_predicate_tran5to7_state5_assign_proc : process(icmp_ln125_reg_256, and_ln126_1_fu_217_p2)
    begin
                ap_predicate_tran5to7_state5 <= ((icmp_ln125_reg_256 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln126_1_fu_217_p2));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_118_p4, ap_CS_fsm_state7, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_118_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, add_ln125_reg_281, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, j_fu_64)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1 <= add_ln125_reg_281;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_64;
        end if; 
    end process;

    bitcast_ln126_1_fu_174_p1 <= dSortedBuf_load_reg_275;
    dSortedBuf_address0 <= zext_ln125_fu_144_p1(2 - 1 downto 0);

    dSortedBuf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dSortedBuf_ce0 <= ap_const_logic_1;
        else 
            dSortedBuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_709_p_ce <= ap_const_logic_1;
    grp_fu_709_p_din0 <= eigVals_load;
    grp_fu_709_p_din1 <= dSortedBuf_load_reg_275;
    grp_fu_709_p_opcode <= ap_const_lv5_2;
    icmp_ln125_fu_138_p2 <= "1" when (ap_sig_allocacmp_j_1 = ap_const_lv2_3) else "0";
    icmp_ln126_1_fu_164_p2 <= "1" when (empty = ap_const_lv52_0) else "0";
    icmp_ln126_2_fu_191_p2 <= "0" when (tmp_11_fu_177_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln126_3_fu_197_p2 <= "1" when (trunc_ln126_fu_187_p1 = ap_const_lv52_0) else "0";
    icmp_ln126_fu_158_p2 <= "0" when (tmp_s_fu_149_p4 = ap_const_lv11_7FF) else "1";

    j_2_out_assign_proc : process(j_1_reg_249, icmp_ln125_reg_256, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            j_2_out <= ap_const_lv2_3;
        elsif (((icmp_ln125_reg_256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            j_2_out <= j_1_reg_249;
        else 
            j_2_out <= "XX";
        end if; 
    end process;


    j_2_out_ap_vld_assign_proc : process(icmp_ln125_reg_256, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln125_reg_256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            j_2_out_ap_vld <= ap_const_logic_1;
        else 
            j_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln126_1_fu_207_p2 <= (icmp_ln126_3_reg_291 or icmp_ln126_2_reg_286);
    or_ln126_fu_203_p2 <= (icmp_ln126_reg_265 or icmp_ln126_1_reg_270);
    tmp_11_fu_177_p4 <= bitcast_ln126_1_fu_174_p1(62 downto 52);
    tmp_s_fu_149_p4 <= bitcast_ln126(62 downto 52);
    trunc_ln126_fu_187_p1 <= bitcast_ln126_1_fu_174_p1(52 - 1 downto 0);
    zext_ln125_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),64));
    zext_ln125_out <= j_1_reg_249;

    zext_ln125_out_ap_vld_assign_proc : process(icmp_ln125_reg_256, ap_CS_fsm_state7)
    begin
        if (((icmp_ln125_reg_256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            zext_ln125_out_ap_vld <= ap_const_logic_1;
        else 
            zext_ln125_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;

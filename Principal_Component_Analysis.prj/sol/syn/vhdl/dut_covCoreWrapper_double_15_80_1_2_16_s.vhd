-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_covCoreWrapper_double_15_80_1_2_16_s is
port (
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    input_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_r_we0 : OUT STD_LOGIC;
    input_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    input_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_r_we1 : OUT STD_LOGIC;
    outCovMatrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    outCovMatrix_ce0 : OUT STD_LOGIC;
    outCovMatrix_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    outCovMatrix_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    outCovMatrix_we0 : OUT STD_LOGIC;
    outCovMatrix_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    outCovMatrix_ce1 : OUT STD_LOGIC;
    outCovMatrix_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    outCovMatrix_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    outCovMatrix_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    rows_ap_vld : IN STD_LOGIC;
    cols_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of dut_covCoreWrapper_double_15_80_1_2_16_s is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

attribute shreg_extract : string;
    signal covCorePart1_double_15_80_1_2_16_U0_ap_start : STD_LOGIC;
    signal covCorePart1_double_15_80_1_2_16_U0_ap_done : STD_LOGIC;
    signal covCorePart1_double_15_80_1_2_16_U0_ap_continue : STD_LOGIC;
    signal covCorePart1_double_15_80_1_2_16_U0_ap_idle : STD_LOGIC;
    signal covCorePart1_double_15_80_1_2_16_U0_ap_ready : STD_LOGIC;
    signal covCorePart1_double_15_80_1_2_16_U0_start_out : STD_LOGIC;
    signal covCorePart1_double_15_80_1_2_16_U0_start_write : STD_LOGIC;
    signal covCorePart1_double_15_80_1_2_16_U0_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal covCorePart1_double_15_80_1_2_16_U0_input_r_ce0 : STD_LOGIC;
    signal covCorePart1_double_15_80_1_2_16_U0_input_r_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal covCorePart1_double_15_80_1_2_16_U0_input_r_ce1 : STD_LOGIC;
    signal covCorePart1_double_15_80_1_2_16_U0_values2Strm_0_din : STD_LOGIC_VECTOR (63 downto 0);
    signal covCorePart1_double_15_80_1_2_16_U0_values2Strm_0_write : STD_LOGIC;
    signal covCorePart1_double_15_80_1_2_16_U0_values2Strm_1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal covCorePart1_double_15_80_1_2_16_U0_values2Strm_1_write : STD_LOGIC;
    signal covCorePart1_double_15_80_1_2_16_U0_rows_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal covCorePart1_double_15_80_1_2_16_U0_rows_c_write : STD_LOGIC;
    signal covCorePart1_double_15_80_1_2_16_U0_cols_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal covCorePart1_double_15_80_1_2_16_U0_cols_c_write : STD_LOGIC;
    signal covCorePart2_double_15_2_16_U0_ap_start : STD_LOGIC;
    signal covCorePart2_double_15_2_16_U0_ap_done : STD_LOGIC;
    signal covCorePart2_double_15_2_16_U0_ap_continue : STD_LOGIC;
    signal covCorePart2_double_15_2_16_U0_ap_idle : STD_LOGIC;
    signal covCorePart2_double_15_2_16_U0_ap_ready : STD_LOGIC;
    signal covCorePart2_double_15_2_16_U0_rows_read : STD_LOGIC;
    signal covCorePart2_double_15_2_16_U0_cols_read : STD_LOGIC;
    signal covCorePart2_double_15_2_16_U0_values2Strm_0_read : STD_LOGIC;
    signal covCorePart2_double_15_2_16_U0_values2Strm_1_read : STD_LOGIC;
    signal covCorePart2_double_15_2_16_U0_outCovMatrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal covCorePart2_double_15_2_16_U0_outCovMatrix_ce0 : STD_LOGIC;
    signal covCorePart2_double_15_2_16_U0_outCovMatrix_we0 : STD_LOGIC;
    signal covCorePart2_double_15_2_16_U0_outCovMatrix_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal values2Strm_full_n : STD_LOGIC;
    signal values2Strm_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal values2Strm_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal values2Strm_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal values2Strm_empty_n : STD_LOGIC;
    signal values2Strm_1_full_n : STD_LOGIC;
    signal values2Strm_1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal values2Strm_1_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal values2Strm_1_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal values2Strm_1_empty_n : STD_LOGIC;
    signal rows_c_full_n : STD_LOGIC;
    signal rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal rows_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal rows_c_empty_n : STD_LOGIC;
    signal cols_c_full_n : STD_LOGIC;
    signal cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal cols_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal cols_c_empty_n : STD_LOGIC;
    signal start_for_covCorePart2_double_15_2_16_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_covCorePart2_double_15_2_16_U0_full_n : STD_LOGIC;
    signal start_for_covCorePart2_double_15_2_16_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_covCorePart2_double_15_2_16_U0_empty_n : STD_LOGIC;

    component dut_covCorePart1_double_15_80_1_2_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        values2Strm_0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        values2Strm_0_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        values2Strm_0_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        values2Strm_0_full_n : IN STD_LOGIC;
        values2Strm_0_write : OUT STD_LOGIC;
        values2Strm_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        values2Strm_1_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        values2Strm_1_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        values2Strm_1_full_n : IN STD_LOGIC;
        values2Strm_1_write : OUT STD_LOGIC;
        rows_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        rows_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        rows_c_full_n : IN STD_LOGIC;
        rows_c_write : OUT STD_LOGIC;
        cols_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        cols_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        cols_c_full_n : IN STD_LOGIC;
        cols_c_write : OUT STD_LOGIC );
    end component;


    component dut_covCorePart2_double_15_2_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        rows_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        cols_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC;
        values2Strm_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        values2Strm_0_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        values2Strm_0_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        values2Strm_0_empty_n : IN STD_LOGIC;
        values2Strm_0_read : OUT STD_LOGIC;
        values2Strm_1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        values2Strm_1_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        values2Strm_1_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        values2Strm_1_empty_n : IN STD_LOGIC;
        values2Strm_1_read : OUT STD_LOGIC;
        outCovMatrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        outCovMatrix_ce0 : OUT STD_LOGIC;
        outCovMatrix_we0 : OUT STD_LOGIC;
        outCovMatrix_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_fifo_w64_d32_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component dut_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component dut_start_for_covCorePart2_double_15_2_16_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    covCorePart1_double_15_80_1_2_16_U0 : component dut_covCorePart1_double_15_80_1_2_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => covCorePart1_double_15_80_1_2_16_U0_ap_start,
        start_full_n => start_for_covCorePart2_double_15_2_16_U0_full_n,
        ap_done => covCorePart1_double_15_80_1_2_16_U0_ap_done,
        ap_continue => covCorePart1_double_15_80_1_2_16_U0_ap_continue,
        ap_idle => covCorePart1_double_15_80_1_2_16_U0_ap_idle,
        ap_ready => covCorePart1_double_15_80_1_2_16_U0_ap_ready,
        start_out => covCorePart1_double_15_80_1_2_16_U0_start_out,
        start_write => covCorePart1_double_15_80_1_2_16_U0_start_write,
        rows => rows,
        cols => cols,
        input_r_address0 => covCorePart1_double_15_80_1_2_16_U0_input_r_address0,
        input_r_ce0 => covCorePart1_double_15_80_1_2_16_U0_input_r_ce0,
        input_r_q0 => input_r_q0,
        input_r_address1 => covCorePart1_double_15_80_1_2_16_U0_input_r_address1,
        input_r_ce1 => covCorePart1_double_15_80_1_2_16_U0_input_r_ce1,
        input_r_q1 => input_r_q1,
        values2Strm_0_din => covCorePart1_double_15_80_1_2_16_U0_values2Strm_0_din,
        values2Strm_0_num_data_valid => values2Strm_num_data_valid,
        values2Strm_0_fifo_cap => values2Strm_fifo_cap,
        values2Strm_0_full_n => values2Strm_full_n,
        values2Strm_0_write => covCorePart1_double_15_80_1_2_16_U0_values2Strm_0_write,
        values2Strm_1_din => covCorePart1_double_15_80_1_2_16_U0_values2Strm_1_din,
        values2Strm_1_num_data_valid => values2Strm_1_num_data_valid,
        values2Strm_1_fifo_cap => values2Strm_1_fifo_cap,
        values2Strm_1_full_n => values2Strm_1_full_n,
        values2Strm_1_write => covCorePart1_double_15_80_1_2_16_U0_values2Strm_1_write,
        rows_c_din => covCorePart1_double_15_80_1_2_16_U0_rows_c_din,
        rows_c_num_data_valid => rows_c_num_data_valid,
        rows_c_fifo_cap => rows_c_fifo_cap,
        rows_c_full_n => rows_c_full_n,
        rows_c_write => covCorePart1_double_15_80_1_2_16_U0_rows_c_write,
        cols_c_din => covCorePart1_double_15_80_1_2_16_U0_cols_c_din,
        cols_c_num_data_valid => cols_c_num_data_valid,
        cols_c_fifo_cap => cols_c_fifo_cap,
        cols_c_full_n => cols_c_full_n,
        cols_c_write => covCorePart1_double_15_80_1_2_16_U0_cols_c_write);

    covCorePart2_double_15_2_16_U0 : component dut_covCorePart2_double_15_2_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => covCorePart2_double_15_2_16_U0_ap_start,
        ap_done => covCorePart2_double_15_2_16_U0_ap_done,
        ap_continue => covCorePart2_double_15_2_16_U0_ap_continue,
        ap_idle => covCorePart2_double_15_2_16_U0_ap_idle,
        ap_ready => covCorePart2_double_15_2_16_U0_ap_ready,
        rows_dout => rows_c_dout,
        rows_num_data_valid => rows_c_num_data_valid,
        rows_fifo_cap => rows_c_fifo_cap,
        rows_empty_n => rows_c_empty_n,
        rows_read => covCorePart2_double_15_2_16_U0_rows_read,
        cols_dout => cols_c_dout,
        cols_num_data_valid => cols_c_num_data_valid,
        cols_fifo_cap => cols_c_fifo_cap,
        cols_empty_n => cols_c_empty_n,
        cols_read => covCorePart2_double_15_2_16_U0_cols_read,
        values2Strm_0_dout => values2Strm_dout,
        values2Strm_0_num_data_valid => values2Strm_num_data_valid,
        values2Strm_0_fifo_cap => values2Strm_fifo_cap,
        values2Strm_0_empty_n => values2Strm_empty_n,
        values2Strm_0_read => covCorePart2_double_15_2_16_U0_values2Strm_0_read,
        values2Strm_1_dout => values2Strm_1_dout,
        values2Strm_1_num_data_valid => values2Strm_1_num_data_valid,
        values2Strm_1_fifo_cap => values2Strm_1_fifo_cap,
        values2Strm_1_empty_n => values2Strm_1_empty_n,
        values2Strm_1_read => covCorePart2_double_15_2_16_U0_values2Strm_1_read,
        outCovMatrix_address0 => covCorePart2_double_15_2_16_U0_outCovMatrix_address0,
        outCovMatrix_ce0 => covCorePart2_double_15_2_16_U0_outCovMatrix_ce0,
        outCovMatrix_we0 => covCorePart2_double_15_2_16_U0_outCovMatrix_we0,
        outCovMatrix_d0 => covCorePart2_double_15_2_16_U0_outCovMatrix_d0);

    values2Strm_U : component dut_fifo_w64_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => covCorePart1_double_15_80_1_2_16_U0_values2Strm_0_din,
        if_full_n => values2Strm_full_n,
        if_write => covCorePart1_double_15_80_1_2_16_U0_values2Strm_0_write,
        if_dout => values2Strm_dout,
        if_num_data_valid => values2Strm_num_data_valid,
        if_fifo_cap => values2Strm_fifo_cap,
        if_empty_n => values2Strm_empty_n,
        if_read => covCorePart2_double_15_2_16_U0_values2Strm_0_read);

    values2Strm_1_U : component dut_fifo_w64_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => covCorePart1_double_15_80_1_2_16_U0_values2Strm_1_din,
        if_full_n => values2Strm_1_full_n,
        if_write => covCorePart1_double_15_80_1_2_16_U0_values2Strm_1_write,
        if_dout => values2Strm_1_dout,
        if_num_data_valid => values2Strm_1_num_data_valid,
        if_fifo_cap => values2Strm_1_fifo_cap,
        if_empty_n => values2Strm_1_empty_n,
        if_read => covCorePart2_double_15_2_16_U0_values2Strm_1_read);

    rows_c_U : component dut_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => covCorePart1_double_15_80_1_2_16_U0_rows_c_din,
        if_full_n => rows_c_full_n,
        if_write => covCorePart1_double_15_80_1_2_16_U0_rows_c_write,
        if_dout => rows_c_dout,
        if_num_data_valid => rows_c_num_data_valid,
        if_fifo_cap => rows_c_fifo_cap,
        if_empty_n => rows_c_empty_n,
        if_read => covCorePart2_double_15_2_16_U0_rows_read);

    cols_c_U : component dut_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => covCorePart1_double_15_80_1_2_16_U0_cols_c_din,
        if_full_n => cols_c_full_n,
        if_write => covCorePart1_double_15_80_1_2_16_U0_cols_c_write,
        if_dout => cols_c_dout,
        if_num_data_valid => cols_c_num_data_valid,
        if_fifo_cap => cols_c_fifo_cap,
        if_empty_n => cols_c_empty_n,
        if_read => covCorePart2_double_15_2_16_U0_cols_read);

    start_for_covCorePart2_double_15_2_16_U0_U : component dut_start_for_covCorePart2_double_15_2_16_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_covCorePart2_double_15_2_16_U0_din,
        if_full_n => start_for_covCorePart2_double_15_2_16_U0_full_n,
        if_write => covCorePart1_double_15_80_1_2_16_U0_start_write,
        if_dout => start_for_covCorePart2_double_15_2_16_U0_dout,
        if_empty_n => start_for_covCorePart2_double_15_2_16_U0_empty_n,
        if_read => covCorePart2_double_15_2_16_U0_ap_ready);




    ap_done <= covCorePart2_double_15_2_16_U0_ap_done;
    ap_idle <= (covCorePart2_double_15_2_16_U0_ap_idle and covCorePart1_double_15_80_1_2_16_U0_ap_idle);
    ap_ready <= covCorePart1_double_15_80_1_2_16_U0_ap_ready;
    covCorePart1_double_15_80_1_2_16_U0_ap_continue <= ap_const_logic_1;
    covCorePart1_double_15_80_1_2_16_U0_ap_start <= ap_start;
    covCorePart2_double_15_2_16_U0_ap_continue <= ap_continue;
    covCorePart2_double_15_2_16_U0_ap_start <= start_for_covCorePart2_double_15_2_16_U0_empty_n;
    input_r_address0 <= covCorePart1_double_15_80_1_2_16_U0_input_r_address0;
    input_r_address1 <= covCorePart1_double_15_80_1_2_16_U0_input_r_address1;
    input_r_ce0 <= covCorePart1_double_15_80_1_2_16_U0_input_r_ce0;
    input_r_ce1 <= covCorePart1_double_15_80_1_2_16_U0_input_r_ce1;
    input_r_d0 <= ap_const_lv64_0;
    input_r_d1 <= ap_const_lv64_0;
    input_r_we0 <= ap_const_logic_0;
    input_r_we1 <= ap_const_logic_0;
    outCovMatrix_address0 <= covCorePart2_double_15_2_16_U0_outCovMatrix_address0;
    outCovMatrix_address1 <= ap_const_lv8_0;
    outCovMatrix_ce0 <= covCorePart2_double_15_2_16_U0_outCovMatrix_ce0;
    outCovMatrix_ce1 <= ap_const_logic_0;
    outCovMatrix_d0 <= covCorePart2_double_15_2_16_U0_outCovMatrix_d0;
    outCovMatrix_d1 <= ap_const_lv64_0;
    outCovMatrix_we0 <= covCorePart2_double_15_2_16_U0_outCovMatrix_we0;
    outCovMatrix_we1 <= ap_const_logic_0;
    start_for_covCorePart2_double_15_2_16_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;

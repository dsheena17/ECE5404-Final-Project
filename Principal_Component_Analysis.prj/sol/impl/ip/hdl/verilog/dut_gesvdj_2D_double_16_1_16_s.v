// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dut_gesvdj_2D_double_16_1_16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dataA_address0,
        dataA_ce0,
        dataA_we0,
        dataA_d0,
        dataA_q0,
        dataA_address1,
        dataA_ce1,
        dataA_we1,
        dataA_d1,
        dataA_q1,
        dataU_out_address0,
        dataU_out_ce0,
        dataU_out_we0,
        dataU_out_d0,
        dataU_out_q0,
        dataU_out_address1,
        dataU_out_ce1,
        dataU_out_we1,
        dataU_out_d1,
        dataU_out_q1,
        lda,
        grp_fu_709_p_din0,
        grp_fu_709_p_din1,
        grp_fu_709_p_opcode,
        grp_fu_709_p_dout0,
        grp_fu_709_p_ce,
        grp_fu_713_p_din0,
        grp_fu_713_p_din1,
        grp_fu_713_p_dout0,
        grp_fu_713_p_ce,
        grp_fu_717_p_din0,
        grp_fu_717_p_din1,
        grp_fu_717_p_dout0,
        grp_fu_717_p_ce
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state9 = 4'd4;
parameter    ap_ST_fsm_state10 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] dataA_address0;
output   dataA_ce0;
output   dataA_we0;
output  [63:0] dataA_d0;
input  [63:0] dataA_q0;
output  [7:0] dataA_address1;
output   dataA_ce1;
output   dataA_we1;
output  [63:0] dataA_d1;
input  [63:0] dataA_q1;
output  [7:0] dataU_out_address0;
output   dataU_out_ce0;
output   dataU_out_we0;
output  [63:0] dataU_out_d0;
input  [63:0] dataU_out_q0;
output  [7:0] dataU_out_address1;
output   dataU_out_ce1;
output   dataU_out_we1;
output  [63:0] dataU_out_d1;
input  [63:0] dataU_out_q1;
input  [31:0] lda;
output  [63:0] grp_fu_709_p_din0;
output  [63:0] grp_fu_709_p_din1;
output  [4:0] grp_fu_709_p_opcode;
input  [0:0] grp_fu_709_p_dout0;
output   grp_fu_709_p_ce;
output  [63:0] grp_fu_713_p_din0;
output  [63:0] grp_fu_713_p_din1;
input  [63:0] grp_fu_713_p_dout0;
output   grp_fu_713_p_ce;
output  [63:0] grp_fu_717_p_din0;
output  [63:0] grp_fu_717_p_din1;
input  [63:0] grp_fu_717_p_dout0;
output   grp_fu_717_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] dataU_out_address0;
reg dataU_out_ce0;
reg dataU_out_we0;
reg[63:0] dataU_out_d0;
reg dataU_out_ce1;
reg dataU_out_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] add_ln1085_fu_177_p2;
reg   [7:0] add_ln1085_reg_247;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] add_ln1085_reg_247_pp0_iter1_reg;
reg   [7:0] add_ln1085_reg_247_pp0_iter2_reg;
reg   [7:0] add_ln1085_reg_247_pp0_iter3_reg;
reg   [7:0] add_ln1085_reg_247_pp0_iter4_reg;
reg   [7:0] add_ln1085_reg_247_pp0_iter5_reg;
wire   [0:0] icmp_ln1085_fu_183_p2;
reg   [0:0] icmp_ln1085_reg_252;
wire   [63:0] grp_fu_94_p1;
reg   [63:0] conv_reg_262;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1079_fu_115_p2;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_start;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_done;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_idle;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_ready;
wire   [7:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_address0;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_ce0;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_we0;
wire   [63:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_d0;
wire   [7:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_address1;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_ce1;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_we1;
wire   [63:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_d1;
wire   [7:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_address0;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_ce0;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_we0;
wire   [63:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_d0;
wire   [7:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_address1;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_ce1;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_we1;
wire   [63:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_d1;
wire   [63:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_267_p_din0;
wire   [63:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_267_p_din1;
wire   [4:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_267_p_opcode;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_267_p_ce;
wire   [63:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_271_p_din0;
wire   [63:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_271_p_din1;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_271_p_ce;
wire   [63:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_275_p_din0;
wire   [63:0] grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_275_p_din1;
wire    grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_275_p_ce;
reg    grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln1085_2_fu_214_p1;
wire    ap_block_pp0_stage0;
reg   [4:0] j_fu_54;
wire   [4:0] add_ln1082_fu_189_p2;
reg   [4:0] r_fu_58;
wire   [4:0] select_ln1079_1_fu_153_p3;
reg   [8:0] indvar_flatten_fu_62;
wire   [8:0] add_ln1079_1_fu_121_p2;
wire   [31:0] grp_fu_94_p0;
wire   [0:0] icmp_ln1082_fu_139_p2;
wire   [4:0] add_ln1079_fu_133_p2;
wire   [3:0] trunc_ln1085_fu_161_p1;
wire   [4:0] select_ln1079_fu_145_p3;
wire   [7:0] tmp_fu_165_p3;
wire   [7:0] zext_ln1085_1_fu_173_p1;
reg    grp_fu_267_ce;
reg    grp_fu_271_ce;
reg    grp_fu_275_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_start_reg = 1'b0;
#0 j_fu_54 = 5'd0;
#0 r_fu_58 = 5'd0;
#0 indvar_flatten_fu_62 = 9'd0;
end

dut_Jacobi_svd_double_16_1_16_s grp_Jacobi_svd_double_16_1_16_s_fu_85(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_start),
    .ap_done(grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_done),
    .ap_idle(grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_idle),
    .ap_ready(grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_ready),
    .dataA_address0(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_address0),
    .dataA_ce0(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_ce0),
    .dataA_we0(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_we0),
    .dataA_d0(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_d0),
    .dataA_q0(dataA_q0),
    .dataA_address1(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_address1),
    .dataA_ce1(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_ce1),
    .dataA_we1(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_we1),
    .dataA_d1(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_d1),
    .dataA_q1(dataA_q1),
    .dataU_out_address0(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_address0),
    .dataU_out_ce0(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_ce0),
    .dataU_out_we0(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_we0),
    .dataU_out_d0(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_d0),
    .dataU_out_q0(dataU_out_q0),
    .dataU_out_address1(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_address1),
    .dataU_out_ce1(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_ce1),
    .dataU_out_we1(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_we1),
    .dataU_out_d1(grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_d1),
    .dataU_out_q1(dataU_out_q1),
    .lda(lda),
    .grp_fu_267_p_din0(grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_267_p_din0),
    .grp_fu_267_p_din1(grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_267_p_din1),
    .grp_fu_267_p_opcode(grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_267_p_opcode),
    .grp_fu_267_p_dout0(grp_fu_709_p_dout0),
    .grp_fu_267_p_ce(grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_267_p_ce),
    .grp_fu_271_p_din0(grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_271_p_din0),
    .grp_fu_271_p_din1(grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_271_p_din1),
    .grp_fu_271_p_dout0(grp_fu_713_p_dout0),
    .grp_fu_271_p_ce(grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_271_p_ce),
    .grp_fu_275_p_din0(grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_275_p_din0),
    .grp_fu_275_p_din1(grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_275_p_din1),
    .grp_fu_275_p_dout0(grp_fu_717_p_dout0),
    .grp_fu_275_p_ce(grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_275_p_ce)
);

dut_sitodp_32ns_64_5_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_5_no_dsp_1_U232(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_94_p0),
    .ce(1'b1),
    .dout(grp_fu_94_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_start_reg <= 1'b1;
        end else if ((grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_ready == 1'b1)) begin
            grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_62 <= 9'd0;
    end else if (((icmp_ln1079_fu_115_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_fu_62 <= add_ln1079_1_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_54 <= 5'd0;
    end else if (((icmp_ln1079_fu_115_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_fu_54 <= add_ln1082_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_fu_58 <= 5'd0;
    end else if (((icmp_ln1079_fu_115_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_fu_58 <= select_ln1079_1_fu_153_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln1085_reg_247 <= add_ln1085_fu_177_p2;
        add_ln1085_reg_247_pp0_iter1_reg <= add_ln1085_reg_247;
        icmp_ln1085_reg_252 <= icmp_ln1085_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln1085_reg_247_pp0_iter2_reg <= add_ln1085_reg_247_pp0_iter1_reg;
        add_ln1085_reg_247_pp0_iter3_reg <= add_ln1085_reg_247_pp0_iter2_reg;
        add_ln1085_reg_247_pp0_iter4_reg <= add_ln1085_reg_247_pp0_iter3_reg;
        add_ln1085_reg_247_pp0_iter5_reg <= add_ln1085_reg_247_pp0_iter4_reg;
        conv_reg_262 <= grp_fu_94_p1;
    end
end

always @ (*) begin
    if ((grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_done == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln1079_fu_115_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_done == 1'b1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dataU_out_address0 = zext_ln1085_2_fu_214_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dataU_out_address0 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_address0;
    end else begin
        dataU_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dataU_out_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dataU_out_ce0 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_ce0;
    end else begin
        dataU_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dataU_out_ce1 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_ce1;
    end else begin
        dataU_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dataU_out_d0 = conv_reg_262;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dataU_out_d0 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_d0;
    end else begin
        dataU_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dataU_out_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dataU_out_we0 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_we0;
    end else begin
        dataU_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dataU_out_we1 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_we1;
    end else begin
        dataU_out_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_267_ce = grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_267_p_ce;
    end else begin
        grp_fu_267_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_271_ce = grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_271_p_ce;
    end else begin
        grp_fu_271_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_275_ce = grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_275_p_ce;
    end else begin
        grp_fu_275_ce = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln1079_fu_115_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln1079_fu_115_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1079_1_fu_121_p2 = (indvar_flatten_fu_62 + 9'd1);

assign add_ln1079_fu_133_p2 = (r_fu_58 + 5'd1);

assign add_ln1082_fu_189_p2 = (select_ln1079_fu_145_p3 + 5'd1);

assign add_ln1085_fu_177_p2 = (tmp_fu_165_p3 + zext_ln1085_1_fu_173_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dataA_address0 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_address0;

assign dataA_address1 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_address1;

assign dataA_ce0 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_ce0;

assign dataA_ce1 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_ce1;

assign dataA_d0 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_d0;

assign dataA_d1 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_d1;

assign dataA_we0 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_we0;

assign dataA_we1 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataA_we1;

assign dataU_out_address1 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_address1;

assign dataU_out_d1 = grp_Jacobi_svd_double_16_1_16_s_fu_85_dataU_out_d1;

assign grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_start = grp_Jacobi_svd_double_16_1_16_s_fu_85_ap_start_reg;

assign grp_fu_709_p_ce = grp_fu_267_ce;

assign grp_fu_709_p_din0 = grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_267_p_din0;

assign grp_fu_709_p_din1 = grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_267_p_din1;

assign grp_fu_709_p_opcode = grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_267_p_opcode;

assign grp_fu_713_p_ce = grp_fu_271_ce;

assign grp_fu_713_p_din0 = grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_271_p_din0;

assign grp_fu_713_p_din1 = grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_271_p_din1;

assign grp_fu_717_p_ce = grp_fu_275_ce;

assign grp_fu_717_p_din0 = grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_275_p_din0;

assign grp_fu_717_p_din1 = grp_Jacobi_svd_double_16_1_16_s_fu_85_grp_fu_275_p_din1;

assign grp_fu_94_p0 = icmp_ln1085_reg_252;

assign icmp_ln1079_fu_115_p2 = ((indvar_flatten_fu_62 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln1082_fu_139_p2 = ((j_fu_54 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln1085_fu_183_p2 = ((select_ln1079_1_fu_153_p3 == select_ln1079_fu_145_p3) ? 1'b1 : 1'b0);

assign select_ln1079_1_fu_153_p3 = ((icmp_ln1082_fu_139_p2[0:0] == 1'b1) ? add_ln1079_fu_133_p2 : r_fu_58);

assign select_ln1079_fu_145_p3 = ((icmp_ln1082_fu_139_p2[0:0] == 1'b1) ? 5'd0 : j_fu_54);

assign tmp_fu_165_p3 = {{trunc_ln1085_fu_161_p1}, {4'd0}};

assign trunc_ln1085_fu_161_p1 = select_ln1079_1_fu_153_p3[3:0];

assign zext_ln1085_1_fu_173_p1 = select_ln1079_fu_145_p3;

assign zext_ln1085_2_fu_214_p1 = add_ln1085_reg_247_pp0_iter5_reg;

endmodule //dut_gesvdj_2D_double_16_1_16_s

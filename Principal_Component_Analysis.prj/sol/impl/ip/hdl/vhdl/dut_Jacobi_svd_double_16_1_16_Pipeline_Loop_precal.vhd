-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_Jacobi_svd_double_16_1_16_Pipeline_Loop_precal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_2 : IN STD_LOGIC_VECTOR (3 downto 0);
    Order_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Order_ce0 : OUT STD_LOGIC;
    Order_we0 : OUT STD_LOGIC;
    Order_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Order_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Order_ce1 : OUT STD_LOGIC;
    Order_we1 : OUT STD_LOGIC;
    Order_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    lshr_ln : IN STD_LOGIC_VECTOR (30 downto 0);
    tmpOrder_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tmpOrder_ce0 : OUT STD_LOGIC;
    tmpOrder_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmpOrder_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tmpOrder_ce1 : OUT STD_LOGIC;
    tmpOrder_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dut_Jacobi_svd_double_16_1_16_Pipeline_Loop_precal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln151_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln154_fu_142_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln154_reg_234 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln154_reg_234_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln155_fu_157_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln155_reg_239 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln155_reg_239_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln156_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln156_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln156_fu_179_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln156_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln156_1_fu_186_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln156_1_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln155_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln156_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln162_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_52 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln151_fu_132_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_5 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln154_fu_146_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln151_fu_138_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_193_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_206_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    j_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln151_fu_126_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_52 <= add_ln151_fu_132_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_52 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln156_reg_244 <= icmp_ln156_fu_168_p2;
                    or_ln155_reg_239(3 downto 1) <= or_ln155_fu_157_p2(3 downto 1);
                    or_ln155_reg_239_pp0_iter1_reg(3 downto 1) <= or_ln155_reg_239(3 downto 1);
                select_ln156_1_reg_265 <= select_ln156_1_fu_186_p3;
                select_ln156_reg_260 <= select_ln156_fu_179_p3;
                trunc_ln154_reg_234 <= trunc_ln154_fu_142_p1;
                trunc_ln154_reg_234_pp0_iter1_reg <= trunc_ln154_reg_234;
            end if;
        end if;
    end process;
    or_ln155_reg_239(0) <= '1';
    or_ln155_reg_239_pp0_iter1_reg(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Order_address0 <= zext_ln162_fu_212_p1(8 - 1 downto 0);
    Order_address1 <= zext_ln161_fu_201_p1(8 - 1 downto 0);

    Order_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Order_ce0 <= ap_const_logic_1;
        else 
            Order_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Order_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Order_ce1 <= ap_const_logic_1;
        else 
            Order_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Order_d0 <= select_ln156_1_reg_265;
    Order_d1 <= select_ln156_reg_260;

    Order_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Order_we0 <= ap_const_logic_1;
        else 
            Order_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Order_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Order_we1 <= ap_const_logic_1;
        else 
            Order_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln151_fu_132_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_5) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln151_fu_126_p2)
    begin
        if (((icmp_ln151_fu_126_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_52, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_5 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_5 <= j_fu_52;
        end if; 
    end process;

    icmp_ln151_fu_126_p2 <= "1" when (ap_sig_allocacmp_j_5 = ap_const_lv4_8) else "0";
    icmp_ln156_fu_168_p2 <= "1" when (signed(zext_ln151_fu_138_p1) < signed(lshr_ln)) else "0";
    or_ln155_fu_157_p2 <= (shl_ln154_fu_146_p2 or ap_const_lv4_1);
    select_ln156_1_fu_186_p3 <= 
        tmpOrder_q0 when (icmp_ln156_reg_244(0) = '1') else 
        ap_const_lv32_10;
    select_ln156_fu_179_p3 <= 
        tmpOrder_q1 when (icmp_ln156_reg_244(0) = '1') else 
        ap_const_lv32_10;
    shl_ln154_fu_146_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_j_5),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    tmpOrder_address0 <= zext_ln156_fu_163_p1(4 - 1 downto 0);
    tmpOrder_address1 <= zext_ln155_fu_152_p1(4 - 1 downto 0);

    tmpOrder_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmpOrder_ce0 <= ap_const_logic_1;
        else 
            tmpOrder_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmpOrder_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmpOrder_ce1 <= ap_const_logic_1;
        else 
            tmpOrder_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_28_fu_206_p3 <= (i_2 & or_ln155_reg_239_pp0_iter1_reg);
    tmp_s_fu_193_p4 <= ((i_2 & trunc_ln154_reg_234_pp0_iter1_reg) & ap_const_lv1_0);
    trunc_ln154_fu_142_p1 <= ap_sig_allocacmp_j_5(3 - 1 downto 0);
    zext_ln151_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_5),31));
    zext_ln155_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln154_fu_146_p2),64));
    zext_ln156_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln155_fu_157_p2),64));
    zext_ln161_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_193_p4),64));
    zext_ln162_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_206_p3),64));
end behav;

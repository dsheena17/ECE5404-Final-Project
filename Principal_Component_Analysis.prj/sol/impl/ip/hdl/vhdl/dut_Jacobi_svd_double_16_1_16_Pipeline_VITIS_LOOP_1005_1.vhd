-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_Jacobi_svd_double_16_1_16_Pipeline_VITIS_LOOP_1005_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    div : IN STD_LOGIC_VECTOR (31 downto 0);
    cmp5 : IN STD_LOGIC_VECTOR (0 downto 0);
    i_3 : IN STD_LOGIC_VECTOR (3 downto 0);
    Order_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Order_ce0 : OUT STD_LOGIC;
    Order_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Order_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Order_ce1 : OUT STD_LOGIC;
    Order_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataA_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataA_ce0 : OUT STD_LOGIC;
    dataA_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    flag_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    flag_out_ap_vld : OUT STD_LOGIC;
    grp_fu_1227_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1227_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1227_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1227_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1227_p_ce : OUT STD_LOGIC );
end;


architecture behav of dut_Jacobi_svd_double_16_1_16_Pipeline_VITIS_LOOP_1005_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3C97B19F1A276F5F : STD_LOGIC_VECTOR (63 downto 0) := "0011110010010111101100011001111100011010001001110110111101011111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1005_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1005_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1005_reg_369_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1005_reg_369_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1005_reg_369_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1005_reg_369_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1008_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1008_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1008_reg_373_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1008_reg_373_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1008_reg_373_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1008_reg_373_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1008_reg_373_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1017_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1017_reg_388 : STD_LOGIC_VECTOR (7 downto 0);
    signal dc_reg_398 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln497_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1017_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1017_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1017_reg_408_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1017_1_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1017_1_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1017_1_reg_413_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1010_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1011_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1017_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal flag_fu_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal flag_2_fu_332_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_2_fu_80 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln1005_fu_171_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln1005_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1010_fu_187_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_197_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1010_fu_191_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln1011_fu_212_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_26_fu_218_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1009_fu_236_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_27_fu_240_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1017_fu_248_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln479_fu_265_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal t_fu_273_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_286_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1017_1_fu_269_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln1017_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1017_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1008_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flag_1_fu_324_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    flag_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    flag_fu_76 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then 
                    flag_fu_76 <= flag_2_fu_332_p3;
                end if;
            end if; 
        end if;
    end process;

    j_2_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1005_fu_165_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_2_fu_80 <= add_ln1005_fu_171_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_2_fu_80 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1017_reg_388 <= add_ln1017_fu_252_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln1005_reg_369 <= icmp_ln1005_fu_165_p2;
                icmp_ln1005_reg_369_pp0_iter1_reg <= icmp_ln1005_reg_369;
                icmp_ln1008_reg_373 <= icmp_ln1008_fu_181_p2;
                icmp_ln1008_reg_373_pp0_iter1_reg <= icmp_ln1008_reg_373;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                dc_reg_398 <= dataA_q0;
                icmp_ln1005_reg_369_pp0_iter2_reg <= icmp_ln1005_reg_369_pp0_iter1_reg;
                icmp_ln1005_reg_369_pp0_iter3_reg <= icmp_ln1005_reg_369_pp0_iter2_reg;
                icmp_ln1005_reg_369_pp0_iter4_reg <= icmp_ln1005_reg_369_pp0_iter3_reg;
                icmp_ln1008_reg_373_pp0_iter2_reg <= icmp_ln1008_reg_373_pp0_iter1_reg;
                icmp_ln1008_reg_373_pp0_iter3_reg <= icmp_ln1008_reg_373_pp0_iter2_reg;
                icmp_ln1008_reg_373_pp0_iter4_reg <= icmp_ln1008_reg_373_pp0_iter3_reg;
                icmp_ln1008_reg_373_pp0_iter5_reg <= icmp_ln1008_reg_373_pp0_iter4_reg;
                icmp_ln1017_1_reg_413 <= icmp_ln1017_1_fu_302_p2;
                icmp_ln1017_1_reg_413_pp0_iter5_reg <= icmp_ln1017_1_reg_413;
                icmp_ln1017_reg_408 <= icmp_ln1017_fu_296_p2;
                icmp_ln1017_reg_408_pp0_iter5_reg <= icmp_ln1017_reg_408;
                tmp_16_reg_418 <= grp_fu_1227_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Order_address0 <= zext_ln1011_fu_226_p1(8 - 1 downto 0);
    Order_address1 <= zext_ln1010_fu_207_p1(8 - 1 downto 0);

    Order_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Order_ce0 <= ap_const_logic_1;
        else 
            Order_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Order_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Order_ce1 <= ap_const_logic_1;
        else 
            Order_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1005_fu_171_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j) + unsigned(ap_const_lv4_1));
    add_ln1017_fu_252_p2 <= std_logic_vector(unsigned(tmp_27_fu_240_p3) + unsigned(trunc_ln1017_fu_248_p1));
    and_ln1008_fu_311_p2 <= (icmp_ln1008_reg_373_pp0_iter5_reg and cmp5);
    and_ln1017_fu_319_p2 <= (tmp_16_reg_418 and or_ln1017_fu_315_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1005_fu_165_p2)
    begin
        if (((icmp_ln1005_fu_165_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_2_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j <= j_2_fu_80;
        end if; 
    end process;

    bitcast_ln497_fu_281_p1 <= t_fu_273_p3;
    dataA_address0 <= zext_ln1017_fu_258_p1(8 - 1 downto 0);

    dataA_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            dataA_ce0 <= ap_const_logic_1;
        else 
            dataA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_fu_262_p1 <= dc_reg_398;
    flag_1_fu_324_p3 <= 
        ap_const_lv32_1 when (and_ln1017_fu_319_p2(0) = '1') else 
        flag_fu_76;
    flag_2_fu_332_p3 <= 
        flag_1_fu_324_p3 when (and_ln1008_fu_311_p2(0) = '1') else 
        flag_fu_76;
    flag_out <= flag_fu_76;

    flag_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1005_reg_369_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1005_reg_369_pp0_iter4_reg = ap_const_lv1_1))) then 
            flag_out_ap_vld <= ap_const_logic_1;
        else 
            flag_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1227_p_ce <= ap_const_logic_1;
    grp_fu_1227_p_din0 <= bitcast_ln497_fu_281_p1;
    grp_fu_1227_p_din1 <= ap_const_lv64_3C97B19F1A276F5F;
    grp_fu_1227_p_opcode <= ap_const_lv5_2;
    icmp_ln1005_fu_165_p2 <= "1" when (ap_sig_allocacmp_j = ap_const_lv4_8) else "0";
    icmp_ln1008_fu_181_p2 <= "1" when (signed(zext_ln1005_fu_177_p1) < signed(div)) else "0";
    icmp_ln1017_1_fu_302_p2 <= "1" when (trunc_ln1017_1_fu_269_p1 = ap_const_lv52_0) else "0";
    icmp_ln1017_fu_296_p2 <= "0" when (tmp_15_fu_286_p4 = ap_const_lv11_7FF) else "1";
    or_ln1011_fu_212_p2 <= (shl_ln1010_fu_191_p2 or ap_const_lv4_1);
    or_ln1017_fu_315_p2 <= (icmp_ln1017_reg_408_pp0_iter5_reg or icmp_ln1017_1_reg_413_pp0_iter5_reg);
    shl_ln1010_fu_191_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_j),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    t_fu_273_p3 <= (ap_const_lv1_0 & trunc_ln479_fu_265_p1);
    tmp_15_fu_286_p4 <= data_fu_262_p1(62 downto 52);
    tmp_26_fu_218_p3 <= (i_3 & or_ln1011_fu_212_p2);
    tmp_27_fu_240_p3 <= (trunc_ln1009_fu_236_p1 & ap_const_lv4_0);
    tmp_s_fu_197_p4 <= ((i_3 & trunc_ln1010_fu_187_p1) & ap_const_lv1_0);
    trunc_ln1009_fu_236_p1 <= Order_q1(4 - 1 downto 0);
    trunc_ln1010_fu_187_p1 <= ap_sig_allocacmp_j(3 - 1 downto 0);
    trunc_ln1017_1_fu_269_p1 <= data_fu_262_p1(52 - 1 downto 0);
    trunc_ln1017_fu_248_p1 <= Order_q0(8 - 1 downto 0);
    trunc_ln479_fu_265_p1 <= data_fu_262_p1(63 - 1 downto 0);
    zext_ln1005_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j),32));
    zext_ln1010_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_197_p4),64));
    zext_ln1011_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_218_p3),64));
    zext_ln1017_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1017_reg_388),64));
end behav;

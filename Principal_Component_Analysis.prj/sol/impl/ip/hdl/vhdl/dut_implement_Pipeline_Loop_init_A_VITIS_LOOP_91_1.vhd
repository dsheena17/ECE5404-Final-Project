-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_implement_Pipeline_Loop_init_A_VITIS_LOOP_91_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    standarisedData_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    standarisedData_ce0 : OUT STD_LOGIC;
    standarisedData_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    dataA_2D_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataA_2D_ce0 : OUT STD_LOGIC;
    dataA_2D_we0 : OUT STD_LOGIC;
    dataA_2D_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    noVars : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (7 downto 0);
    eigVals_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    eigVals_ce0 : OUT STD_LOGIC;
    eigVals_we0 : OUT STD_LOGIC;
    eigVals_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of dut_implement_Pipeline_Loop_init_A_VITIS_LOOP_91_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln89_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln89_fu_182_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln89_reg_337 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln89_1_fu_190_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln89_1_reg_343 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln89_fu_198_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln89_reg_350 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln94_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_reg_355 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_reg_355_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_reg_355_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_reg_355_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dataA_2D_addr_reg_359 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA_2D_addr_reg_359_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA_2D_addr_reg_359_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA_2D_addr_1_reg_364 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA_2D_addr_1_reg_364_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal dataA_2D_addr_1_reg_364_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln96_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_369_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_369_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln95_fu_297_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln95_reg_373 : STD_LOGIC_VECTOR (7 downto 0);
    signal standarisedData_load_reg_383 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln89_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln95_2_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln95_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_62 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln91_fu_228_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_66 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_70 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln89_1_fu_158_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln91_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln89_fu_170_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln89_1_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln91_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp6_i_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_256_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln89_1_cast1_fu_253_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_83_fu_263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_84_fu_274_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln95_1_fu_279_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln95_1_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_84_fu_274_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_mul_8s_5ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8s_5ns_8_1_1_U95 : component dut_mul_8s_5ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => empty,
        din1 => empty_84_fu_274_p1,
        dout => empty_84_fu_274_p2);

    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln89_fu_152_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_66 <= select_ln89_1_fu_190_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_66 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln89_fu_152_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_70 <= add_ln89_1_fu_158_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_70 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln89_fu_152_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_62 <= add_ln91_fu_228_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_62 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln95_reg_373 <= add_ln95_fu_297_p2;
                and_ln94_reg_355 <= and_ln94_fu_222_p2;
                and_ln94_reg_355_pp0_iter1_reg <= and_ln94_reg_355;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                dataA_2D_addr_1_reg_364 <= zext_ln95_2_fu_288_p1(8 - 1 downto 0);
                dataA_2D_addr_reg_359 <= p_cast_fu_269_p1(8 - 1 downto 0);
                icmp_ln96_reg_369 <= icmp_ln96_fu_293_p2;
                select_ln89_1_reg_343 <= select_ln89_1_fu_190_p3;
                select_ln89_reg_337 <= select_ln89_fu_182_p3;
                trunc_ln89_reg_350 <= trunc_ln89_fu_198_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln94_reg_355_pp0_iter2_reg <= and_ln94_reg_355_pp0_iter1_reg;
                and_ln94_reg_355_pp0_iter3_reg <= and_ln94_reg_355_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                dataA_2D_addr_1_reg_364_pp0_iter2_reg <= dataA_2D_addr_1_reg_364;
                dataA_2D_addr_1_reg_364_pp0_iter3_reg <= dataA_2D_addr_1_reg_364_pp0_iter2_reg;
                dataA_2D_addr_reg_359_pp0_iter2_reg <= dataA_2D_addr_reg_359;
                dataA_2D_addr_reg_359_pp0_iter3_reg <= dataA_2D_addr_reg_359_pp0_iter2_reg;
                icmp_ln96_reg_369_pp0_iter2_reg <= icmp_ln96_reg_369;
                icmp_ln96_reg_369_pp0_iter3_reg <= icmp_ln96_reg_369_pp0_iter2_reg;
                standarisedData_load_reg_383 <= standarisedData_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln89_1_fu_158_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    add_ln89_fu_170_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv5_1));
    add_ln91_fu_228_p2 <= std_logic_vector(unsigned(select_ln89_fu_182_p3) + unsigned(ap_const_lv5_1));
    add_ln95_1_fu_282_p2 <= std_logic_vector(unsigned(tmp_11_fu_256_p3) + unsigned(zext_ln95_1_fu_279_p1));
    add_ln95_fu_297_p2 <= std_logic_vector(unsigned(empty_84_fu_274_p2) + unsigned(zext_ln95_1_fu_279_p1));
    and_ln94_fu_222_p2 <= (icmp_ln94_fu_216_p2 and cmp6_i_fu_206_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln89_fu_152_p2)
    begin
        if (((icmp_ln89_fu_152_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_62, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_62;
        end if; 
    end process;

    cmp6_i_fu_206_p2 <= "1" when (signed(zext_ln89_1_fu_202_p1) < signed(noVars)) else "0";

    dataA_2D_address0_assign_proc : process(ap_enable_reg_pp0_iter4, and_ln94_reg_355_pp0_iter3_reg, dataA_2D_addr_reg_359_pp0_iter3_reg, dataA_2D_addr_1_reg_364_pp0_iter3_reg, icmp_ln96_reg_369_pp0_iter3_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln94_reg_355_pp0_iter3_reg) and (icmp_ln96_reg_369_pp0_iter3_reg = ap_const_lv1_1))) then 
            dataA_2D_address0 <= dataA_2D_addr_reg_359_pp0_iter3_reg;
        elsif ((((ap_const_lv1_1 = and_ln94_reg_355_pp0_iter3_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln94_reg_355_pp0_iter3_reg) and (icmp_ln96_reg_369_pp0_iter3_reg = ap_const_lv1_0)))) then 
            dataA_2D_address0 <= dataA_2D_addr_1_reg_364_pp0_iter3_reg;
        else 
            dataA_2D_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dataA_2D_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, and_ln94_reg_355_pp0_iter3_reg, icmp_ln96_reg_369_pp0_iter3_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln94_reg_355_pp0_iter3_reg) and (icmp_ln96_reg_369_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln94_reg_355_pp0_iter3_reg) and (icmp_ln96_reg_369_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_const_lv1_1 = and_ln94_reg_355_pp0_iter3_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            dataA_2D_ce0 <= ap_const_logic_1;
        else 
            dataA_2D_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dataA_2D_d0_assign_proc : process(ap_enable_reg_pp0_iter4, and_ln94_reg_355_pp0_iter3_reg, icmp_ln96_reg_369_pp0_iter3_reg, standarisedData_load_reg_383, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
            if ((ap_const_lv1_1 = and_ln94_reg_355_pp0_iter3_reg)) then 
                dataA_2D_d0 <= standarisedData_load_reg_383;
            elsif (((ap_const_lv1_0 = and_ln94_reg_355_pp0_iter3_reg) and (icmp_ln96_reg_369_pp0_iter3_reg = ap_const_lv1_1))) then 
                dataA_2D_d0 <= ap_const_lv64_3FF0000000000000;
            elsif (((ap_const_lv1_0 = and_ln94_reg_355_pp0_iter3_reg) and (icmp_ln96_reg_369_pp0_iter3_reg = ap_const_lv1_0))) then 
                dataA_2D_d0 <= ap_const_lv64_0;
            else 
                dataA_2D_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            dataA_2D_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dataA_2D_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, and_ln94_reg_355_pp0_iter3_reg, icmp_ln96_reg_369_pp0_iter3_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln94_reg_355_pp0_iter3_reg) and (icmp_ln96_reg_369_pp0_iter3_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln94_reg_355_pp0_iter3_reg) and (icmp_ln96_reg_369_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_const_lv1_1 = and_ln94_reg_355_pp0_iter3_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            dataA_2D_we0 <= ap_const_logic_1;
        else 
            dataA_2D_we0 <= ap_const_logic_0;
        end if; 
    end process;

    eigVals_address0 <= zext_ln89_fu_249_p1(4 - 1 downto 0);

    eigVals_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            eigVals_ce0 <= ap_const_logic_1;
        else 
            eigVals_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    eigVals_d0 <= ap_const_lv64_0;

    eigVals_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, and_ln94_reg_355, icmp_ln96_fu_293_p2)
    begin
        if (((ap_const_lv1_1 = and_ln94_reg_355) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_293_p2 = ap_const_lv1_1))) then 
            eigVals_we0 <= ap_const_logic_1;
        else 
            eigVals_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_83_fu_263_p2 <= std_logic_vector(unsigned(tmp_11_fu_256_p3) + unsigned(select_ln89_1_cast1_fu_253_p1));
    empty_84_fu_274_p1 <= select_ln89_1_cast1_fu_253_p1(5 - 1 downto 0);
    icmp_ln89_fu_152_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_100) else "0";
    icmp_ln91_fu_176_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_10) else "0";
    icmp_ln94_fu_216_p2 <= "1" when (signed(zext_ln91_fu_212_p1) < signed(noVars)) else "0";
    icmp_ln96_fu_293_p2 <= "1" when (select_ln89_1_reg_343 = select_ln89_reg_337) else "0";
    p_cast_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_83_fu_263_p2),64));
    select_ln89_1_cast1_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_1_reg_343),8));
    select_ln89_1_fu_190_p3 <= 
        add_ln89_fu_170_p2 when (icmp_ln91_fu_176_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln89_fu_182_p3 <= 
        ap_const_lv5_0 when (icmp_ln91_fu_176_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    standarisedData_address0 <= zext_ln95_fu_303_p1(8 - 1 downto 0);

    standarisedData_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            standarisedData_ce0 <= ap_const_logic_1;
        else 
            standarisedData_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_256_p3 <= (trunc_ln89_reg_350 & ap_const_lv4_0);
    trunc_ln89_fu_198_p1 <= select_ln89_1_fu_190_p3(4 - 1 downto 0);
    zext_ln89_1_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_1_fu_190_p3),32));
    zext_ln89_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_1_reg_343),64));
    zext_ln91_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_fu_182_p3),32));
    zext_ln95_1_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_reg_337),8));
    zext_ln95_2_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln95_1_fu_282_p2),64));
    zext_ln95_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln95_reg_373),64));
end behav;

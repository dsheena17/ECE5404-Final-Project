-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dut_Pipeline_VITIS_LOOP_350_2_VITIS_LOOP_351_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sub_ln298 : IN STD_LOGIC_VECTOR (33 downto 0);
    outputLoadings_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    outputLoadings_2_ce0 : OUT STD_LOGIC;
    outputLoadings_2_we0 : OUT STD_LOGIC;
    outputLoadings_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    outputLoadings_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    outputLoadings_0_ce0 : OUT STD_LOGIC;
    outputLoadings_0_we0 : OUT STD_LOGIC;
    outputLoadings_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    outputLoadings_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    outputLoadings_1_ce0 : OUT STD_LOGIC;
    outputLoadings_1_we0 : OUT STD_LOGIC;
    outputLoadings_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sqrtVals : IN STD_LOGIC_VECTOR (63 downto 0);
    sqrtVals_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    sqrtVals_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    pca_m_pcVecs_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    pca_m_pcVecs_ce0 : OUT STD_LOGIC;
    pca_m_pcVecs_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_302_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_302_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_302_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_302_p_ce : OUT STD_LOGIC );
end;


architecture behav of dut_dut_Pipeline_VITIS_LOOP_350_2_VITIS_LOOP_351_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv34_1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv7_2D : STD_LOGIC_VECTOR (6 downto 0) := "0101101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln350_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln350_fu_196_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln350_reg_346 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln350_reg_346_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln350_reg_346_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln350_reg_346_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln350_reg_346_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln350_reg_346_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln350_reg_346_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln350_reg_346_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln350_reg_346_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln350_reg_346_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln350_reg_346_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_i1_fu_235_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_i1_reg_352 : STD_LOGIC_VECTOR (6 downto 0);
    signal outputLoadings_2_addr_reg_357 : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_2_addr_reg_357_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_2_addr_reg_357_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_2_addr_reg_357_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_2_addr_reg_357_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_2_addr_reg_357_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_2_addr_reg_357_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_2_addr_reg_357_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_2_addr_reg_357_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_2_addr_reg_357_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_2_addr_reg_357_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_0_addr_reg_362 : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_0_addr_reg_362_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_0_addr_reg_362_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_0_addr_reg_362_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_0_addr_reg_362_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_0_addr_reg_362_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_0_addr_reg_362_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_0_addr_reg_362_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_0_addr_reg_362_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_0_addr_reg_362_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_0_addr_reg_362_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_1_addr_reg_367 : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_1_addr_reg_367_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_1_addr_reg_367_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_1_addr_reg_367_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_1_addr_reg_367_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_1_addr_reg_367_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_1_addr_reg_367_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_1_addr_reg_367_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_1_addr_reg_367_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_1_addr_reg_367_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal outputLoadings_1_addr_reg_367_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_281_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_377 : STD_LOGIC_VECTOR (63 downto 0);
    signal pca_m_pcVecs_load_reg_382 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln353_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln353_reg_387 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln350_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln353_1_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_60 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln351_fu_241_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln350_1_fu_204_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten6_fu_68 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    signal add_ln350_1_fu_172_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal icmp_ln351_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln350_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_88_fu_223_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_227_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_fu_219_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln353_fu_262_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln353_fu_265_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln353_1_fu_270_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_281_p7 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_fu_281_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_281_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_281_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component dut_dmul_64ns_64ns_64_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_sparsemux_7_2_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_7_2_64_1_1_U319 : component dut_sparsemux_7_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 64,
        CASE1 => "01",
        din1_WIDTH => 64,
        CASE2 => "10",
        din2_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => sqrtVals,
        din1 => sqrtVals_1,
        din2 => sqrtVals_2,
        def => tmp_fu_281_p7,
        sel => select_ln350_reg_346_pp0_iter2_reg,
        dout => tmp_fu_281_p9);

    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv32_0;
                elsif (((icmp_ln350_fu_167_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_64 <= select_ln350_1_fu_204_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten6_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_68 <= ap_const_lv34_0;
                elsif (((icmp_ln350_fu_167_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten6_fu_68 <= add_ln350_1_fu_172_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_60 <= ap_const_lv2_0;
                elsif (((icmp_ln350_fu_167_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_60 <= add_ln351_fu_241_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                bitcast_ln353_reg_387 <= bitcast_ln353_fu_297_p1;
                outputLoadings_0_addr_reg_362_pp0_iter10_reg <= outputLoadings_0_addr_reg_362_pp0_iter9_reg;
                outputLoadings_0_addr_reg_362_pp0_iter11_reg <= outputLoadings_0_addr_reg_362_pp0_iter10_reg;
                outputLoadings_0_addr_reg_362_pp0_iter2_reg <= outputLoadings_0_addr_reg_362;
                outputLoadings_0_addr_reg_362_pp0_iter3_reg <= outputLoadings_0_addr_reg_362_pp0_iter2_reg;
                outputLoadings_0_addr_reg_362_pp0_iter4_reg <= outputLoadings_0_addr_reg_362_pp0_iter3_reg;
                outputLoadings_0_addr_reg_362_pp0_iter5_reg <= outputLoadings_0_addr_reg_362_pp0_iter4_reg;
                outputLoadings_0_addr_reg_362_pp0_iter6_reg <= outputLoadings_0_addr_reg_362_pp0_iter5_reg;
                outputLoadings_0_addr_reg_362_pp0_iter7_reg <= outputLoadings_0_addr_reg_362_pp0_iter6_reg;
                outputLoadings_0_addr_reg_362_pp0_iter8_reg <= outputLoadings_0_addr_reg_362_pp0_iter7_reg;
                outputLoadings_0_addr_reg_362_pp0_iter9_reg <= outputLoadings_0_addr_reg_362_pp0_iter8_reg;
                outputLoadings_1_addr_reg_367_pp0_iter10_reg <= outputLoadings_1_addr_reg_367_pp0_iter9_reg;
                outputLoadings_1_addr_reg_367_pp0_iter11_reg <= outputLoadings_1_addr_reg_367_pp0_iter10_reg;
                outputLoadings_1_addr_reg_367_pp0_iter2_reg <= outputLoadings_1_addr_reg_367;
                outputLoadings_1_addr_reg_367_pp0_iter3_reg <= outputLoadings_1_addr_reg_367_pp0_iter2_reg;
                outputLoadings_1_addr_reg_367_pp0_iter4_reg <= outputLoadings_1_addr_reg_367_pp0_iter3_reg;
                outputLoadings_1_addr_reg_367_pp0_iter5_reg <= outputLoadings_1_addr_reg_367_pp0_iter4_reg;
                outputLoadings_1_addr_reg_367_pp0_iter6_reg <= outputLoadings_1_addr_reg_367_pp0_iter5_reg;
                outputLoadings_1_addr_reg_367_pp0_iter7_reg <= outputLoadings_1_addr_reg_367_pp0_iter6_reg;
                outputLoadings_1_addr_reg_367_pp0_iter8_reg <= outputLoadings_1_addr_reg_367_pp0_iter7_reg;
                outputLoadings_1_addr_reg_367_pp0_iter9_reg <= outputLoadings_1_addr_reg_367_pp0_iter8_reg;
                outputLoadings_2_addr_reg_357_pp0_iter10_reg <= outputLoadings_2_addr_reg_357_pp0_iter9_reg;
                outputLoadings_2_addr_reg_357_pp0_iter11_reg <= outputLoadings_2_addr_reg_357_pp0_iter10_reg;
                outputLoadings_2_addr_reg_357_pp0_iter2_reg <= outputLoadings_2_addr_reg_357;
                outputLoadings_2_addr_reg_357_pp0_iter3_reg <= outputLoadings_2_addr_reg_357_pp0_iter2_reg;
                outputLoadings_2_addr_reg_357_pp0_iter4_reg <= outputLoadings_2_addr_reg_357_pp0_iter3_reg;
                outputLoadings_2_addr_reg_357_pp0_iter5_reg <= outputLoadings_2_addr_reg_357_pp0_iter4_reg;
                outputLoadings_2_addr_reg_357_pp0_iter6_reg <= outputLoadings_2_addr_reg_357_pp0_iter5_reg;
                outputLoadings_2_addr_reg_357_pp0_iter7_reg <= outputLoadings_2_addr_reg_357_pp0_iter6_reg;
                outputLoadings_2_addr_reg_357_pp0_iter8_reg <= outputLoadings_2_addr_reg_357_pp0_iter7_reg;
                outputLoadings_2_addr_reg_357_pp0_iter9_reg <= outputLoadings_2_addr_reg_357_pp0_iter8_reg;
                pca_m_pcVecs_load_reg_382 <= pca_m_pcVecs_q0;
                select_ln350_reg_346_pp0_iter10_reg <= select_ln350_reg_346_pp0_iter9_reg;
                select_ln350_reg_346_pp0_iter11_reg <= select_ln350_reg_346_pp0_iter10_reg;
                select_ln350_reg_346_pp0_iter2_reg <= select_ln350_reg_346;
                select_ln350_reg_346_pp0_iter3_reg <= select_ln350_reg_346_pp0_iter2_reg;
                select_ln350_reg_346_pp0_iter4_reg <= select_ln350_reg_346_pp0_iter3_reg;
                select_ln350_reg_346_pp0_iter5_reg <= select_ln350_reg_346_pp0_iter4_reg;
                select_ln350_reg_346_pp0_iter6_reg <= select_ln350_reg_346_pp0_iter5_reg;
                select_ln350_reg_346_pp0_iter7_reg <= select_ln350_reg_346_pp0_iter6_reg;
                select_ln350_reg_346_pp0_iter8_reg <= select_ln350_reg_346_pp0_iter7_reg;
                select_ln350_reg_346_pp0_iter9_reg <= select_ln350_reg_346_pp0_iter8_reg;
                tmp_reg_377 <= tmp_fu_281_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                mul_i1_reg_352 <= mul_i1_fu_235_p2;
                outputLoadings_0_addr_reg_362 <= zext_ln350_fu_212_p1(4 - 1 downto 0);
                outputLoadings_1_addr_reg_367 <= zext_ln350_fu_212_p1(4 - 1 downto 0);
                outputLoadings_2_addr_reg_357 <= zext_ln350_fu_212_p1(4 - 1 downto 0);
                select_ln350_reg_346 <= select_ln350_fu_196_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln350_1_fu_172_p2 <= std_logic_vector(unsigned(indvar_flatten6_fu_68) + unsigned(ap_const_lv34_1));
    add_ln350_fu_184_p2 <= std_logic_vector(unsigned(i_fu_64) + unsigned(ap_const_lv32_1));
    add_ln351_fu_241_p2 <= std_logic_vector(unsigned(select_ln350_fu_196_p3) + unsigned(ap_const_lv2_1));
    add_ln353_1_fu_270_p2 <= std_logic_vector(unsigned(add_ln353_fu_265_p2) + unsigned(ap_const_lv7_2D));
    add_ln353_fu_265_p2 <= std_logic_vector(unsigned(mul_i1_reg_352) + unsigned(zext_ln353_fu_262_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln350_fu_167_p2)
    begin
        if (((icmp_ln350_fu_167_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln353_fu_297_p1 <= grp_fu_302_p_dout0;
    empty_88_fu_223_p1 <= select_ln350_1_fu_204_p3(5 - 1 downto 0);
    empty_fu_219_p1 <= select_ln350_1_fu_204_p3(7 - 1 downto 0);
    grp_fu_302_p_ce <= ap_const_logic_1;
    grp_fu_302_p_din0 <= tmp_reg_377;
    grp_fu_302_p_din1 <= pca_m_pcVecs_load_reg_382;
    icmp_ln350_fu_167_p2 <= "1" when (indvar_flatten6_fu_68 = sub_ln298) else "0";
    icmp_ln351_fu_190_p2 <= "1" when (j_fu_60 = ap_const_lv2_3) else "0";
    mul_i1_fu_235_p2 <= std_logic_vector(unsigned(p_shl_fu_227_p3) - unsigned(empty_fu_219_p1));
    outputLoadings_0_address0 <= outputLoadings_0_addr_reg_362_pp0_iter11_reg;

    outputLoadings_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            outputLoadings_0_ce0 <= ap_const_logic_1;
        else 
            outputLoadings_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outputLoadings_0_d0 <= bitcast_ln353_reg_387;

    outputLoadings_0_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, select_ln350_reg_346_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (select_ln350_reg_346_pp0_iter11_reg = ap_const_lv2_0))) then 
            outputLoadings_0_we0 <= ap_const_logic_1;
        else 
            outputLoadings_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outputLoadings_1_address0 <= outputLoadings_1_addr_reg_367_pp0_iter11_reg;

    outputLoadings_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            outputLoadings_1_ce0 <= ap_const_logic_1;
        else 
            outputLoadings_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outputLoadings_1_d0 <= bitcast_ln353_reg_387;

    outputLoadings_1_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, select_ln350_reg_346_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (select_ln350_reg_346_pp0_iter11_reg = ap_const_lv2_1))) then 
            outputLoadings_1_we0 <= ap_const_logic_1;
        else 
            outputLoadings_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outputLoadings_2_address0 <= outputLoadings_2_addr_reg_357_pp0_iter11_reg;

    outputLoadings_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            outputLoadings_2_ce0 <= ap_const_logic_1;
        else 
            outputLoadings_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outputLoadings_2_d0 <= bitcast_ln353_reg_387;

    outputLoadings_2_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, select_ln350_reg_346_pp0_iter11_reg)
    begin
        if ((not((select_ln350_reg_346_pp0_iter11_reg = ap_const_lv2_0)) and not((select_ln350_reg_346_pp0_iter11_reg = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            outputLoadings_2_we0 <= ap_const_logic_1;
        else 
            outputLoadings_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_fu_227_p3 <= (empty_88_fu_223_p1 & ap_const_lv2_0);
    pca_m_pcVecs_address0 <= zext_ln353_1_fu_276_p1(7 - 1 downto 0);

    pca_m_pcVecs_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pca_m_pcVecs_ce0 <= ap_const_logic_1;
        else 
            pca_m_pcVecs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln350_1_fu_204_p3 <= 
        add_ln350_fu_184_p2 when (icmp_ln351_fu_190_p2(0) = '1') else 
        i_fu_64;
    select_ln350_fu_196_p3 <= 
        ap_const_lv2_0 when (icmp_ln351_fu_190_p2(0) = '1') else 
        j_fu_60;
    tmp_fu_281_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    zext_ln350_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln350_1_fu_204_p3),64));
    zext_ln353_1_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln353_1_fu_270_p2),64));
    zext_ln353_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln350_reg_346),7));
end behav;

-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_aveImpl_double_15_80_1_2_16_Pipeline_loop_a1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    add_ln300 : IN STD_LOGIC_VECTOR (10 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln300_1 : IN STD_LOGIC_VECTOR (10 downto 0);
    values_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    values_1_ce0 : OUT STD_LOGIC;
    values_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    values_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    values_1_ce1 : OUT STD_LOGIC;
    values_1_we1 : OUT STD_LOGIC;
    values_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    values_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    values_ce0 : OUT STD_LOGIC;
    values_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    values_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    values_ce1 : OUT STD_LOGIC;
    values_we1 : OUT STD_LOGIC;
    values_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    d_cols : IN STD_LOGIC_VECTOR (63 downto 0);
    cmp33_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_401_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_401_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_401_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_401_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_401_p_ce : OUT STD_LOGIC;
    grp_fu_405_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_405_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_405_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_405_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_405_p_ce : OUT STD_LOGIC;
    grp_fu_1022_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1022_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1022_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1022_p_ce : OUT STD_LOGIC;
    grp_fu_1026_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1026_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1026_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1026_p_ce : OUT STD_LOGIC );
end;


architecture behav of dut_aveImpl_double_15_80_1_2_16_Pipeline_loop_a1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln293_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_318_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_245_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_324 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_324_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_324_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_324_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_324_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_324_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_324_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_324_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal input_r_load_reg_329 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_r_load_3_reg_334 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln300_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln300_1_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal values_addr_reg_349 : STD_LOGIC_VECTOR (3 downto 0);
    signal values_addr_reg_349_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_addr_reg_349_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_addr_reg_349_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_addr_reg_349_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_addr_reg_349_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_addr_reg_349_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_addr_reg_349_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_addr_reg_349_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_addr_reg_349_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_1_addr_reg_355 : STD_LOGIC_VECTOR (3 downto 0);
    signal values_1_addr_reg_355_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_1_addr_reg_355_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_1_addr_reg_355_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_1_addr_reg_355_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_1_addr_reg_355_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_1_addr_reg_355_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_1_addr_reg_355_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_1_addr_reg_355_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values_1_addr_reg_355_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal values1_reg_361 : STD_LOGIC_VECTOR (63 downto 0);
    signal values1_reg_361_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values1_reg_361_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values1_reg_361_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values1_reg_361_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values1_reg_361_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values1_reg_361_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values1_reg_361_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal values1_1_reg_367 : STD_LOGIC_VECTOR (63 downto 0);
    signal values_load_reg_372 : STD_LOGIC_VECTOR (63 downto 0);
    signal values_1_load_reg_377 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_267_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_382 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_382_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_382_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_382_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_382_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_382_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_382_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal storemerge2_fu_274_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal storemerge2_reg_388 : STD_LOGIC_VECTOR (63 downto 0);
    signal storemerge_fu_280_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal storemerge_reg_393 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln300_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln300_1_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom881_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_70 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln293_fu_197_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln293_fu_187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln300_fu_203_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln300_2_fu_207_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln300_3_fu_218_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_229_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_dadddsub_64ns_64ns_64_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_dadd_64ns_64ns_64_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_dmul_64ns_64ns_64_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln293_fu_191_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_70 <= add_ln293_fu_197_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_70 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_reg_324_pp0_iter2_reg <= empty_reg_324_pp0_iter1_reg;
                empty_reg_324_pp0_iter3_reg <= empty_reg_324_pp0_iter2_reg;
                empty_reg_324_pp0_iter4_reg <= empty_reg_324_pp0_iter3_reg;
                empty_reg_324_pp0_iter5_reg <= empty_reg_324_pp0_iter4_reg;
                empty_reg_324_pp0_iter6_reg <= empty_reg_324_pp0_iter5_reg;
                empty_reg_324_pp0_iter7_reg <= empty_reg_324_pp0_iter6_reg;
                icmp_reg_318_pp0_iter10_reg <= icmp_reg_318_pp0_iter9_reg;
                icmp_reg_318_pp0_iter11_reg <= icmp_reg_318_pp0_iter10_reg;
                icmp_reg_318_pp0_iter12_reg <= icmp_reg_318_pp0_iter11_reg;
                icmp_reg_318_pp0_iter13_reg <= icmp_reg_318_pp0_iter12_reg;
                icmp_reg_318_pp0_iter14_reg <= icmp_reg_318_pp0_iter13_reg;
                icmp_reg_318_pp0_iter15_reg <= icmp_reg_318_pp0_iter14_reg;
                icmp_reg_318_pp0_iter16_reg <= icmp_reg_318_pp0_iter15_reg;
                icmp_reg_318_pp0_iter2_reg <= icmp_reg_318_pp0_iter1_reg;
                icmp_reg_318_pp0_iter3_reg <= icmp_reg_318_pp0_iter2_reg;
                icmp_reg_318_pp0_iter4_reg <= icmp_reg_318_pp0_iter3_reg;
                icmp_reg_318_pp0_iter5_reg <= icmp_reg_318_pp0_iter4_reg;
                icmp_reg_318_pp0_iter6_reg <= icmp_reg_318_pp0_iter5_reg;
                icmp_reg_318_pp0_iter7_reg <= icmp_reg_318_pp0_iter6_reg;
                icmp_reg_318_pp0_iter8_reg <= icmp_reg_318_pp0_iter7_reg;
                icmp_reg_318_pp0_iter9_reg <= icmp_reg_318_pp0_iter8_reg;
                storemerge2_reg_388 <= storemerge2_fu_274_p3;
                storemerge_reg_393 <= storemerge_fu_280_p3;
                tmp_12_reg_382 <= tmp_12_fu_267_p3;
                tmp_12_reg_382_pp0_iter11_reg <= tmp_12_reg_382;
                tmp_12_reg_382_pp0_iter12_reg <= tmp_12_reg_382_pp0_iter11_reg;
                tmp_12_reg_382_pp0_iter13_reg <= tmp_12_reg_382_pp0_iter12_reg;
                tmp_12_reg_382_pp0_iter14_reg <= tmp_12_reg_382_pp0_iter13_reg;
                tmp_12_reg_382_pp0_iter15_reg <= tmp_12_reg_382_pp0_iter14_reg;
                tmp_12_reg_382_pp0_iter16_reg <= tmp_12_reg_382_pp0_iter15_reg;
                values1_1_reg_367 <= grp_fu_1026_p_dout0;
                values1_reg_361 <= grp_fu_1022_p_dout0;
                values1_reg_361_pp0_iter10_reg <= values1_reg_361;
                values1_reg_361_pp0_iter11_reg <= values1_reg_361_pp0_iter10_reg;
                values1_reg_361_pp0_iter12_reg <= values1_reg_361_pp0_iter11_reg;
                values1_reg_361_pp0_iter13_reg <= values1_reg_361_pp0_iter12_reg;
                values1_reg_361_pp0_iter14_reg <= values1_reg_361_pp0_iter13_reg;
                values1_reg_361_pp0_iter15_reg <= values1_reg_361_pp0_iter14_reg;
                values1_reg_361_pp0_iter16_reg <= values1_reg_361_pp0_iter15_reg;
                values_1_addr_reg_355 <= idxprom881_fu_262_p1(4 - 1 downto 0);
                values_1_addr_reg_355_pp0_iter10_reg <= values_1_addr_reg_355_pp0_iter9_reg;
                values_1_addr_reg_355_pp0_iter11_reg <= values_1_addr_reg_355_pp0_iter10_reg;
                values_1_addr_reg_355_pp0_iter12_reg <= values_1_addr_reg_355_pp0_iter11_reg;
                values_1_addr_reg_355_pp0_iter13_reg <= values_1_addr_reg_355_pp0_iter12_reg;
                values_1_addr_reg_355_pp0_iter14_reg <= values_1_addr_reg_355_pp0_iter13_reg;
                values_1_addr_reg_355_pp0_iter15_reg <= values_1_addr_reg_355_pp0_iter14_reg;
                values_1_addr_reg_355_pp0_iter16_reg <= values_1_addr_reg_355_pp0_iter15_reg;
                values_1_addr_reg_355_pp0_iter17_reg <= values_1_addr_reg_355_pp0_iter16_reg;
                values_1_addr_reg_355_pp0_iter9_reg <= values_1_addr_reg_355;
                values_addr_reg_349 <= idxprom881_fu_262_p1(4 - 1 downto 0);
                values_addr_reg_349_pp0_iter10_reg <= values_addr_reg_349_pp0_iter9_reg;
                values_addr_reg_349_pp0_iter11_reg <= values_addr_reg_349_pp0_iter10_reg;
                values_addr_reg_349_pp0_iter12_reg <= values_addr_reg_349_pp0_iter11_reg;
                values_addr_reg_349_pp0_iter13_reg <= values_addr_reg_349_pp0_iter12_reg;
                values_addr_reg_349_pp0_iter14_reg <= values_addr_reg_349_pp0_iter13_reg;
                values_addr_reg_349_pp0_iter15_reg <= values_addr_reg_349_pp0_iter14_reg;
                values_addr_reg_349_pp0_iter16_reg <= values_addr_reg_349_pp0_iter15_reg;
                values_addr_reg_349_pp0_iter17_reg <= values_addr_reg_349_pp0_iter16_reg;
                values_addr_reg_349_pp0_iter9_reg <= values_addr_reg_349;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_324 <= empty_fu_245_p1;
                empty_reg_324_pp0_iter1_reg <= empty_reg_324;
                icmp_reg_318 <= icmp_fu_239_p2;
                icmp_reg_318_pp0_iter1_reg <= icmp_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                input_r_load_3_reg_334 <= input_r_q0;
                input_r_load_reg_329 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
                values_1_load_reg_377 <= values_1_q0;
                values_load_reg_372 <= values_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln293_fu_197_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_4) + unsigned(ap_const_lv31_1));
    add_ln300_2_fu_207_p2 <= std_logic_vector(unsigned(add_ln300) + unsigned(trunc_ln300_fu_203_p1));
    add_ln300_3_fu_218_p2 <= std_logic_vector(unsigned(add_ln300_1) + unsigned(trunc_ln300_fu_203_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln293_fu_191_p2)
    begin
        if (((icmp_ln293_fu_191_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_4 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_j_4 <= j_fu_70;
        end if; 
    end process;

    bitcast_ln300_1_fu_258_p1 <= input_r_load_3_reg_334;
    bitcast_ln300_fu_254_p1 <= input_r_load_reg_329;
    empty_fu_245_p1 <= ap_sig_allocacmp_j_4(4 - 1 downto 0);
    grp_fu_1022_p_ce <= ap_const_logic_1;
    grp_fu_1022_p_din0 <= bitcast_ln300_fu_254_p1;
    grp_fu_1022_p_din1 <= d_cols;
    grp_fu_1026_p_ce <= ap_const_logic_1;
    grp_fu_1026_p_din0 <= bitcast_ln300_1_fu_258_p1;
    grp_fu_1026_p_din1 <= d_cols;
    grp_fu_401_p_ce <= ap_const_logic_1;
    grp_fu_401_p_din0 <= values_load_reg_372;
    grp_fu_401_p_din1 <= values1_reg_361;
    grp_fu_401_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_405_p_ce <= ap_const_logic_1;
    grp_fu_405_p_din0 <= values_1_load_reg_377;
    grp_fu_405_p_din1 <= tmp_12_fu_267_p3;
    grp_fu_405_p_opcode <= ap_const_lv2_0;
    icmp_fu_239_p2 <= "1" when (tmp_fu_229_p4 = ap_const_lv27_0) else "0";
    icmp_ln293_fu_191_p2 <= "1" when (signed(zext_ln293_fu_187_p1) < signed(cols)) else "0";
    idxprom881_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_324_pp0_iter7_reg),64));
    input_r_address0 <= zext_ln300_1_fu_224_p1(11 - 1 downto 0);
    input_r_address1 <= zext_ln300_fu_213_p1(11 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    storemerge2_fu_274_p3 <= 
        values1_reg_361_pp0_iter16_reg when (icmp_reg_318_pp0_iter16_reg(0) = '1') else 
        grp_fu_401_p_dout0;
    storemerge_fu_280_p3 <= 
        tmp_12_reg_382_pp0_iter16_reg when (icmp_reg_318_pp0_iter16_reg(0) = '1') else 
        grp_fu_405_p_dout0;
    tmp_12_fu_267_p3 <= 
        values1_1_reg_367 when (cmp33_1(0) = '1') else 
        ap_const_lv64_0;
    tmp_fu_229_p4 <= ap_sig_allocacmp_j_4(30 downto 4);
    trunc_ln300_fu_203_p1 <= ap_sig_allocacmp_j_4(11 - 1 downto 0);
    values_1_address0 <= idxprom881_fu_262_p1(4 - 1 downto 0);
    values_1_address1 <= values_1_addr_reg_355_pp0_iter17_reg;

    values_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            values_1_ce0 <= ap_const_logic_1;
        else 
            values_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    values_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            values_1_ce1 <= ap_const_logic_1;
        else 
            values_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    values_1_d1 <= storemerge_reg_393;

    values_1_we1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            values_1_we1 <= ap_const_logic_1;
        else 
            values_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    values_address0 <= idxprom881_fu_262_p1(4 - 1 downto 0);
    values_address1 <= values_addr_reg_349_pp0_iter17_reg;

    values_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            values_ce0 <= ap_const_logic_1;
        else 
            values_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    values_ce1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            values_ce1 <= ap_const_logic_1;
        else 
            values_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    values_d1 <= storemerge2_reg_388;

    values_we1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            values_we1 <= ap_const_logic_1;
        else 
            values_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln293_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_4),32));
    zext_ln300_1_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln300_3_fu_218_p2),64));
    zext_ln300_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln300_2_fu_207_p2),64));
end behav;

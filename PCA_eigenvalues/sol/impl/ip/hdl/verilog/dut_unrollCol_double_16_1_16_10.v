// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dut_unrollCol_double_16_1_16_10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lda,
        Order_address0,
        Order_ce0,
        Order_q0,
        Order_address1,
        Order_ce1,
        Order_q1,
        m_c_right_address0,
        m_c_right_ce0,
        m_c_right_q0,
        m_s_right_address0,
        m_s_right_ce0,
        m_s_right_q0,
        dataA16_address0,
        dataA16_ce0,
        dataA16_we0,
        dataA16_d0,
        dataA16_q0,
        dataA16_address1,
        dataA16_ce1,
        dataA16_we1,
        dataA16_d1,
        dataA16_q1,
        grp_fu_759_p_din0,
        grp_fu_759_p_din1,
        grp_fu_759_p_dout0,
        grp_fu_759_p_ce,
        grp_fu_763_p_din0,
        grp_fu_763_p_din1,
        grp_fu_763_p_dout0,
        grp_fu_763_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] lda;
output  [3:0] Order_address0;
output   Order_ce0;
input  [31:0] Order_q0;
output  [3:0] Order_address1;
output   Order_ce1;
input  [31:0] Order_q1;
output  [3:0] m_c_right_address0;
output   m_c_right_ce0;
input  [63:0] m_c_right_q0;
output  [3:0] m_s_right_address0;
output   m_s_right_ce0;
input  [63:0] m_s_right_q0;
output  [7:0] dataA16_address0;
output   dataA16_ce0;
output   dataA16_we0;
output  [63:0] dataA16_d0;
input  [63:0] dataA16_q0;
output  [7:0] dataA16_address1;
output   dataA16_ce1;
output   dataA16_we1;
output  [63:0] dataA16_d1;
input  [63:0] dataA16_q1;
output  [63:0] grp_fu_759_p_din0;
output  [63:0] grp_fu_759_p_din1;
input  [63:0] grp_fu_759_p_dout0;
output   grp_fu_759_p_ce;
output  [63:0] grp_fu_763_p_din0;
output  [63:0] grp_fu_763_p_din1;
input  [63:0] grp_fu_763_p_dout0;
output   grp_fu_763_p_ce;

reg ap_idle;
reg Order_ce0;
reg Order_ce1;
reg m_c_right_ce0;
reg m_s_right_ce0;
reg[7:0] dataA16_address0;
reg dataA16_ce0;
reg dataA16_we0;
reg[63:0] dataA16_d0;
reg[7:0] dataA16_address1;
reg dataA16_ce1;
reg dataA16_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln236_reg_567;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] grp_fu_214_p2;
reg   [63:0] reg_226;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln236_fu_249_p2;
reg   [0:0] icmp_ln236_reg_567_pp0_iter1_reg;
reg   [0:0] icmp_ln236_reg_567_pp0_iter2_reg;
reg   [0:0] icmp_ln236_reg_567_pp0_iter3_reg;
reg   [0:0] icmp_ln236_reg_567_pp0_iter4_reg;
reg   [0:0] icmp_ln236_reg_567_pp0_iter5_reg;
wire   [0:0] icmp_ln238_fu_264_p2;
reg   [0:0] icmp_ln238_reg_571;
wire   [3:0] select_ln236_fu_270_p3;
reg   [3:0] select_ln236_reg_576;
wire   [2:0] empty_fu_332_p1;
reg   [2:0] empty_reg_591;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] empty_82_fu_346_p2;
reg   [3:0] empty_82_reg_597;
wire   [3:0] trunc_ln256_fu_361_p1;
reg   [3:0] trunc_ln256_reg_603;
wire   [3:0] trunc_ln256_1_fu_365_p1;
reg   [3:0] trunc_ln256_1_reg_609;
wire   [0:0] and_ln267_5_fu_453_p2;
reg   [0:0] and_ln267_5_reg_615;
reg   [0:0] and_ln267_5_reg_615_pp0_iter1_reg;
reg   [0:0] and_ln267_5_reg_615_pp0_iter2_reg;
reg   [0:0] and_ln267_5_reg_615_pp0_iter3_reg;
reg   [0:0] and_ln267_5_reg_615_pp0_iter4_reg;
reg   [0:0] and_ln267_5_reg_615_pp0_iter5_reg;
reg   [63:0] cl_reg_629;
reg   [63:0] sl_reg_635;
reg   [63:0] sl_reg_635_pp0_iter1_reg;
reg   [7:0] dataA16_addr_reg_643;
reg   [7:0] dataA16_addr_reg_643_pp0_iter1_reg;
reg   [7:0] dataA16_addr_reg_643_pp0_iter2_reg;
reg   [7:0] dataA16_addr_reg_643_pp0_iter3_reg;
reg   [7:0] dataA16_addr_reg_643_pp0_iter4_reg;
reg   [7:0] dataA16_addr_4_reg_648;
reg   [7:0] dataA16_addr_4_reg_648_pp0_iter1_reg;
reg   [7:0] dataA16_addr_4_reg_648_pp0_iter2_reg;
reg   [7:0] dataA16_addr_4_reg_648_pp0_iter3_reg;
reg   [7:0] dataA16_addr_4_reg_648_pp0_iter4_reg;
reg   [63:0] m00_reg_653;
wire    ap_block_pp0_stage3_11001;
reg   [63:0] m01_reg_659;
reg   [7:0] dataA16_addr_5_reg_665;
reg   [7:0] dataA16_addr_5_reg_665_pp0_iter1_reg;
reg   [7:0] dataA16_addr_5_reg_665_pp0_iter2_reg;
reg   [7:0] dataA16_addr_5_reg_665_pp0_iter3_reg;
reg   [7:0] dataA16_addr_5_reg_665_pp0_iter4_reg;
reg   [7:0] dataA16_addr_6_reg_670;
reg   [7:0] dataA16_addr_6_reg_670_pp0_iter1_reg;
reg   [7:0] dataA16_addr_6_reg_670_pp0_iter2_reg;
reg   [7:0] dataA16_addr_6_reg_670_pp0_iter3_reg;
reg   [7:0] dataA16_addr_6_reg_670_pp0_iter4_reg;
reg   [7:0] dataA16_addr_6_reg_670_pp0_iter5_reg;
reg   [63:0] m10_reg_675;
reg   [63:0] m11_reg_680;
wire   [63:0] m1_neg_fu_515_p2;
reg   [63:0] m1_neg_reg_685;
wire   [63:0] m1_4_neg_fu_524_p2;
reg   [63:0] m1_4_neg_reg_690;
wire   [63:0] m1_fu_530_p1;
wire   [63:0] m1_4_fu_534_p1;
reg   [63:0] tmpMul0_reg_705;
reg   [63:0] tmpMul0_5_reg_710;
reg   [63:0] tmpMul1_reg_715;
reg   [63:0] tmpMul1_5_reg_720;
reg   [63:0] tmpMul0_4_reg_725;
reg   [63:0] tmpMul0_6_reg_730;
reg   [63:0] tmpMul1_4_reg_735;
reg   [63:0] tmpMul1_6_reg_740;
reg   [63:0] sum_5_reg_745;
reg   [63:0] sum_6_reg_750;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire   [63:0] zext_ln264_fu_284_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln266_fu_295_p1;
wire   [63:0] zext_ln238_1_fu_356_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln280_fu_472_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln281_fu_483_p1;
wire   [63:0] zext_ln329_fu_496_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln330_fu_507_p1;
reg   [3:0] tmpSumCS_fu_104;
wire   [3:0] add_ln238_fu_300_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_tmpSumCS_load;
reg   [3:0] l_fu_108;
wire   [3:0] select_ln236_1_fu_325_p3;
reg   [6:0] indvar_flatten_fu_112;
wire   [6:0] add_ln236_1_fu_255_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [63:0] grp_fu_214_p0;
reg   [63:0] grp_fu_214_p1;
reg   [63:0] grp_fu_218_p0;
reg   [63:0] grp_fu_218_p1;
reg   [63:0] grp_fu_222_p0;
reg   [63:0] grp_fu_222_p1;
wire   [3:0] shl_ln260_fu_278_p2;
wire   [3:0] or_ln266_fu_289_p2;
wire   [3:0] add_ln236_fu_319_p2;
wire   [3:0] empty_81_fu_336_p2;
wire   [0:0] tmp_fu_374_p3;
wire   [0:0] tmp_2_fu_388_p3;
wire   [31:0] p_cast_fu_342_p1;
wire   [31:0] zext_ln238_fu_352_p1;
wire   [0:0] icmp_ln267_1_fu_408_p2;
wire   [0:0] icmp_ln267_fu_369_p2;
wire   [0:0] and_ln267_fu_423_p2;
wire   [0:0] icmp_ln267_2_fu_413_p2;
wire   [0:0] icmp_ln268_fu_402_p2;
wire   [0:0] xor_ln267_fu_382_p2;
wire   [0:0] and_ln267_3_fu_435_p2;
wire   [0:0] xor_ln267_1_fu_396_p2;
wire   [0:0] icmp_ln267_3_fu_418_p2;
wire   [0:0] and_ln267_2_fu_441_p2;
wire   [0:0] and_ln267_4_fu_447_p2;
wire   [0:0] and_ln267_1_fu_429_p2;
wire   [7:0] tmp_7_fu_464_p4;
wire   [7:0] tmp_8_fu_477_p3;
wire   [7:0] tmp_9_fu_488_p4;
wire   [7:0] tmp_s_fu_501_p3;
wire   [63:0] m1_to_int_fu_512_p1;
wire   [63:0] m1_4_to_int_fu_521_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter5_stage1;
reg    ap_idle_pp0_0to4;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to6;
wire    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0;
reg    ap_predicate_op102_load_state3;
reg    ap_enable_operation_102;
reg    ap_enable_state3_pp0_iter0_stage2;
reg    ap_predicate_op104_load_state4;
reg    ap_enable_operation_104;
reg    ap_enable_state4_pp0_iter0_stage3;
reg    ap_enable_operation_220;
reg    ap_enable_state21_pp0_iter5_stage0;
reg    ap_enable_operation_224;
reg    ap_enable_state22_pp0_iter5_stage1;
reg    ap_predicate_op103_load_state3;
reg    ap_enable_operation_103;
reg    ap_predicate_op105_load_state4;
reg    ap_enable_operation_105;
reg    ap_enable_operation_221;
reg    ap_enable_operation_249;
reg    ap_enable_state26_pp0_iter6_stage1;
reg    ap_predicate_op112_load_state4;
reg    ap_enable_operation_112;
reg    ap_enable_operation_114;
reg    ap_enable_state5_pp0_iter1_stage0;
reg    ap_predicate_op113_load_state4;
reg    ap_enable_operation_113;
reg    ap_enable_operation_115;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 tmpSumCS_fu_104 = 4'd0;
#0 l_fu_108 = 4'd0;
#0 indvar_flatten_fu_112 = 7'd0;
#0 ap_done_reg = 1'b0;
end

dut_dadd_64ns_64ns_64_6_no_dsp_0 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_6_no_dsp_0_U188(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_214_p0),
    .din1(grp_fu_214_p1),
    .ce(1'b1),
    .dout(grp_fu_214_p2)
);

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln236_fu_249_p2 == 1'd0))) begin
            indvar_flatten_fu_112 <= add_ln236_1_fu_255_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_112 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_fu_108 <= 4'd0;
    end else if (((icmp_ln236_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        l_fu_108 <= select_ln236_1_fu_325_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln236_fu_249_p2 == 1'd0))) begin
            tmpSumCS_fu_104 <= add_ln238_fu_300_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            tmpSumCS_fu_104 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        and_ln267_5_reg_615 <= and_ln267_5_fu_453_p2;
        and_ln267_5_reg_615_pp0_iter1_reg <= and_ln267_5_reg_615;
        and_ln267_5_reg_615_pp0_iter2_reg <= and_ln267_5_reg_615_pp0_iter1_reg;
        and_ln267_5_reg_615_pp0_iter3_reg <= and_ln267_5_reg_615_pp0_iter2_reg;
        and_ln267_5_reg_615_pp0_iter4_reg <= and_ln267_5_reg_615_pp0_iter3_reg;
        and_ln267_5_reg_615_pp0_iter5_reg <= and_ln267_5_reg_615_pp0_iter4_reg;
        empty_82_reg_597[3 : 1] <= empty_82_fu_346_p2[3 : 1];
        empty_reg_591 <= empty_fu_332_p1;
        trunc_ln256_1_reg_609 <= trunc_ln256_1_fu_365_p1;
        trunc_ln256_reg_603 <= trunc_ln256_fu_361_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        cl_reg_629 <= m_c_right_q0;
        dataA16_addr_4_reg_648[7 : 1] <= zext_ln281_fu_483_p1[7 : 1];
        dataA16_addr_4_reg_648_pp0_iter1_reg[7 : 1] <= dataA16_addr_4_reg_648[7 : 1];
        dataA16_addr_4_reg_648_pp0_iter2_reg[7 : 1] <= dataA16_addr_4_reg_648_pp0_iter1_reg[7 : 1];
        dataA16_addr_4_reg_648_pp0_iter3_reg[7 : 1] <= dataA16_addr_4_reg_648_pp0_iter2_reg[7 : 1];
        dataA16_addr_4_reg_648_pp0_iter4_reg[7 : 1] <= dataA16_addr_4_reg_648_pp0_iter3_reg[7 : 1];
        dataA16_addr_reg_643[7 : 1] <= zext_ln280_fu_472_p1[7 : 1];
        dataA16_addr_reg_643_pp0_iter1_reg[7 : 1] <= dataA16_addr_reg_643[7 : 1];
        dataA16_addr_reg_643_pp0_iter2_reg[7 : 1] <= dataA16_addr_reg_643_pp0_iter1_reg[7 : 1];
        dataA16_addr_reg_643_pp0_iter3_reg[7 : 1] <= dataA16_addr_reg_643_pp0_iter2_reg[7 : 1];
        dataA16_addr_reg_643_pp0_iter4_reg[7 : 1] <= dataA16_addr_reg_643_pp0_iter3_reg[7 : 1];
        m1_4_neg_reg_690 <= m1_4_neg_fu_524_p2;
        m1_neg_reg_685 <= m1_neg_fu_515_p2;
        sl_reg_635 <= m_s_right_q0;
        sl_reg_635_pp0_iter1_reg <= sl_reg_635;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dataA16_addr_5_reg_665[7 : 1] <= zext_ln329_fu_496_p1[7 : 1];
        dataA16_addr_5_reg_665_pp0_iter1_reg[7 : 1] <= dataA16_addr_5_reg_665[7 : 1];
        dataA16_addr_5_reg_665_pp0_iter2_reg[7 : 1] <= dataA16_addr_5_reg_665_pp0_iter1_reg[7 : 1];
        dataA16_addr_5_reg_665_pp0_iter3_reg[7 : 1] <= dataA16_addr_5_reg_665_pp0_iter2_reg[7 : 1];
        dataA16_addr_5_reg_665_pp0_iter4_reg[7 : 1] <= dataA16_addr_5_reg_665_pp0_iter3_reg[7 : 1];
        dataA16_addr_6_reg_670[7 : 1] <= zext_ln330_fu_507_p1[7 : 1];
        dataA16_addr_6_reg_670_pp0_iter1_reg[7 : 1] <= dataA16_addr_6_reg_670[7 : 1];
        dataA16_addr_6_reg_670_pp0_iter2_reg[7 : 1] <= dataA16_addr_6_reg_670_pp0_iter1_reg[7 : 1];
        dataA16_addr_6_reg_670_pp0_iter3_reg[7 : 1] <= dataA16_addr_6_reg_670_pp0_iter2_reg[7 : 1];
        dataA16_addr_6_reg_670_pp0_iter4_reg[7 : 1] <= dataA16_addr_6_reg_670_pp0_iter3_reg[7 : 1];
        dataA16_addr_6_reg_670_pp0_iter5_reg[7 : 1] <= dataA16_addr_6_reg_670_pp0_iter4_reg[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln236_reg_567 <= icmp_ln236_fu_249_p2;
        icmp_ln236_reg_567_pp0_iter1_reg <= icmp_ln236_reg_567;
        icmp_ln236_reg_567_pp0_iter2_reg <= icmp_ln236_reg_567_pp0_iter1_reg;
        icmp_ln236_reg_567_pp0_iter3_reg <= icmp_ln236_reg_567_pp0_iter2_reg;
        icmp_ln236_reg_567_pp0_iter4_reg <= icmp_ln236_reg_567_pp0_iter3_reg;
        icmp_ln236_reg_567_pp0_iter5_reg <= icmp_ln236_reg_567_pp0_iter4_reg;
        icmp_ln238_reg_571 <= icmp_ln238_fu_264_p2;
        select_ln236_reg_576 <= select_ln236_fu_270_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        m00_reg_653 <= dataA16_q1;
        m01_reg_659 <= dataA16_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m10_reg_675 <= dataA16_q1;
        m11_reg_680 <= dataA16_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_226 <= grp_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        sum_5_reg_745 <= grp_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_6_reg_750 <= grp_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmpMul0_4_reg_725 <= grp_fu_759_p_dout0;
        tmpMul0_6_reg_730 <= grp_fu_763_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmpMul0_5_reg_710 <= grp_fu_763_p_dout0;
        tmpMul0_reg_705 <= grp_fu_759_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmpMul1_4_reg_735 <= grp_fu_759_p_dout0;
        tmpMul1_6_reg_740 <= grp_fu_763_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmpMul1_5_reg_720 <= grp_fu_763_p_dout0;
        tmpMul1_reg_715 <= grp_fu_759_p_dout0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Order_ce0 = 1'b1;
    end else begin
        Order_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Order_ce1 = 1'b1;
    end else begin
        Order_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln236_reg_567 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln236_reg_567_pp0_iter5_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter5_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to6 = 1'b1;
    end else begin
        ap_idle_pp0_1to6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_tmpSumCS_load = 4'd0;
    end else begin
        ap_sig_allocacmp_tmpSumCS_load = tmpSumCS_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataA16_address0 = dataA16_addr_6_reg_670_pp0_iter5_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataA16_address0 = dataA16_addr_4_reg_648_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dataA16_address0 = zext_ln330_fu_507_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dataA16_address0 = zext_ln281_fu_483_p1;
    end else begin
        dataA16_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataA16_address1 = dataA16_addr_5_reg_665_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataA16_address1 = dataA16_addr_reg_643_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dataA16_address1 = zext_ln329_fu_496_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dataA16_address1 = zext_ln280_fu_472_p1;
    end else begin
        dataA16_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        dataA16_ce0 = 1'b1;
    end else begin
        dataA16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        dataA16_ce1 = 1'b1;
    end else begin
        dataA16_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataA16_d0 = sum_6_reg_750;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataA16_d0 = sum_5_reg_745;
    end else begin
        dataA16_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln267_5_reg_615_pp0_iter5_reg) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'd1 == and_ln267_5_reg_615_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dataA16_we0 = 1'b1;
    end else begin
        dataA16_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln267_5_reg_615_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'd1 == and_ln267_5_reg_615_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dataA16_we1 = 1'b1;
    end else begin
        dataA16_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_214_p0 = tmpMul0_6_reg_730;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_214_p0 = tmpMul0_4_reg_725;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_214_p0 = tmpMul0_5_reg_710;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_214_p0 = tmpMul0_reg_705;
    end else begin
        grp_fu_214_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_214_p1 = tmpMul1_6_reg_740;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_214_p1 = tmpMul1_4_reg_735;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_214_p1 = tmpMul1_5_reg_720;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_214_p1 = tmpMul1_reg_715;
    end else begin
        grp_fu_214_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_218_p0 = sl_reg_635_pp0_iter1_reg;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_218_p0 = m10_reg_675;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_218_p0 = m00_reg_653;
    end else begin
        grp_fu_218_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_218_p1 = m1_fu_530_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_218_p1 = sl_reg_635;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_218_p1 = cl_reg_629;
    end else begin
        grp_fu_218_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_222_p0 = sl_reg_635_pp0_iter1_reg;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_222_p0 = m11_reg_680;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_222_p0 = m01_reg_659;
    end else begin
        grp_fu_222_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_222_p1 = m1_4_fu_534_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_222_p1 = sl_reg_635;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_222_p1 = cl_reg_629;
    end else begin
        grp_fu_222_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_c_right_ce0 = 1'b1;
    end else begin
        m_c_right_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_s_right_ce0 = 1'b1;
    end else begin
        m_s_right_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to6 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Order_address0 = zext_ln266_fu_295_p1;

assign Order_address1 = zext_ln264_fu_284_p1;

assign add_ln236_1_fu_255_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln236_fu_319_p2 = (l_fu_108 + 4'd1);

assign add_ln238_fu_300_p2 = (select_ln236_fu_270_p3 + 4'd1);

assign and_ln267_1_fu_429_p2 = (icmp_ln267_2_fu_413_p2 & and_ln267_fu_423_p2);

assign and_ln267_2_fu_441_p2 = (xor_ln267_1_fu_396_p2 & and_ln267_3_fu_435_p2);

assign and_ln267_3_fu_435_p2 = (xor_ln267_fu_382_p2 & icmp_ln268_fu_402_p2);

assign and_ln267_4_fu_447_p2 = (icmp_ln267_3_fu_418_p2 & and_ln267_2_fu_441_p2);

assign and_ln267_5_fu_453_p2 = (and_ln267_4_fu_447_p2 & and_ln267_1_fu_429_p2);

assign and_ln267_fu_423_p2 = (icmp_ln267_fu_369_p2 & icmp_ln267_1_fu_408_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0 = (((ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage3_subdone)) | ((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage1_subdone)) | ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone)) | ((ap_ST_fsm_pp0_stage2 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage2_subdone)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_102 = (ap_predicate_op102_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_103 = (ap_predicate_op103_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_104 = (ap_predicate_op104_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_105 = (ap_predicate_op105_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_112 = (ap_predicate_op112_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_113 = (ap_predicate_op113_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_114 = (1'd1 == and_ln267_5_reg_615);
end

always @ (*) begin
    ap_enable_operation_115 = (1'd1 == and_ln267_5_reg_615);
end

always @ (*) begin
    ap_enable_operation_220 = (1'd1 == and_ln267_5_reg_615_pp0_iter4_reg);
end

always @ (*) begin
    ap_enable_operation_221 = (1'd1 == and_ln267_5_reg_615_pp0_iter4_reg);
end

always @ (*) begin
    ap_enable_operation_224 = (1'd1 == and_ln267_5_reg_615_pp0_iter4_reg);
end

always @ (*) begin
    ap_enable_operation_249 = (1'd1 == and_ln267_5_reg_615_pp0_iter5_reg);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state21_pp0_iter5_stage0 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state22_pp0_iter5_stage1 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state26_pp0_iter6_stage1 = ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state3_pp0_iter0_stage2 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_enable_state4_pp0_iter0_stage3 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_enable_state5_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

always @ (*) begin
    ap_predicate_op102_load_state3 = ((1'd1 == and_ln267_5_reg_615) & (icmp_ln236_reg_567 == 1'd0));
end

always @ (*) begin
    ap_predicate_op103_load_state3 = ((1'd1 == and_ln267_5_reg_615) & (icmp_ln236_reg_567 == 1'd0));
end

always @ (*) begin
    ap_predicate_op104_load_state4 = ((1'd1 == and_ln267_5_reg_615) & (icmp_ln236_reg_567 == 1'd0));
end

always @ (*) begin
    ap_predicate_op105_load_state4 = ((1'd1 == and_ln267_5_reg_615) & (icmp_ln236_reg_567 == 1'd0));
end

always @ (*) begin
    ap_predicate_op112_load_state4 = ((1'd1 == and_ln267_5_reg_615) & (icmp_ln236_reg_567 == 1'd0));
end

always @ (*) begin
    ap_predicate_op113_load_state4 = ((1'd1 == and_ln267_5_reg_615) & (icmp_ln236_reg_567 == 1'd0));
end

assign dataA16_d1 = reg_226;

assign empty_81_fu_336_p2 = select_ln236_1_fu_325_p3 << 4'd1;

assign empty_82_fu_346_p2 = (empty_81_fu_336_p2 | 4'd1);

assign empty_fu_332_p1 = select_ln236_1_fu_325_p3[2:0];

assign grp_fu_759_p_ce = 1'b1;

assign grp_fu_759_p_din0 = grp_fu_218_p0;

assign grp_fu_759_p_din1 = grp_fu_218_p1;

assign grp_fu_763_p_ce = 1'b1;

assign grp_fu_763_p_din0 = grp_fu_222_p0;

assign grp_fu_763_p_din1 = grp_fu_222_p1;

assign icmp_ln236_fu_249_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln238_fu_264_p2 = ((ap_sig_allocacmp_tmpSumCS_load == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln267_1_fu_408_p2 = (($signed(Order_q1) < $signed(lda)) ? 1'b1 : 1'b0);

assign icmp_ln267_2_fu_413_p2 = (($signed(p_cast_fu_342_p1) < $signed(lda)) ? 1'b1 : 1'b0);

assign icmp_ln267_3_fu_418_p2 = (($signed(zext_ln238_fu_352_p1) < $signed(lda)) ? 1'b1 : 1'b0);

assign icmp_ln267_fu_369_p2 = (($signed(Order_q0) < $signed(lda)) ? 1'b1 : 1'b0);

assign icmp_ln268_fu_402_p2 = ((Order_q1 != Order_q0) ? 1'b1 : 1'b0);

assign m1_4_fu_534_p1 = m1_4_neg_reg_690;

assign m1_4_neg_fu_524_p2 = (m1_4_to_int_fu_521_p1 ^ 64'd9223372036854775808);

assign m1_4_to_int_fu_521_p1 = m01_reg_659;

assign m1_fu_530_p1 = m1_neg_reg_685;

assign m1_neg_fu_515_p2 = (m1_to_int_fu_512_p1 ^ 64'd9223372036854775808);

assign m1_to_int_fu_512_p1 = m00_reg_653;

assign m_c_right_address0 = zext_ln238_1_fu_356_p1;

assign m_s_right_address0 = zext_ln238_1_fu_356_p1;

assign or_ln266_fu_289_p2 = (shl_ln260_fu_278_p2 | 4'd1);

assign p_cast_fu_342_p1 = empty_81_fu_336_p2;

assign select_ln236_1_fu_325_p3 = ((icmp_ln238_reg_571[0:0] == 1'b1) ? add_ln236_fu_319_p2 : l_fu_108);

assign select_ln236_fu_270_p3 = ((icmp_ln238_fu_264_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_tmpSumCS_load);

assign shl_ln260_fu_278_p2 = select_ln236_fu_270_p3 << 4'd1;

assign tmp_2_fu_388_p3 = Order_q0[32'd31];

assign tmp_7_fu_464_p4 = {{{trunc_ln256_reg_603}, {empty_reg_591}}, {1'd0}};

assign tmp_8_fu_477_p3 = {{trunc_ln256_reg_603}, {empty_82_reg_597}};

assign tmp_9_fu_488_p4 = {{{trunc_ln256_1_reg_609}, {empty_reg_591}}, {1'd0}};

assign tmp_fu_374_p3 = Order_q1[32'd31];

assign tmp_s_fu_501_p3 = {{trunc_ln256_1_reg_609}, {empty_82_reg_597}};

assign trunc_ln256_1_fu_365_p1 = Order_q0[3:0];

assign trunc_ln256_fu_361_p1 = Order_q1[3:0];

assign xor_ln267_1_fu_396_p2 = (tmp_2_fu_388_p3 ^ 1'd1);

assign xor_ln267_fu_382_p2 = (tmp_fu_374_p3 ^ 1'd1);

assign zext_ln238_1_fu_356_p1 = select_ln236_reg_576;

assign zext_ln238_fu_352_p1 = empty_82_fu_346_p2;

assign zext_ln264_fu_284_p1 = shl_ln260_fu_278_p2;

assign zext_ln266_fu_295_p1 = or_ln266_fu_289_p2;

assign zext_ln280_fu_472_p1 = tmp_7_fu_464_p4;

assign zext_ln281_fu_483_p1 = tmp_8_fu_477_p3;

assign zext_ln329_fu_496_p1 = tmp_9_fu_488_p4;

assign zext_ln330_fu_507_p1 = tmp_s_fu_501_p3;

always @ (posedge ap_clk) begin
    empty_82_reg_597[0] <= 1'b1;
    dataA16_addr_reg_643[0] <= 1'b0;
    dataA16_addr_reg_643_pp0_iter1_reg[0] <= 1'b0;
    dataA16_addr_reg_643_pp0_iter2_reg[0] <= 1'b0;
    dataA16_addr_reg_643_pp0_iter3_reg[0] <= 1'b0;
    dataA16_addr_reg_643_pp0_iter4_reg[0] <= 1'b0;
    dataA16_addr_4_reg_648[0] <= 1'b1;
    dataA16_addr_4_reg_648_pp0_iter1_reg[0] <= 1'b1;
    dataA16_addr_4_reg_648_pp0_iter2_reg[0] <= 1'b1;
    dataA16_addr_4_reg_648_pp0_iter3_reg[0] <= 1'b1;
    dataA16_addr_4_reg_648_pp0_iter4_reg[0] <= 1'b1;
    dataA16_addr_5_reg_665[0] <= 1'b0;
    dataA16_addr_5_reg_665_pp0_iter1_reg[0] <= 1'b0;
    dataA16_addr_5_reg_665_pp0_iter2_reg[0] <= 1'b0;
    dataA16_addr_5_reg_665_pp0_iter3_reg[0] <= 1'b0;
    dataA16_addr_5_reg_665_pp0_iter4_reg[0] <= 1'b0;
    dataA16_addr_6_reg_670[0] <= 1'b1;
    dataA16_addr_6_reg_670_pp0_iter1_reg[0] <= 1'b1;
    dataA16_addr_6_reg_670_pp0_iter2_reg[0] <= 1'b1;
    dataA16_addr_6_reg_670_pp0_iter3_reg[0] <= 1'b1;
    dataA16_addr_6_reg_670_pp0_iter4_reg[0] <= 1'b1;
    dataA16_addr_6_reg_670_pp0_iter5_reg[0] <= 1'b1;
end

endmodule //dut_unrollCol_double_16_1_16_10

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dut_aveImpl_double_15_80_1_2_16_Pipeline_loop_a1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cols,
        add_ln300,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        add_ln300_1,
        values_1_address0,
        values_1_ce0,
        values_1_q0,
        values_1_address1,
        values_1_ce1,
        values_1_we1,
        values_1_d1,
        values_address0,
        values_ce0,
        values_q0,
        values_address1,
        values_ce1,
        values_we1,
        values_d1,
        d_cols,
        cmp33_1,
        grp_fu_401_p_din0,
        grp_fu_401_p_din1,
        grp_fu_401_p_opcode,
        grp_fu_401_p_dout0,
        grp_fu_401_p_ce,
        grp_fu_405_p_din0,
        grp_fu_405_p_din1,
        grp_fu_405_p_opcode,
        grp_fu_405_p_dout0,
        grp_fu_405_p_ce,
        grp_fu_1022_p_din0,
        grp_fu_1022_p_din1,
        grp_fu_1022_p_dout0,
        grp_fu_1022_p_ce,
        grp_fu_1026_p_din0,
        grp_fu_1026_p_din1,
        grp_fu_1026_p_dout0,
        grp_fu_1026_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] cols;
input  [10:0] add_ln300;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [63:0] input_r_q0;
output  [10:0] input_r_address1;
output   input_r_ce1;
input  [63:0] input_r_q1;
input  [10:0] add_ln300_1;
output  [3:0] values_1_address0;
output   values_1_ce0;
input  [63:0] values_1_q0;
output  [3:0] values_1_address1;
output   values_1_ce1;
output   values_1_we1;
output  [63:0] values_1_d1;
output  [3:0] values_address0;
output   values_ce0;
input  [63:0] values_q0;
output  [3:0] values_address1;
output   values_ce1;
output   values_we1;
output  [63:0] values_d1;
input  [63:0] d_cols;
input  [0:0] cmp33_1;
output  [63:0] grp_fu_401_p_din0;
output  [63:0] grp_fu_401_p_din1;
output  [0:0] grp_fu_401_p_opcode;
input  [63:0] grp_fu_401_p_dout0;
output   grp_fu_401_p_ce;
output  [63:0] grp_fu_405_p_din0;
output  [63:0] grp_fu_405_p_din1;
output  [1:0] grp_fu_405_p_opcode;
input  [63:0] grp_fu_405_p_dout0;
output   grp_fu_405_p_ce;
output  [63:0] grp_fu_1022_p_din0;
output  [63:0] grp_fu_1022_p_din1;
input  [63:0] grp_fu_1022_p_dout0;
output   grp_fu_1022_p_ce;
output  [63:0] grp_fu_1026_p_din0;
output  [63:0] grp_fu_1026_p_din1;
input  [63:0] grp_fu_1026_p_dout0;
output   grp_fu_1026_p_ce;

reg ap_idle;
reg input_r_ce0;
reg input_r_ce1;
reg values_1_ce0;
reg values_1_ce1;
reg values_1_we1;
reg values_ce0;
reg values_ce1;
reg values_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln293_fu_191_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_fu_239_p2;
reg   [0:0] icmp_reg_318;
reg   [0:0] icmp_reg_318_pp0_iter1_reg;
reg   [0:0] icmp_reg_318_pp0_iter2_reg;
reg   [0:0] icmp_reg_318_pp0_iter3_reg;
reg   [0:0] icmp_reg_318_pp0_iter4_reg;
reg   [0:0] icmp_reg_318_pp0_iter5_reg;
reg   [0:0] icmp_reg_318_pp0_iter6_reg;
reg   [0:0] icmp_reg_318_pp0_iter7_reg;
reg   [0:0] icmp_reg_318_pp0_iter8_reg;
reg   [0:0] icmp_reg_318_pp0_iter9_reg;
reg   [0:0] icmp_reg_318_pp0_iter10_reg;
reg   [0:0] icmp_reg_318_pp0_iter11_reg;
reg   [0:0] icmp_reg_318_pp0_iter12_reg;
reg   [0:0] icmp_reg_318_pp0_iter13_reg;
reg   [0:0] icmp_reg_318_pp0_iter14_reg;
reg   [0:0] icmp_reg_318_pp0_iter15_reg;
reg   [0:0] icmp_reg_318_pp0_iter16_reg;
wire   [3:0] empty_fu_245_p1;
reg   [3:0] empty_reg_324;
reg   [3:0] empty_reg_324_pp0_iter1_reg;
reg   [3:0] empty_reg_324_pp0_iter2_reg;
reg   [3:0] empty_reg_324_pp0_iter3_reg;
reg   [3:0] empty_reg_324_pp0_iter4_reg;
reg   [3:0] empty_reg_324_pp0_iter5_reg;
reg   [3:0] empty_reg_324_pp0_iter6_reg;
reg   [3:0] empty_reg_324_pp0_iter7_reg;
reg   [63:0] input_r_load_reg_329;
reg   [63:0] input_r_load_3_reg_334;
wire   [63:0] bitcast_ln300_fu_254_p1;
wire   [63:0] bitcast_ln300_1_fu_258_p1;
reg   [3:0] values_addr_reg_349;
reg   [3:0] values_addr_reg_349_pp0_iter9_reg;
reg   [3:0] values_addr_reg_349_pp0_iter10_reg;
reg   [3:0] values_addr_reg_349_pp0_iter11_reg;
reg   [3:0] values_addr_reg_349_pp0_iter12_reg;
reg   [3:0] values_addr_reg_349_pp0_iter13_reg;
reg   [3:0] values_addr_reg_349_pp0_iter14_reg;
reg   [3:0] values_addr_reg_349_pp0_iter15_reg;
reg   [3:0] values_addr_reg_349_pp0_iter16_reg;
reg   [3:0] values_addr_reg_349_pp0_iter17_reg;
reg   [3:0] values_1_addr_reg_355;
reg   [3:0] values_1_addr_reg_355_pp0_iter9_reg;
reg   [3:0] values_1_addr_reg_355_pp0_iter10_reg;
reg   [3:0] values_1_addr_reg_355_pp0_iter11_reg;
reg   [3:0] values_1_addr_reg_355_pp0_iter12_reg;
reg   [3:0] values_1_addr_reg_355_pp0_iter13_reg;
reg   [3:0] values_1_addr_reg_355_pp0_iter14_reg;
reg   [3:0] values_1_addr_reg_355_pp0_iter15_reg;
reg   [3:0] values_1_addr_reg_355_pp0_iter16_reg;
reg   [3:0] values_1_addr_reg_355_pp0_iter17_reg;
reg   [63:0] values1_reg_361;
reg   [63:0] values1_reg_361_pp0_iter10_reg;
reg   [63:0] values1_reg_361_pp0_iter11_reg;
reg   [63:0] values1_reg_361_pp0_iter12_reg;
reg   [63:0] values1_reg_361_pp0_iter13_reg;
reg   [63:0] values1_reg_361_pp0_iter14_reg;
reg   [63:0] values1_reg_361_pp0_iter15_reg;
reg   [63:0] values1_reg_361_pp0_iter16_reg;
reg   [63:0] values1_1_reg_367;
reg   [63:0] values_load_reg_372;
reg   [63:0] values_1_load_reg_377;
wire   [63:0] tmp_12_fu_267_p3;
reg   [63:0] tmp_12_reg_382;
reg   [63:0] tmp_12_reg_382_pp0_iter11_reg;
reg   [63:0] tmp_12_reg_382_pp0_iter12_reg;
reg   [63:0] tmp_12_reg_382_pp0_iter13_reg;
reg   [63:0] tmp_12_reg_382_pp0_iter14_reg;
reg   [63:0] tmp_12_reg_382_pp0_iter15_reg;
reg   [63:0] tmp_12_reg_382_pp0_iter16_reg;
wire   [63:0] storemerge2_fu_274_p3;
reg   [63:0] storemerge2_reg_388;
wire   [63:0] storemerge_fu_280_p3;
reg   [63:0] storemerge_reg_393;
wire   [63:0] zext_ln300_fu_213_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln300_1_fu_224_p1;
wire   [63:0] idxprom881_fu_262_p1;
reg   [30:0] j_fu_70;
wire   [30:0] add_ln293_fu_197_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_j_4;
wire   [31:0] zext_ln293_fu_187_p1;
wire   [10:0] trunc_ln300_fu_203_p1;
wire   [10:0] add_ln300_2_fu_207_p2;
wire   [10:0] add_ln300_3_fu_218_p2;
wire   [26:0] tmp_fu_229_p4;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 j_fu_70 = 31'd0;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter17_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln293_fu_191_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_70 <= add_ln293_fu_197_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_70 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        empty_reg_324_pp0_iter2_reg <= empty_reg_324_pp0_iter1_reg;
        empty_reg_324_pp0_iter3_reg <= empty_reg_324_pp0_iter2_reg;
        empty_reg_324_pp0_iter4_reg <= empty_reg_324_pp0_iter3_reg;
        empty_reg_324_pp0_iter5_reg <= empty_reg_324_pp0_iter4_reg;
        empty_reg_324_pp0_iter6_reg <= empty_reg_324_pp0_iter5_reg;
        empty_reg_324_pp0_iter7_reg <= empty_reg_324_pp0_iter6_reg;
        icmp_reg_318_pp0_iter10_reg <= icmp_reg_318_pp0_iter9_reg;
        icmp_reg_318_pp0_iter11_reg <= icmp_reg_318_pp0_iter10_reg;
        icmp_reg_318_pp0_iter12_reg <= icmp_reg_318_pp0_iter11_reg;
        icmp_reg_318_pp0_iter13_reg <= icmp_reg_318_pp0_iter12_reg;
        icmp_reg_318_pp0_iter14_reg <= icmp_reg_318_pp0_iter13_reg;
        icmp_reg_318_pp0_iter15_reg <= icmp_reg_318_pp0_iter14_reg;
        icmp_reg_318_pp0_iter16_reg <= icmp_reg_318_pp0_iter15_reg;
        icmp_reg_318_pp0_iter2_reg <= icmp_reg_318_pp0_iter1_reg;
        icmp_reg_318_pp0_iter3_reg <= icmp_reg_318_pp0_iter2_reg;
        icmp_reg_318_pp0_iter4_reg <= icmp_reg_318_pp0_iter3_reg;
        icmp_reg_318_pp0_iter5_reg <= icmp_reg_318_pp0_iter4_reg;
        icmp_reg_318_pp0_iter6_reg <= icmp_reg_318_pp0_iter5_reg;
        icmp_reg_318_pp0_iter7_reg <= icmp_reg_318_pp0_iter6_reg;
        icmp_reg_318_pp0_iter8_reg <= icmp_reg_318_pp0_iter7_reg;
        icmp_reg_318_pp0_iter9_reg <= icmp_reg_318_pp0_iter8_reg;
        storemerge2_reg_388 <= storemerge2_fu_274_p3;
        storemerge_reg_393 <= storemerge_fu_280_p3;
        tmp_12_reg_382 <= tmp_12_fu_267_p3;
        tmp_12_reg_382_pp0_iter11_reg <= tmp_12_reg_382;
        tmp_12_reg_382_pp0_iter12_reg <= tmp_12_reg_382_pp0_iter11_reg;
        tmp_12_reg_382_pp0_iter13_reg <= tmp_12_reg_382_pp0_iter12_reg;
        tmp_12_reg_382_pp0_iter14_reg <= tmp_12_reg_382_pp0_iter13_reg;
        tmp_12_reg_382_pp0_iter15_reg <= tmp_12_reg_382_pp0_iter14_reg;
        tmp_12_reg_382_pp0_iter16_reg <= tmp_12_reg_382_pp0_iter15_reg;
        values1_1_reg_367 <= grp_fu_1026_p_dout0;
        values1_reg_361 <= grp_fu_1022_p_dout0;
        values1_reg_361_pp0_iter10_reg <= values1_reg_361;
        values1_reg_361_pp0_iter11_reg <= values1_reg_361_pp0_iter10_reg;
        values1_reg_361_pp0_iter12_reg <= values1_reg_361_pp0_iter11_reg;
        values1_reg_361_pp0_iter13_reg <= values1_reg_361_pp0_iter12_reg;
        values1_reg_361_pp0_iter14_reg <= values1_reg_361_pp0_iter13_reg;
        values1_reg_361_pp0_iter15_reg <= values1_reg_361_pp0_iter14_reg;
        values1_reg_361_pp0_iter16_reg <= values1_reg_361_pp0_iter15_reg;
        values_1_addr_reg_355 <= idxprom881_fu_262_p1;
        values_1_addr_reg_355_pp0_iter10_reg <= values_1_addr_reg_355_pp0_iter9_reg;
        values_1_addr_reg_355_pp0_iter11_reg <= values_1_addr_reg_355_pp0_iter10_reg;
        values_1_addr_reg_355_pp0_iter12_reg <= values_1_addr_reg_355_pp0_iter11_reg;
        values_1_addr_reg_355_pp0_iter13_reg <= values_1_addr_reg_355_pp0_iter12_reg;
        values_1_addr_reg_355_pp0_iter14_reg <= values_1_addr_reg_355_pp0_iter13_reg;
        values_1_addr_reg_355_pp0_iter15_reg <= values_1_addr_reg_355_pp0_iter14_reg;
        values_1_addr_reg_355_pp0_iter16_reg <= values_1_addr_reg_355_pp0_iter15_reg;
        values_1_addr_reg_355_pp0_iter17_reg <= values_1_addr_reg_355_pp0_iter16_reg;
        values_1_addr_reg_355_pp0_iter9_reg <= values_1_addr_reg_355;
        values_addr_reg_349 <= idxprom881_fu_262_p1;
        values_addr_reg_349_pp0_iter10_reg <= values_addr_reg_349_pp0_iter9_reg;
        values_addr_reg_349_pp0_iter11_reg <= values_addr_reg_349_pp0_iter10_reg;
        values_addr_reg_349_pp0_iter12_reg <= values_addr_reg_349_pp0_iter11_reg;
        values_addr_reg_349_pp0_iter13_reg <= values_addr_reg_349_pp0_iter12_reg;
        values_addr_reg_349_pp0_iter14_reg <= values_addr_reg_349_pp0_iter13_reg;
        values_addr_reg_349_pp0_iter15_reg <= values_addr_reg_349_pp0_iter14_reg;
        values_addr_reg_349_pp0_iter16_reg <= values_addr_reg_349_pp0_iter15_reg;
        values_addr_reg_349_pp0_iter17_reg <= values_addr_reg_349_pp0_iter16_reg;
        values_addr_reg_349_pp0_iter9_reg <= values_addr_reg_349;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_324 <= empty_fu_245_p1;
        empty_reg_324_pp0_iter1_reg <= empty_reg_324;
        icmp_reg_318 <= icmp_fu_239_p2;
        icmp_reg_318_pp0_iter1_reg <= icmp_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_load_3_reg_334 <= input_r_q0;
        input_r_load_reg_329 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        values_1_load_reg_377 <= values_1_q0;
        values_load_reg_372 <= values_q0;
    end
end

always @ (*) begin
    if (((icmp_ln293_fu_191_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter17_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_4 = 31'd0;
    end else begin
        ap_sig_allocacmp_j_4 = j_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        values_1_ce0 = 1'b1;
    end else begin
        values_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        values_1_ce1 = 1'b1;
    end else begin
        values_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        values_1_we1 = 1'b1;
    end else begin
        values_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        values_ce0 = 1'b1;
    end else begin
        values_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        values_ce1 = 1'b1;
    end else begin
        values_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        values_we1 = 1'b1;
    end else begin
        values_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln293_fu_197_p2 = (ap_sig_allocacmp_j_4 + 31'd1);

assign add_ln300_2_fu_207_p2 = (add_ln300 + trunc_ln300_fu_203_p1);

assign add_ln300_3_fu_218_p2 = (add_ln300_1 + trunc_ln300_fu_203_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln300_1_fu_258_p1 = input_r_load_3_reg_334;

assign bitcast_ln300_fu_254_p1 = input_r_load_reg_329;

assign empty_fu_245_p1 = ap_sig_allocacmp_j_4[3:0];

assign grp_fu_1022_p_ce = 1'b1;

assign grp_fu_1022_p_din0 = bitcast_ln300_fu_254_p1;

assign grp_fu_1022_p_din1 = d_cols;

assign grp_fu_1026_p_ce = 1'b1;

assign grp_fu_1026_p_din0 = bitcast_ln300_1_fu_258_p1;

assign grp_fu_1026_p_din1 = d_cols;

assign grp_fu_401_p_ce = 1'b1;

assign grp_fu_401_p_din0 = values_load_reg_372;

assign grp_fu_401_p_din1 = values1_reg_361;

assign grp_fu_401_p_opcode = 2'd0;

assign grp_fu_405_p_ce = 1'b1;

assign grp_fu_405_p_din0 = values_1_load_reg_377;

assign grp_fu_405_p_din1 = tmp_12_fu_267_p3;

assign grp_fu_405_p_opcode = 2'd0;

assign icmp_fu_239_p2 = ((tmp_fu_229_p4 == 27'd0) ? 1'b1 : 1'b0);

assign icmp_ln293_fu_191_p2 = (($signed(zext_ln293_fu_187_p1) < $signed(cols)) ? 1'b1 : 1'b0);

assign idxprom881_fu_262_p1 = empty_reg_324_pp0_iter7_reg;

assign input_r_address0 = zext_ln300_1_fu_224_p1;

assign input_r_address1 = zext_ln300_fu_213_p1;

assign storemerge2_fu_274_p3 = ((icmp_reg_318_pp0_iter16_reg[0:0] == 1'b1) ? values1_reg_361_pp0_iter16_reg : grp_fu_401_p_dout0);

assign storemerge_fu_280_p3 = ((icmp_reg_318_pp0_iter16_reg[0:0] == 1'b1) ? tmp_12_reg_382_pp0_iter16_reg : grp_fu_405_p_dout0);

assign tmp_12_fu_267_p3 = ((cmp33_1[0:0] == 1'b1) ? values1_1_reg_367 : 64'd0);

assign tmp_fu_229_p4 = {{ap_sig_allocacmp_j_4[30:4]}};

assign trunc_ln300_fu_203_p1 = ap_sig_allocacmp_j_4[10:0];

assign values_1_address0 = idxprom881_fu_262_p1;

assign values_1_address1 = values_1_addr_reg_355_pp0_iter17_reg;

assign values_1_d1 = storemerge_reg_393;

assign values_address0 = idxprom881_fu_262_p1;

assign values_address1 = values_addr_reg_349_pp0_iter17_reg;

assign values_d1 = storemerge2_reg_388;

assign zext_ln293_fu_187_p1 = ap_sig_allocacmp_j_4;

assign zext_ln300_1_fu_224_p1 = add_ln300_3_fu_218_p2;

assign zext_ln300_fu_213_p1 = add_ln300_2_fu_207_p2;

endmodule //dut_aveImpl_double_15_80_1_2_16_Pipeline_loop_a1

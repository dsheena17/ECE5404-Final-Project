// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dut_dut_Pipeline_VITIS_LOOP_321_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rows,
        outputComponents_2_address0,
        outputComponents_2_ce0,
        outputComponents_2_we0,
        outputComponents_2_d0,
        outputComponents_1_address0,
        outputComponents_1_ce0,
        outputComponents_1_we0,
        outputComponents_1_d0,
        outputComponents_0_address0,
        outputComponents_0_ce0,
        outputComponents_0_we0,
        outputComponents_0_d0,
        pca_m_pcVecs_address0,
        pca_m_pcVecs_ce0,
        pca_m_pcVecs_q0,
        pca_m_pcVecs_3_address0,
        pca_m_pcVecs_3_ce0,
        pca_m_pcVecs_3_q0,
        pca_m_pcVecs_4_address0,
        pca_m_pcVecs_4_ce0,
        pca_m_pcVecs_4_q0,
        grp_fu_447_p_din0,
        grp_fu_447_p_din1,
        grp_fu_447_p_dout0,
        grp_fu_447_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] rows;
output  [3:0] outputComponents_2_address0;
output   outputComponents_2_ce0;
output   outputComponents_2_we0;
output  [63:0] outputComponents_2_d0;
output  [3:0] outputComponents_1_address0;
output   outputComponents_1_ce0;
output   outputComponents_1_we0;
output  [63:0] outputComponents_1_d0;
output  [3:0] outputComponents_0_address0;
output   outputComponents_0_ce0;
output   outputComponents_0_we0;
output  [63:0] outputComponents_0_d0;
output  [4:0] pca_m_pcVecs_address0;
output   pca_m_pcVecs_ce0;
input  [63:0] pca_m_pcVecs_q0;
output  [4:0] pca_m_pcVecs_3_address0;
output   pca_m_pcVecs_3_ce0;
input  [63:0] pca_m_pcVecs_3_q0;
output  [4:0] pca_m_pcVecs_4_address0;
output   pca_m_pcVecs_4_ce0;
input  [63:0] pca_m_pcVecs_4_q0;
output  [31:0] grp_fu_447_p_din0;
output  [33:0] grp_fu_447_p_din1;
input  [64:0] grp_fu_447_p_dout0;
output   grp_fu_447_p_ce;

reg ap_idle;
reg outputComponents_2_ce0;
reg outputComponents_2_we0;
reg outputComponents_1_ce0;
reg outputComponents_1_we0;
reg outputComponents_0_ce0;
reg outputComponents_0_we0;
reg pca_m_pcVecs_ce0;
reg pca_m_pcVecs_3_ce0;
reg pca_m_pcVecs_4_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln321_fu_157_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] i_7_reg_280;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] i_7_reg_280_pp0_iter1_reg;
reg   [31:0] i_7_reg_280_pp0_iter2_reg;
reg   [31:0] i_7_reg_280_pp0_iter3_reg;
wire   [31:0] mul_i_fu_175_p2;
reg   [31:0] mul_i_reg_289;
wire   [31:0] add_ln324_fu_181_p2;
reg   [31:0] add_ln324_reg_294;
wire   [31:0] add_ln324_1_fu_187_p2;
reg   [31:0] add_ln324_1_reg_299;
wire   [64:0] zext_ln324_3_fu_198_p1;
reg   [30:0] tmp_reg_319;
reg   [30:0] tmp_8_reg_324;
reg   [30:0] tmp_9_reg_329;
wire   [63:0] zext_ln324_fu_240_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln324_1_fu_244_p1;
wire   [63:0] zext_ln324_2_fu_248_p1;
wire   [63:0] zext_ln321_fu_252_p1;
reg   [31:0] i_fu_46;
wire   [31:0] add_ln321_fu_163_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_i_7;
wire   [31:0] grp_fu_139_p0;
wire   [33:0] grp_fu_139_p1;
wire   [31:0] grp_fu_144_p0;
wire   [33:0] grp_fu_144_p1;
wire   [31:0] empty_fu_169_p2;
wire   [64:0] grp_fu_139_p2;
wire   [64:0] grp_fu_144_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [64:0] grp_fu_139_p00;
wire   [64:0] grp_fu_144_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 i_fu_46 = 32'd0;
#0 ap_done_reg = 1'b0;
end

dut_mul_32ns_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32ns_34ns_65_2_1_U337(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_139_p0),
    .din1(grp_fu_139_p1),
    .ce(1'b1),
    .dout(grp_fu_139_p2)
);

dut_mul_32ns_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32ns_34ns_65_2_1_U338(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_144_p0),
    .din1(grp_fu_144_p1),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln321_fu_157_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_46 <= add_ln321_fu_163_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_46 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln324_1_reg_299 <= add_ln324_1_fu_187_p2;
        add_ln324_reg_294 <= add_ln324_fu_181_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_7_reg_280 <= ap_sig_allocacmp_i_7;
        i_7_reg_280_pp0_iter1_reg <= i_7_reg_280;
        mul_i_reg_289 <= mul_i_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        i_7_reg_280_pp0_iter2_reg <= i_7_reg_280_pp0_iter1_reg;
        i_7_reg_280_pp0_iter3_reg <= i_7_reg_280_pp0_iter2_reg;
        tmp_8_reg_324 <= {{grp_fu_139_p2[64:34]}};
        tmp_9_reg_329 <= {{grp_fu_144_p2[64:34]}};
        tmp_reg_319 <= {{grp_fu_447_p_dout0[64:34]}};
    end
end

always @ (*) begin
    if (((icmp_ln321_fu_157_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_7 = 32'd0;
    end else begin
        ap_sig_allocacmp_i_7 = i_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        outputComponents_0_ce0 = 1'b1;
    end else begin
        outputComponents_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        outputComponents_0_we0 = 1'b1;
    end else begin
        outputComponents_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        outputComponents_1_ce0 = 1'b1;
    end else begin
        outputComponents_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        outputComponents_1_we0 = 1'b1;
    end else begin
        outputComponents_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        outputComponents_2_ce0 = 1'b1;
    end else begin
        outputComponents_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        outputComponents_2_we0 = 1'b1;
    end else begin
        outputComponents_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        pca_m_pcVecs_3_ce0 = 1'b1;
    end else begin
        pca_m_pcVecs_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        pca_m_pcVecs_4_ce0 = 1'b1;
    end else begin
        pca_m_pcVecs_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        pca_m_pcVecs_ce0 = 1'b1;
    end else begin
        pca_m_pcVecs_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln321_fu_163_p2 = (ap_sig_allocacmp_i_7 + 32'd1);

assign add_ln324_1_fu_187_p2 = (mul_i_fu_175_p2 + 32'd1);

assign add_ln324_fu_181_p2 = (mul_i_fu_175_p2 + 32'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_169_p2 = ap_sig_allocacmp_i_7 << 32'd2;

assign grp_fu_139_p0 = grp_fu_139_p00;

assign grp_fu_139_p00 = add_ln324_1_reg_299;

assign grp_fu_139_p1 = 65'd5726623062;

assign grp_fu_144_p0 = grp_fu_144_p00;

assign grp_fu_144_p00 = add_ln324_reg_294;

assign grp_fu_144_p1 = 65'd5726623062;

assign grp_fu_447_p_ce = 1'b1;

assign grp_fu_447_p_din0 = zext_ln324_3_fu_198_p1;

assign grp_fu_447_p_din1 = 65'd5726623062;

assign icmp_ln321_fu_157_p2 = ((ap_sig_allocacmp_i_7 == rows) ? 1'b1 : 1'b0);

assign mul_i_fu_175_p2 = (empty_fu_169_p2 - ap_sig_allocacmp_i_7);

assign outputComponents_0_address0 = zext_ln321_fu_252_p1;

assign outputComponents_0_d0 = pca_m_pcVecs_q0;

assign outputComponents_1_address0 = zext_ln321_fu_252_p1;

assign outputComponents_1_d0 = pca_m_pcVecs_3_q0;

assign outputComponents_2_address0 = zext_ln321_fu_252_p1;

assign outputComponents_2_d0 = pca_m_pcVecs_4_q0;

assign pca_m_pcVecs_3_address0 = zext_ln324_1_fu_244_p1;

assign pca_m_pcVecs_4_address0 = zext_ln324_2_fu_248_p1;

assign pca_m_pcVecs_address0 = zext_ln324_fu_240_p1;

assign zext_ln321_fu_252_p1 = i_7_reg_280_pp0_iter3_reg;

assign zext_ln324_1_fu_244_p1 = tmp_8_reg_324;

assign zext_ln324_2_fu_248_p1 = tmp_9_reg_329;

assign zext_ln324_3_fu_198_p1 = mul_i_reg_289;

assign zext_ln324_fu_240_p1 = tmp_reg_319;

endmodule //dut_dut_Pipeline_VITIS_LOOP_321_1

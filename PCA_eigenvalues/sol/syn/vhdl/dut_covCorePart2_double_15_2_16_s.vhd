-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_covCorePart2_double_15_2_16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    rows_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cols_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cols_empty_n : IN STD_LOGIC;
    cols_read : OUT STD_LOGIC;
    values2Strm_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    values2Strm_0_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    values2Strm_0_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    values2Strm_0_empty_n : IN STD_LOGIC;
    values2Strm_0_read : OUT STD_LOGIC;
    values2Strm_1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    values2Strm_1_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    values2Strm_1_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    values2Strm_1_empty_n : IN STD_LOGIC;
    values2Strm_1_read : OUT STD_LOGIC;
    outCovMatrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    outCovMatrix_ce0 : OUT STD_LOGIC;
    outCovMatrix_we0 : OUT STD_LOGIC;
    outCovMatrix_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of dut_covCorePart2_double_15_2_16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rows_blk_n : STD_LOGIC;
    signal cols_blk_n : STD_LOGIC;
    signal rows_1_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal add_ln242_fu_103_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln242_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_reg_216 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_95_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal d1_cols_reg_221 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal i_8_reg_226 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal trunc_ln255_fu_145_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln255_reg_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln255_fu_158_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln255_reg_239 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_244 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_start : STD_LOGIC;
    signal grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_done : STD_LOGIC;
    signal grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_idle : STD_LOGIC;
    signal grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_ready : STD_LOGIC;
    signal grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_values2Strm_0_read : STD_LOGIC;
    signal grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_values2Strm_1_read : STD_LOGIC;
    signal grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_outCovMatrix_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_outCovMatrix_ce0 : STD_LOGIC;
    signal grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_outCovMatrix_we0 : STD_LOGIC;
    signal grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_outCovMatrix_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln243_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal indvars_iv10_fu_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln243_1_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln243_fu_136_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln243_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln243_fu_123_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_150_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        values2Strm_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        values2Strm_0_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        values2Strm_0_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        values2Strm_0_empty_n : IN STD_LOGIC;
        values2Strm_0_read : OUT STD_LOGIC;
        values2Strm_1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        values2Strm_1_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        values2Strm_1_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        values2Strm_1_empty_n : IN STD_LOGIC;
        values2Strm_1_read : OUT STD_LOGIC;
        trunc_ln : IN STD_LOGIC_VECTOR (30 downto 0);
        sub_ln255 : IN STD_LOGIC_VECTOR (7 downto 0);
        outCovMatrix_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        outCovMatrix_ce0 : OUT STD_LOGIC;
        outCovMatrix_we0 : OUT STD_LOGIC;
        outCovMatrix_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        zext_ln243 : IN STD_LOGIC_VECTOR (7 downto 0);
        d1_cols : IN STD_LOGIC_VECTOR (63 downto 0);
        zext_ln243_1 : IN STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component dut_ddiv_64ns_64ns_64_31_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_sitodp_32ns_64_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80 : component dut_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_start,
        ap_done => grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_done,
        ap_idle => grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_idle,
        ap_ready => grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_ready,
        values2Strm_0_dout => values2Strm_0_dout,
        values2Strm_0_num_data_valid => ap_const_lv6_0,
        values2Strm_0_fifo_cap => ap_const_lv6_0,
        values2Strm_0_empty_n => values2Strm_0_empty_n,
        values2Strm_0_read => grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_values2Strm_0_read,
        values2Strm_1_dout => values2Strm_1_dout,
        values2Strm_1_num_data_valid => ap_const_lv6_0,
        values2Strm_1_fifo_cap => ap_const_lv6_0,
        values2Strm_1_empty_n => values2Strm_1_empty_n,
        values2Strm_1_read => grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_values2Strm_1_read,
        trunc_ln => trunc_ln_reg_244,
        sub_ln255 => sub_ln255_reg_239,
        outCovMatrix_address0 => grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_outCovMatrix_address0,
        outCovMatrix_ce0 => grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_outCovMatrix_ce0,
        outCovMatrix_we0 => grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_outCovMatrix_we0,
        outCovMatrix_d0 => grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_outCovMatrix_d0,
        zext_ln243 => trunc_ln255_reg_234,
        d1_cols => d1_cols_reg_221,
        zext_ln243_1 => i_8_reg_226);

    ddiv_64ns_64ns_64_31_no_dsp_1_U72 : component dut_ddiv_64ns_64ns_64_31_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => conv_reg_216,
        ce => ap_const_logic_1,
        dout => grp_fu_95_p2);

    sitodp_32ns_64_5_no_dsp_1_U73 : component dut_sitodp_32ns_64_5_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln242_reg_211,
        ce => ap_const_logic_1,
        dout => grp_fu_100_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln243_fu_131_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln243_fu_131_p2 = ap_const_lv1_1))) then 
                    grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_ready = ap_const_logic_1)) then 
                    grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                i_fu_64 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln243_fu_131_p2 = ap_const_lv1_1))) then 
                i_fu_64 <= add_ln243_fu_136_p2;
            end if; 
        end if;
    end process;

    indvars_iv10_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                indvars_iv10_fu_60 <= ap_const_lv32_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln243_fu_131_p2 = ap_const_lv1_1))) then 
                indvars_iv10_fu_60 <= add_ln243_1_fu_176_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                add_ln242_reg_211 <= add_ln242_fu_103_p2;
                rows_1_reg_206 <= rows_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                conv_reg_216 <= grp_fu_100_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                d1_cols_reg_221 <= grp_fu_95_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                i_8_reg_226 <= i_fu_64;
                sub_ln255_reg_239 <= sub_ln255_fu_158_p2;
                trunc_ln255_reg_234 <= trunc_ln255_fu_145_p1;
                trunc_ln_reg_244 <= indvars_iv10_fu_60(31 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, ap_CS_fsm_state38, grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_done, icmp_ln243_fu_131_p2, ap_CS_fsm_state39)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln243_fu_131_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln242_fu_103_p2 <= std_logic_vector(unsigned(cols_dout) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln243_1_fu_176_p2 <= std_logic_vector(unsigned(indvars_iv10_fu_60) + unsigned(ap_const_lv32_1));
    add_ln243_fu_136_p2 <= std_logic_vector(unsigned(i_fu_64) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;

    ap_ST_fsm_state39_blk_assign_proc : process(grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_done)
    begin
        if ((grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, cols_empty_n)
    begin
                ap_block_state1 <= ((cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state38, icmp_ln243_fu_131_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln243_fu_131_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state38, icmp_ln243_fu_131_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln243_fu_131_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_blk_n <= cols_empty_n;
        else 
            cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cols_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            cols_read <= ap_const_logic_1;
        else 
            cols_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_start <= grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_ap_start_reg;
    icmp_ln243_fu_131_p2 <= "1" when (signed(zext_ln243_fu_127_p1) < signed(rows_1_reg_206)) else "0";
    outCovMatrix_address0 <= grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_outCovMatrix_address0;
    outCovMatrix_ce0 <= grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_outCovMatrix_ce0;
    outCovMatrix_d0 <= grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_outCovMatrix_d0;
    outCovMatrix_we0 <= grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_outCovMatrix_we0;

    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln255_fu_158_p2 <= std_logic_vector(unsigned(tmp_fu_150_p3) - unsigned(trunc_ln255_fu_145_p1));
    tmp_fu_150_p3 <= (trunc_ln243_fu_123_p1 & ap_const_lv4_0);
    trunc_ln243_fu_123_p1 <= i_fu_64(4 - 1 downto 0);
    trunc_ln255_fu_145_p1 <= i_fu_64(8 - 1 downto 0);

    values2Strm_0_read_assign_proc : process(grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_values2Strm_0_read, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            values2Strm_0_read <= grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_values2Strm_0_read;
        else 
            values2Strm_0_read <= ap_const_logic_0;
        end if; 
    end process;


    values2Strm_1_read_assign_proc : process(grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_values2Strm_1_read, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            values2Strm_1_read <= grp_covCorePart2_double_15_2_16_Pipeline_VITIS_LOOP_245_2_fu_80_values2Strm_1_read;
        else 
            values2Strm_1_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln243_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_64),32));
end behav;

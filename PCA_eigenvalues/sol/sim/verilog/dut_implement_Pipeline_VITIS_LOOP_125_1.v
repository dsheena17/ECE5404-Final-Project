// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dut_implement_Pipeline_VITIS_LOOP_125_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dSortedBuf_address0,
        dSortedBuf_ce0,
        dSortedBuf_q0,
        bitcast_ln126,
        empty,
        eigVals_load,
        j_2_out,
        j_2_out_ap_vld,
        zext_ln125_out,
        zext_ln125_out_ap_vld,
        ap_return,
        grp_fu_717_p_din0,
        grp_fu_717_p_din1,
        grp_fu_717_p_opcode,
        grp_fu_717_p_dout0,
        grp_fu_717_p_ce
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_state7 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] dSortedBuf_address0;
output   dSortedBuf_ce0;
input  [63:0] dSortedBuf_q0;
input  [62:0] bitcast_ln126;
input  [51:0] empty;
input  [63:0] eigVals_load;
output  [1:0] j_2_out;
output   j_2_out_ap_vld;
output  [1:0] zext_ln125_out;
output   zext_ln125_out_ap_vld;
output  [0:0] ap_return;
output  [63:0] grp_fu_717_p_din0;
output  [63:0] grp_fu_717_p_din1;
output  [4:0] grp_fu_717_p_opcode;
input  [0:0] grp_fu_717_p_dout0;
output   grp_fu_717_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dSortedBuf_ce0;
reg[1:0] j_2_out;
reg j_2_out_ap_vld;
reg zext_ln125_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] j_1_reg_249;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln125_fu_138_p2;
reg   [0:0] icmp_ln125_reg_256;
wire   [0:0] icmp_ln126_fu_158_p2;
reg   [0:0] icmp_ln126_reg_265;
wire   [0:0] icmp_ln126_1_fu_164_p2;
reg   [0:0] icmp_ln126_1_reg_270;
reg   [63:0] dSortedBuf_load_reg_275;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire   [1:0] add_ln125_fu_169_p2;
reg   [1:0] add_ln125_reg_281;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire   [0:0] icmp_ln126_2_fu_191_p2;
reg   [0:0] icmp_ln126_2_reg_286;
wire   [0:0] icmp_ln126_3_fu_197_p2;
reg   [0:0] icmp_ln126_3_reg_291;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_subdone;
wire   [0:0] and_ln126_1_fu_217_p2;
reg    ap_predicate_tran5to7_state5;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_118_p4;
reg   [0:0] UnifiedRetVal_reg_114;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln125_fu_144_p1;
wire    ap_block_pp0_stage0;
reg   [1:0] j_fu_64;
reg   [1:0] ap_sig_allocacmp_j_1;
wire    ap_block_pp0_stage2;
wire   [10:0] tmp_s_fu_149_p4;
wire   [63:0] bitcast_ln126_1_fu_174_p1;
wire   [10:0] tmp_11_fu_177_p4;
wire   [51:0] trunc_ln126_fu_187_p1;
wire    ap_block_pp0_stage3;
wire   [0:0] or_ln126_1_fu_207_p2;
wire   [0:0] or_ln126_fu_203_p2;
wire   [0:0] and_ln126_fu_211_p2;
wire    ap_block_pp0_stage2_00001;
reg   [0:0] ap_return_preg;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 j_fu_64 = 2'd0;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_118_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        UnifiedRetVal_reg_114 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        UnifiedRetVal_reg_114 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_64 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_fu_64 <= add_ln125_reg_281;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln125_reg_281 <= add_ln125_fu_169_p2;
        icmp_ln126_2_reg_286 <= icmp_ln126_2_fu_191_p2;
        icmp_ln126_3_reg_291 <= icmp_ln126_3_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dSortedBuf_load_reg_275 <= dSortedBuf_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln125_reg_256 <= icmp_ln125_fu_138_p2;
        j_1_reg_249 <= ap_sig_allocacmp_j_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln126_1_reg_270 <= icmp_ln126_1_fu_164_p2;
        icmp_ln126_reg_265 <= icmp_ln126_fu_158_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln125_reg_256 == 1'd1) | (ap_predicate_tran5to7_state5 == 1'b1))) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln125_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_118_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_118_p4 = UnifiedRetVal_reg_114;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_118_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_sig_allocacmp_j_1 = add_ln125_reg_281;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dSortedBuf_ce0 = 1'b1;
    end else begin
        dSortedBuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_2_out = 2'd3;
    end else if (((icmp_ln125_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_2_out = j_1_reg_249;
    end else begin
        j_2_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln125_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        j_2_out_ap_vld = 1'b1;
    end else begin
        j_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln125_reg_256 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln125_out_ap_vld = 1'b1;
    end else begin
        zext_ln125_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~(((icmp_ln125_reg_256 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_tran5to7_state5 == 1'b1))) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln125_reg_256 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_tran5to7_state5 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln125_fu_169_p2 = (j_1_reg_249 + 2'd1);

assign and_ln126_1_fu_217_p2 = (grp_fu_717_p_dout0 & and_ln126_fu_211_p2);

assign and_ln126_fu_211_p2 = (or_ln126_fu_203_p2 & or_ln126_1_fu_207_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran5to7_state5 = ((icmp_ln125_reg_256 == 1'd0) & (1'd1 == and_ln126_1_fu_217_p2));
end

assign bitcast_ln126_1_fu_174_p1 = dSortedBuf_load_reg_275;

assign dSortedBuf_address0 = zext_ln125_fu_144_p1;

assign grp_fu_717_p_ce = 1'b1;

assign grp_fu_717_p_din0 = eigVals_load;

assign grp_fu_717_p_din1 = dSortedBuf_load_reg_275;

assign grp_fu_717_p_opcode = 5'd2;

assign icmp_ln125_fu_138_p2 = ((ap_sig_allocacmp_j_1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln126_1_fu_164_p2 = ((empty == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln126_2_fu_191_p2 = ((tmp_11_fu_177_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln126_3_fu_197_p2 = ((trunc_ln126_fu_187_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_158_p2 = ((tmp_s_fu_149_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln126_1_fu_207_p2 = (icmp_ln126_3_reg_291 | icmp_ln126_2_reg_286);

assign or_ln126_fu_203_p2 = (icmp_ln126_reg_265 | icmp_ln126_1_reg_270);

assign tmp_11_fu_177_p4 = {{bitcast_ln126_1_fu_174_p1[62:52]}};

assign tmp_s_fu_149_p4 = {{bitcast_ln126[62:52]}};

assign trunc_ln126_fu_187_p1 = bitcast_ln126_1_fu_174_p1[51:0];

assign zext_ln125_fu_144_p1 = ap_sig_allocacmp_j_1;

assign zext_ln125_out = j_1_reg_249;

endmodule //dut_implement_Pipeline_VITIS_LOOP_125_1
